# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_tdct.ipynb.

# %% auto 0
__all__ = ['typedictsig', 'newtdict', 'typedict', 'typedkwds', 'typedict_keywords']

# %% ../nbs/03_tdct.ipynb 6
from inspect import Signature, Parameter, get_annotations
from functools import wraps, partial
from dataclasses import fields

# %% ../nbs/03_tdct.ipynb 8
from typing import Self
from typing import TypedDict, Type, Callable

# %% ../nbs/03_tdct.ipynb 10
#| export


# %% ../nbs/03_tdct.ipynb 12
from atyp import ListQ
from chck import isnone, isdict
from nlit import __MODULE__, __NAME__, __QUALNAME__, __DOC__

# %% ../nbs/03_tdct.ipynb 14
#| export


# %% ../nbs/03_tdct.ipynb 16
def typedictsig(__dct: TypedDict, **kwargs) -> Signature:
    '''Returns a Signature object for a TypedDict class.'''
    anns = get_annotations(__dct)
    kwds, prms = list(anns.keys()), list()
    for kwd, ann in zip(kwds, anns.values()):
        if (val := kwargs.get(kwd, None)) is None and isinstance(ann, type):
            try: val = ann()
            except: val = None
        prm = Parameter(kwd, Parameter.POSITIONAL_OR_KEYWORD, annotation=ann, default=val)
        prms.append(prm)
    return Signature(prms, return_annotation=__dct)

# %% ../nbs/03_tdct.ipynb 17
def newtdict(__dct: TypedDict, *, __sig: Signature | None = None, **kwargs) -> TypedDict:
    '''Returns an instance of a TypedDict class with default values.'''
    sig = __sig or typedictsig(__dct, **kwargs)
    defaults = {
        k: v.default for k, v in sig.parameters.items() 
        if v.default is not Parameter.empty
    }
    defaults.update({k:v for k,v in kwargs.items() if k in defaults})
    return __dct(**defaults)

# %% ../nbs/03_tdct.ipynb 18
class typedict(dict):
    def __init_subclass__(cls, **defs: TypedDict) -> None:
        super().__init_subclass__()
        cls.__dct = defs.pop('__dct')
        cls.__sig = defs.pop('__sig', typedictsig(cls.__dct, **defs))
        return
    
    def __init__(self, *args, **kwargs):
        kwargs.pop('__dct', None)
        kwargs.pop('__sig', None)
        kwds = newtdict(type(self).__dct, __sig=type(self).__sig, **kwargs)
        super().__init__(*args, **kwds)

# %% ../nbs/03_tdct.ipynb 20
def typedkwds(d: TypedDict, **kwargs: TypedDict):
    def decorator(func: Callable):
        signature = typedictsig(d, **kwargs)
        construct = partial(newtdict, d, __sig=signature)
        @wraps(func, assigned = (__MODULE__, __NAME__, __QUALNAME__, __DOC__), updated=())
        class wrapper(typedict, __dct=d, __sig=signature):
            ...
        wrapper.__signature__ = signature
        wrapper.__annotations__ = d.__annotations__
        return wrapper
    return decorator

# %% ../nbs/03_tdct.ipynb 21
def typedict_keywords(d: TypedDict, **kwargs: TypedDict):
    def decorator(func: Callable):
        signature = typedictsig(d, **kwargs)
        construct = partial(newtdict, d, __sig=signature)
        @wraps(func, assigned = (__MODULE__, __NAME__, __QUALNAME__, __DOC__))
        def wrapper(**kwargs: Type[d]) -> Type[d]:
            kwds = construct(**kwargs)
            return d(**kwds)
        wrapper.__signature__ = signature
        return wrapper
    return decorator
