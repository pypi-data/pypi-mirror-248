import threading
from _typeshed import Incomplete
from typing import List
from win32com.client import DispatchEx as DispatchEx

class DmObject:
    def __init__(self) -> None: ...
    @classmethod
    def set_dll_path(cls, dm_reg_dll, dm_dll) -> None: ...
    def ex_reg(self, func: Incomplete | None = ...): ...
    def get_project_path(self): ...
    def create(self, obj_name: Incomplete | None = ...): ...
    def EnablePicCache(self, enable): ...
    def GetBasePath(self): ...
    def GetDmCount(self): ...
    def GetID(self): ...
    def GetLastError(self): ...
    def GetPath(self): ...
    def Reg(self, code, ver_info): ...
    def RegEx(self, code, ver_info, ip): ...
    def RegExNoMac(self, code, ver_info, ip): ...
    def RegNoMac(self, code, ver_info): ...
    def SetDisplayInput(self, mode): ...
    def SetEnumWindowDelay(self, delay): ...
    def SetPath(self, path): ...
    def SetShowErrorMsg(self, show): ...
    def SpeedNormalGraphic(self, enable): ...
    def Ver(self): ...
    def ClientToScreen(self, hwnd, x, y): ...
    def EnumProcess(self, name): ...
    def EnumWindow(self, parent, title, class_name, filter): ...
    def EnumWindowByProcess(self, process_name, title, class_name, filter): ...
    def EnumWindowByProcessId(self, process_id, title, class_name, filter): ...
    def EnumWindowSuper(self, spec1, flag1, type1, spec2, flag2, type2, sort): ...
    def FindWindow(self, class_name, title): ...
    def FindWindowByProcess(self, process_name, class_name, title): ...
    def FindWindowByProcessId(self, process_id, class_name, title): ...
    def FindWindowEx(self, parent, class_name, title): ...
    def FindWindowSuper(self, spec1, flag1, type1, spec2, flag2, type2): ...
    def GetClientRect(self, hwnd): ...
    def GetClientSize(self, hwnd): ...
    def GetForegroundFocus(self): ...
    def GetForegroundWindow(self): ...
    def GetMousePointWindow(self): ...
    def GetPointWindow(self, x, y): ...
    def GetProcessInfo(self, pid): ...
    def GetSpecialWindow(self, flag): ...
    def GetWindow(self, hwnd, flag): ...
    def GetWindowClass(self, hwnd): ...
    def GetWindowProcessId(self, hwnd): ...
    def GetWindowProcessPath(self, hwnd): ...
    def GetWindowRect(self, hwnd): ...
    def GetWindowState(self, hwnd, flag): ...
    def GetWindowThreadProcessId(self, hwnd): ...
    def GetWindowTitle(self, hwnd): ...
    def MoveWindow(self, hwnd, x, y): ...
    def ScreenToClient(self, hwnd, x, y): ...
    def SendPaste(self, hwnd): ...
    def SendString(self, hwnd, msg): ...
    def SendString2(self, hwnd, msg): ...
    def SendStringIme(self, hwnd, msg): ...
    def SetClientSize(self, hwnd, width, height): ...
    def SetWindowSize(self, hwnd, width, height): ...
    def SetWindowState(self, hwnd, flag): ...
    def SetWindowText(self, hwnd, title): ...
    def SetWindowTransparent(self, hwnd, v): ...
    def DmGuard(self, enable, g_type): ...
    def DmGuardExtract(self, dm_type, path): ...
    def DmGuardLoadCustom(self, dm_type, path): ...
    def DmGuardParams(self, dm_type, param): ...
    def UnLoadDriver(self): ...
    def BindWindow(self, hwnd, display, mouse, keypad, mode): ...
    def BindWindowEx(self, hwnd, display, mouse, keypad, public, mode): ...
    def DownCpu(self, rate): ...
    def EnableBind(self, en): ...
    def EnableFakeActive(self, en): ...
    def EnableIme(self, en): ...
    def EnableKeypadMsg(self, en): ...
    def EnableKeypadPatch(self, en): ...
    def EnableKeypadSync(self, en): ...
    def EnableMouseMsg(self, en): ...
    def EnableMouseSync(self, en): ...
    def EnableRealKeypad(self, en): ...
    def EnableRealMouse(self, en, mouse_delay, mouse_step): ...
    def EnableSpeedDx(self, en): ...
    def ForceUnBindWindow(self, hwnd): ...
    def GetBindWindow(self): ...
    def GetFps(self): ...
    def HackSpeed(self, speed): ...
    def IsBind(self, hwnd): ...
    def LockDisplay(self, lock): ...
    def LockInput(self, lock): ...
    def LockMouseRect(self, x1, y1, x2, y2): ...
    def SetAero(self, en): ...
    def SetDisplayDelay(self, t): ...
    def SetDisplayRefreshDelay(self, t): ...
    def SetInputDM(self, dm): ...
    def SwitchBindWindow(self, hwnd): ...
    def UnBindWindow(self): ...
    def EnableMouseAccuracy(self, en): ...
    def GetCursorPos(self): ...
    def GetCursorShape(self): ...
    def GetCursorShapeEx(self, type): ...
    def GetCursorSpot(self): ...
    def GetKeyState(self, vk): ...
    def GetMouseSpeed(self): ...
    def KeyDown(self, vk): ...
    def KeyDownChar(self, key_str): ...
    def KeyPress(self, vk): ...
    def KeyPressChar(self, key_str): ...
    def KeyPressStr(self, key_str, delay): ...
    def KeyUp(self, vk): ...
    def KeyUpChar(self, key_str): ...
    def LeftClick(self): ...
    def LeftDoubleClick(self): ...
    def LeftDown(self): ...
    def LeftUp(self): ...
    def MiddleClick(self): ...
    def MiddleDoubleClick(self): ...
    def MiddleDown(self): ...
    def MiddleUp(self): ...
    def MoveR(self, rx, ry): ...
    def MoveTo(self, x, y): ...
    def RightClick(self): ...
    def RightDown(self): ...
    def RightUp(self): ...
    def SetKeypadDelay(self, type, delay): ...
    def SetMouseDelay(self, type, delay): ...
    def SetMouseSpeed(self, speed): ...
    def SetSimMode(self, mode): ...
    def WaitKey(self, vk, time_out): ...
    def WheelDown(self): ...
    def WheelUp(self): ...
    def AppendPicAddr(self, addr): ...
    def BGR2RGB(self, bgr_color): ...
    def Capture(self, x1, y1, x2, y2, file): ...
    def CaptureGif(self, x1, y1, x2, y2, file, delay, time): ...
    def CaptureJpg(self, x1, y1, x2, y2, file, quality): ...
    def CapturePng(self, x1, y1, x2, y2, file): ...
    def CapturePre(self, file): ...
    def CmpColor(self, x, y, color, sim): ...
    def EnableDisplayDebug(self, enable_debug): ...
    def EnableFindPicMultithread(self, enable): ...
    def EnableGetColorByCapture(self, enable): ...
    def FindColor(self, x1, y1, x2, y2, color, sim, direct): ...
    def FindColorBlock(self, x1, y1, x2, y2, color, sim, count, width, height, direct): ...
    def FindColorBlockEx(self, x1, y1, x2, y2, color, sim, count, width, height, direct): ...
    def FindColorEx(self, x1, y1, x2, y2, color, sim, direct): ...
    def FindMulColor(self, x1, y1, x2, y2, color, sim): ...
    def FindMultiColor(self, x1, y1, x2, y2, first_color, offset_color, sim, direct): ...
    def FindMultiColorEx(self, x1, y1, x2, y2, first_color, offset_color, sim, direct): ...
    def FindPic(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def FindPicEx(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def FindPicExS(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def FindPicMem(self, x1, y1, x2, y2, pic_info, delta_color, sim, direct): ...
    def FindPicMemEx(self, x1, y1, x2, y2, pic_info, delta_color, sim, direct): ...
    def FindPicS(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def FindShape(self, x1, y1, x2, y2, offset_color, sim, direct): ...
    def FindShapeEx(self, x1, y1, x2, y2, offset_color, sim, direct): ...
    def FreePic(self, pic_name): ...
    def GetAveHSV(self, x1, y1, x2, y2): ...
    def GetAveRGB(self, x1, y1, x2, y2): ...
    def GetColor(self, x, y): ...
    def GetColorBGR(self, x, y): ...
    def GetColorHSV(self, x, y): ...
    def GetColorNum(self, x1, y1, x2, y2, color, sim): ...
    def GetPicSize(self, pic_name): ...
    def GetScreenData(self, x1, y1, x2, y2): ...
    def GetScreenDataBmp(self, x1, y1, x2, y2): ...
    def ImageToBmp(self, pic_name, bmp_name): ...
    def IsDisplayDead(self, x1, y1, x2, y2, t): ...
    def LoadPic(self, pic_name): ...
    def LoadPicByte(self, pic_name, data, size): ...
    def MatchPicName(self, pic_name): ...
    def RGB2BGR(self, rgb_color): ...
    def SetExcludeRegion(self, t, x1, y1, x2, y2): ...
    def SetFindPicMultithreadCount(self, count): ...
    def SetFindPicMultithreadLimit(self, limit): ...
    def SetPicPwd(self, pwd): ...
    def AddDict(self, index, dict_info): ...
    def ClearDict(self, index): ...
    def EnableShareDict(self, enbale): ...
    def FetchWord(self, x1, y1, x2, y2, color, word): ...
    def FindStr(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrE(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrEx(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrExS(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrFast(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrFastS(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrFastEx(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrFastE(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrFastExS(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrS(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrWithFont(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrWithFontE(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def FindStrWithFontEx(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def GetDict(self, index): ...
    def GetDictCount(self, index): ...
    def GetDictInfo(self, index, font_name, font_size, flag): ...
    def GetNowDict(self): ...
    def GetResultCount(self): ...
    def GetResultPos(self, index): ...
    def GetResultStr(self, index): ...
    def GetWords(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def GetWordsNoDict(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def Ocr(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def OcrEx(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def OcrExOne(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def OcrInFile(self, x1, y1, x2, y2, pic_name, color_format, sim: float = ...): ...
    def SaveDict(self, index, file): ...
    def SetColGapNoDict(self, col_gap): ...
    def SetDict(self, index, file): ...
    def SetDictMem(self, index, addr, size): ...
    def SetDictPwd(self, pwd): ...
    def SetExactOcr(self, exact_ocr): ...
    def SetMinColGap(self, col_gap): ...
    def SetMinRowGap(self, row_gap): ...
    def SetRowGapNoDict(self, row_gap): ...
    def SetWordGap(self, word_gap): ...
    def SetWordGapNoDict(self, word_gap): ...
    def SetWordLineHeight(self, line_height): ...
    def SetWordLineHeightNoDict(self, line_height): ...
    def UseDict(self, index): ...
    def __getattr__(self, name, *args, **kwargs): ...

class DataStruct:
    dm: Incomplete
    thread: str
    hwnd: str
    def __init__(self) -> None: ...
    def clear(self) -> None: ...

gl_data: DataStruct
td_data: List[DataStruct]

class Thread(threading.Thread):
    handle: str
    daemon: bool
    def __init__(self, target: callable, *args, **kwargs) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self): ...
    def resume(self): ...
