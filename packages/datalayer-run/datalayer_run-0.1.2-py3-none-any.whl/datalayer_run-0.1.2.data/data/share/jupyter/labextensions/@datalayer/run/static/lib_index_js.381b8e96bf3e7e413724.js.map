{"version":3,"file":"lib_index_js.381b8e96bf3e7e413724.js","mappings":"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","sources":["webpack://@datalayer/run/./style/base.css","webpack://@datalayer/run/./style/index.css","webpack://@datalayer/run/./lib/Run.js","webpack://@datalayer/run/./lib/index.js","webpack://@datalayer/run/./lib/jupyterlab/handler.js","webpack://@datalayer/run/./lib/jupyterlab/index.js","webpack://@datalayer/run/./lib/jupyterlab/widget.js","webpack://@datalayer/run/./lib/state/mobx.js","webpack://@datalayer/run/./lib/state/zustand.js","webpack://@datalayer/run/./lib/timer/TimerView.js","webpack://@datalayer/run/./style/index.css?f019"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: visible;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB\",\"sourcesContent\":[\"body {\\n  overflow-y: visible;\\n}\\n\\n.dla-Container {\\n  overflow-y: visible;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { ThemeProvider, BaseStyles, Box, Flash, Link } from '@primer/react';\nimport { requestAPI } from './jupyterlab/handler';\nconst DatalayerRun = (props) => {\n    const [_, setVersion] = useState('');\n    useEffect(() => {\n        requestAPI('config')\n            .then(data => {\n            setVersion(data.version);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server datalayer_run extension.\\n${reason}`);\n        });\n    }, []);\n    return (_jsx(_Fragment, { children: _jsx(ThemeProvider, { children: _jsx(BaseStyles, { children: _jsx(Box, { children: _jsxs(Flash, { children: [\"Please install \", _jsx(Link, { href: \"https://jupyter-kernels.datalayer.tech\", target: \"_blank\", children: \"Jupyter Kernels\" }), \" to use Datalayer Run.\"] }) }) }) }) }));\n};\nexport default DatalayerRun;\n","export * from \"./jupyterlab/index\";\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'datalayer_run', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { Token } from '@lumino/coreutils';\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { MainAreaWidget, ICommandPalette, WidgetTracker } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport icon from '@datalayer/icons-react/data1/DatalayerGreenPaddingIconJupyterLab';\nimport { requestAPI } from './handler';\nimport { DatalayerRunWidget } from './widget';\nimport { Timer } from \"../state/zustand\";\nimport { TimerView } from \"../timer/TimerView\";\nimport { mobxTimer, MobxTimerView } from \"../state/mobx\";\nimport '../../style/index.css';\nexport const IDatalayerRun = new Token('@datalayer/run:plugin');\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'create-datalayer-operator-widget';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the @datalayer/run extension.\n */\nconst plugin = {\n    id: '@datalayer/run:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    optional: [ISettingRegistry, ILauncher, ILayoutRestorer],\n    provides: IDatalayerRun,\n    activate: (app, palette, settingRegistry, launcher, restorer) => {\n        const { commands } = app;\n        const command = CommandIDs.create;\n        const tracker = new WidgetTracker({\n            namespace: 'datalayer-operator',\n        });\n        if (restorer) {\n            void restorer.restore(tracker, {\n                command,\n                name: () => 'datalayer-operator',\n            });\n        }\n        const jupyterRun = {\n            timer: new Timer(),\n            TimerView,\n            mobxTimer,\n            MobxTimerView,\n        };\n        commands.addCommand(command, {\n            caption: 'Show Datalayer Run',\n            label: 'Datalayer Run',\n            icon,\n            execute: () => {\n                const content = new DatalayerRunWidget(app, jupyterRun);\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = 'Datalayer Run';\n                widget.title.icon = icon;\n                app.shell.add(widget, 'main');\n                tracker.add(widget);\n            }\n        });\n        const category = 'Datalayer';\n        palette.addItem({ command, category });\n        const settingsUpdated = (settings) => {\n            const showInLauncher = settings.get('showInLauncher')\n                .composite;\n            if (launcher && showInLauncher) {\n                launcher.add({\n                    command,\n                    category,\n                    rank: 8.3\n                });\n            }\n        };\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('@datalayer/run settings loaded:', settings.composite);\n                settingsUpdated(settings);\n                settings.changed.connect(settingsUpdated);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for @datalayer/run.', reason);\n            });\n        }\n        requestAPI('config')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`Error while accessing the jupyter server datalayer_run extension.\\n${reason}`);\n        });\n        console.log('JupyterLab plugin @datalayer/run:plugin is activated.');\n        return jupyterRun;\n    }\n};\nexport default plugin;\n","import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { JupyterLabAppAdapter } from '@datalayer/jupyter-react';\nimport Run from '../Run';\nexport class DatalayerRunWidget extends ReactWidget {\n    _app;\n    //  private _jupyterRun: IDatalayerRun;\n    constructor(app, jupyterRun) {\n        super();\n        this._app = app;\n        //    this._jupyterRun = jupyterRun;\n        this.addClass('dla-Container');\n    }\n    render() {\n        return (_jsx(_Fragment, { children: _jsx(Run, { adapter: JupyterLabAppAdapter.create(this._app) }) }));\n    }\n}\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nexport class MobxTimer {\n    secondsPassed = 0;\n    constructor() {\n        makeAutoObservable(this);\n    }\n    reset() {\n        this.secondsPassed = 0;\n    }\n    increaseTimer() {\n        this.secondsPassed += 1;\n    }\n}\nexport const mobxTimer = new MobxTimer();\nsetInterval(() => {\n    mobxTimer.increaseTimer();\n}, 1000);\nexport const MobxTimerView = observer(({ mobxTimer }) => (_jsxs(\"button\", { onClick: () => mobxTimer.reset(), children: [\"Datalayer Run Mobx: \", mobxTimer.secondsPassed] })));\n","import { create } from 'zustand';\nexport class Timer {\n    _secondsPassed = 0;\n    constructor() {\n    }\n    reset() {\n        this._secondsPassed = 0;\n    }\n    increaseTimer() {\n        this._secondsPassed += 1;\n    }\n    get secondsPassed() {\n        return this._secondsPassed;\n    }\n}\nexport const useStore = create((set, get) => ({\n    tab: 0.0,\n    getIntTab: () => Math.floor(get().tab),\n    setTab: (tab) => set((state) => ({ tab })),\n    timer: new Timer(),\n    increaseTimer: () => {\n        get().timer.increaseTimer();\n        set((state) => ({ secondsPassed: get().timer.secondsPassed }));\n    },\n    secondsPassed: 0,\n}));\nexport default useStore;\n","import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport useStore from '../state/zustand';\nexport const TimerView = () => {\n    const { timer, increaseTimer, secondsPassed } = useStore();\n    useEffect(() => {\n        setInterval(() => {\n            increaseTimer();\n        }, 1000);\n    }, []);\n    return (_jsxs(\"button\", { onClick: () => timer.reset(), children: [\"Datalayer Run: \", secondsPassed] }));\n};\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}