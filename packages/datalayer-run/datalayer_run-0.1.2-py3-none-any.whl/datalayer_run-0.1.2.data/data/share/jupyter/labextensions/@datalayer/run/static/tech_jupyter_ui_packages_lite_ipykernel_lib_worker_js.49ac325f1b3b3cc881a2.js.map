{"version":3,"file":"tech_jupyter_ui_packages_lite_ipykernel_lib_worker_js.49ac325f1b3b3cc881a2.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,kCAAkC;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA,8DAA8D,oBAAoB;AAClF;AACA;AACA;AACA,qDAAqD,oBAAoB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAoD;AACpE;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA,gDAAgD;AAChD,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsources":["webpack://@datalayer/run/../../tech/jupyter/ui/packages/lite/ipykernel/lib/worker.js"],"sourcesContent":["/*\n * Copyright (c) 2022-2023 Datalayer Inc. All rights reserved.\n *\n * MIT License\n */\nexport class PyoliteRemoteKernel {\n    constructor() {\n        this._initialized = new Promise((resolve, reject) => {\n            this._initializer = { resolve, reject };\n        });\n    }\n    /**\n     * Accept the URLs from the host\n     **/\n    async initialize(options) {\n        this._options = options;\n        if (options.location.includes(':')) {\n            const parts = options.location.split(':');\n            this._driveName = parts[0];\n            this._localPath = parts[1];\n        }\n        else {\n            this._driveName = '';\n            this._localPath = options.location;\n        }\n        await this.initRuntime(options);\n        await this.initPackageManager(options);\n        await this.initKernel(options);\n        await this.initGlobals(options);\n        this._initializer?.resolve();\n    }\n    async initRuntime(options) {\n        const { pyodideUrl, indexUrl } = options;\n        if (pyodideUrl.endsWith('.mjs')) {\n            const pyodideModule = await import(/* webpackIgnore: true */ pyodideUrl);\n            this._pyodide = await pyodideModule.loadPyodide({ indexURL: indexUrl });\n        }\n        else {\n            importScripts(pyodideUrl);\n            this._pyodide = await self.loadPyodide({ indexURL: indexUrl });\n        }\n    }\n    async initPackageManager(options) {\n        if (!this._options) {\n            throw new Error('Uninitialized');\n        }\n        const { pipliteWheelUrl, disablePyPIFallback, pipliteUrls } = this._options;\n        // this is the only use of `loadPackage`, allow `piplite` to handle the rest\n        await this._pyodide.loadPackage(['micropip']);\n        // get piplite early enough to impact pyolite dependencies\n        await this._pyodide.runPythonAsync(`\n      import micropip\n      await micropip.install('${pipliteWheelUrl}', keep_going=True)\n      import piplite.piplite\n      piplite.piplite._PIPLITE_DISABLE_PYPI = ${disablePyPIFallback ? 'True' : 'False'}\n      piplite.piplite._PIPLITE_URLS = ${JSON.stringify(pipliteUrls)}\n    `);\n    }\n    async initKernel(options) {\n        // from this point forward, only use piplite\n        await this._pyodide.runPythonAsync(`\n      await piplite.install(['matplotlib', 'ipykernel'], keep_going=True);\n      await piplite.install(['pyolite'], keep_going=True);\n      await piplite.install(['ipython'], keep_going=True);\n      import pyolite\n    `);\n        // cd to the kernel location\n        if (options.mountDrive && this._localPath) {\n            await this._pyodide.runPythonAsync(`\n        import os;\n        os.chdir(\"${this._localPath}\");\n      `);\n        }\n    }\n    async initGlobals(options) {\n        const { globals } = this._pyodide;\n        this._kernel = globals.get('pyolite').kernel_instance.copy();\n        this._stdout_stream = globals.get('pyolite').stdout_stream.copy();\n        this._stderr_stream = globals.get('pyolite').stderr_stream.copy();\n        this._interpreter = this._kernel.interpreter.copy();\n        this._interpreter.send_comm = this.sendComm.bind(this);\n    }\n    /**\n     * Recursively convert a Map to a JavaScript object\n     * @param obj A Map, Array, or other  object to convert\n     */\n    mapToObject(obj) {\n        const out = obj instanceof Array ? [] : {};\n        obj.forEach((value, key) => {\n            out[key] =\n                value instanceof Map || value instanceof Array\n                    ? this.mapToObject(value)\n                    : value;\n        });\n        return out;\n    }\n    /**\n     * Format the response from the Pyodide evaluation.\n     *\n     * @param res The result object from the Pyodide evaluation\n     */\n    formatResult(res) {\n        if (!this._pyodide.isPyProxy(res)) {\n            return res;\n        }\n        // TODO: this is a bit brittle\n        const m = res.toJs();\n        const results = this.mapToObject(m);\n        return results;\n    }\n    /**\n     * Makes sure pyodide is ready before continuing, and cache the parent message.\n     */\n    async setup(parent) {\n        await this._initialized;\n        this._kernel._parent_header = this._pyodide.toPy(parent);\n    }\n    /**\n     * Execute code with the interpreter.\n     *\n     * @param content The incoming message with the code to execute.\n     */\n    async execute(content, parent) {\n        await this.setup(parent);\n        const publishExecutionResult = (prompt_count, data, metadata) => {\n            const bundle = {\n                execution_count: prompt_count,\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'execute_result',\n            });\n        };\n        const publishExecutionError = (ename, evalue, traceback) => {\n            const bundle = {\n                ename: ename,\n                evalue: evalue,\n                traceback: traceback,\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'execute_error',\n            });\n        };\n        const clearOutputCallback = (wait) => {\n            const bundle = {\n                wait: this.formatResult(wait),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'clear_output',\n            });\n        };\n        const displayDataCallback = (data, metadata, transient) => {\n            const bundle = {\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n                transient: this.formatResult(transient),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'display_data',\n            });\n        };\n        const updateDisplayDataCallback = (data, metadata, transient) => {\n            const bundle = {\n                data: this.formatResult(data),\n                metadata: this.formatResult(metadata),\n                transient: this.formatResult(transient),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'update_display_data',\n            });\n        };\n        const publishStreamCallback = (name, text) => {\n            const bundle = {\n                name: this.formatResult(name),\n                text: this.formatResult(text),\n            };\n            postMessage({\n                parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n                bundle,\n                type: 'stream',\n            });\n        };\n        this._stdout_stream.publish_stream_callback = publishStreamCallback;\n        this._stderr_stream.publish_stream_callback = publishStreamCallback;\n        this._interpreter.display_pub.clear_output_callback = clearOutputCallback;\n        this._interpreter.display_pub.display_data_callback = displayDataCallback;\n        this._interpreter.display_pub.update_display_data_callback =\n            updateDisplayDataCallback;\n        this._interpreter.displayhook.publish_execution_result = publishExecutionResult;\n        this._interpreter.input = this.input.bind(this);\n        this._interpreter.getpass = this.getpass.bind(this);\n        const res = await this._kernel.run(content.code);\n        const results = this.formatResult(res);\n        if (results['status'] === 'error') {\n            publishExecutionError(results['ename'], results['evalue'], results['traceback']);\n        }\n        return results;\n    }\n    /**\n     * Complete the code submitted by a user.\n     *\n     * @param content The incoming message with the code to complete.\n     */\n    async complete(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.complete(content.code, content.cursor_pos);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Inspect the code submitted by a user.\n     *\n     * @param content The incoming message with the code to inspect.\n     */\n    async inspect(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.inspect(content.code, content.cursor_pos, content.detail_level);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Check code for completeness submitted by a user.\n     *\n     * @param content The incoming message with the code to check.\n     */\n    async isComplete(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.is_complete(content.code);\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commInfoRequest.\n     *\n     * @param content The incoming message with the comm target name.\n     */\n    async commInfo(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_info(content.target_name);\n        const results = this.formatResult(res);\n        return {\n            comms: results,\n            status: 'ok',\n        };\n    }\n    /**\n     * Respond to the commOpen.\n     *\n     * @param content The incoming message with the comm open.\n     */\n    async commOpen(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_open(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commMsg.\n     *\n     * @param content The incoming message with the comm msg.\n     */\n    async commMsg(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_msg(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Respond to the commClose.\n     *\n     * @param content The incoming message with the comm close.\n     */\n    async commClose(content, parent) {\n        await this.setup(parent);\n        const res = this._kernel.comm_manager.comm_close(this._pyodide.toPy(content));\n        const results = this.formatResult(res);\n        return results;\n    }\n    /**\n     * Resolve the input request by getting back the reply from the main thread\n     *\n     * @param content The incoming message with the reply\n     */\n    async inputReply(content, parent) {\n        await this.setup(parent);\n        this._resolveInputReply(content);\n    }\n    /**\n     * Send a input request to the front-end.\n     *\n     * @param prompt the text to show at the prompt\n     * @param password Is the request for a password?\n     */\n    async sendInputRequest(prompt, password) {\n        const content = {\n            prompt,\n            password,\n        };\n        postMessage({\n            type: 'input_request',\n            parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n            content,\n        });\n    }\n    async getpass(prompt) {\n        prompt = typeof prompt === 'undefined' ? '' : prompt;\n        await this.sendInputRequest(prompt, true);\n        const replyPromise = new Promise((resolve) => {\n            this._resolveInputReply = resolve;\n        });\n        const result = await replyPromise;\n        return result['value'];\n    }\n    async input(prompt) {\n        prompt = typeof prompt === 'undefined' ? '' : prompt;\n        await this.sendInputRequest(prompt, false);\n        const replyPromise = new Promise((resolve) => {\n            this._resolveInputReply = resolve;\n        });\n        const result = await replyPromise;\n        return result['value'];\n    }\n    /**\n     * Send a comm message to the front-end.\n     *\n     * @param type The type of the comm message.\n     * @param content The content.\n     * @param metadata The metadata.\n     * @param ident The ident.\n     * @param buffers The binary buffers.\n     */\n    async sendComm(type, content, metadata, ident, buffers) {\n        postMessage({\n            type: type,\n            content: this.formatResult(content),\n            metadata: this.formatResult(metadata),\n            ident: this.formatResult(ident),\n            buffers: this.formatResult(buffers),\n            parentHeader: this.formatResult(this._kernel._parent_header)['header'],\n        });\n    }\n    /**\n     * Initialization options.\n     */\n    _options = null;\n    /**\n     * A promise that resolves when all initiaization is complete.\n     */\n    _initialized;\n    _initializer = null;\n    /** TODO: real typing */\n    _localPath = '';\n    _driveName = '';\n    _pyodide;\n    _kernel;\n    _interpreter;\n    _stdout_stream;\n    _stderr_stream;\n    _resolveInputReply;\n}\n"],"names":[],"sourceRoot":""}