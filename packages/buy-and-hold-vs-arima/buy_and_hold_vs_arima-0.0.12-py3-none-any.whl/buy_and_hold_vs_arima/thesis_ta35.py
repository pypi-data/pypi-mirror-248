# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Thesis.ipynb.

# %% auto 0
__all__ = ['show_all_difference', 'get_revenue_arima', 'strategy_invest']

# %% ../nbs/Thesis.ipynb 3
from .arima_stats import create_auto_arima_prediction_future_2
from .arima_stats import create_dataframe_with_series
from .arima_stats import top_score
from .arima_stats import get_top_players
from .arima_stats import create_dataframe
import buy_and_hold_vs_arima
import yfinance as yf
import pandas as pd 
import numpy as np 

# %% ../nbs/Thesis.ipynb 10
def show_all_difference(initial_price , final_price,logger=False):
    """Compare the prices via known differences"""
    if logger:
        print("Initial Price is :" , initial_price)
        print("Final Price is :" , final_price)
        print("Buy and hold overall revenue: ",final_price - initial_price) 
        print("Buy and hold relative difference " , (final_price - initial_price) / initial_price)
    return (final_price - initial_price) / initial_price

# %% ../nbs/Thesis.ipynb 13
def get_revenue_arima(func, series_data , future = 30):
    df = create_dataframe_with_series(func , series_data,future = future)
    relative_diff = show_all_difference(df['pred'].dropna().iloc[0] , df['pred'].dropna().iloc[-1])
    return df , relative_diff

# %% ../nbs/Thesis.ipynb 16
def strategy_invest(func, series_data , future = 30,start= '2017-12-31', end= '2020-10-11'):
    """
    Create a simulation that evaluate the prediction 
    func -> a function that given pd.Series create a prediction to next 30 days 
    return 
    count_invested_months -> is the number of the invested and profit month 
    total_months -> the total number of iteration of invest\not invest months
    capital -> the simulation start with 100 capital and return the last capital in the simulation 
    """
    count_invested_months , total_months = 0,0
    length_series = len(series_data)
    #change_invest_arr = pd.date_range('2017-12-31', freq="M", periods=5*12 -1) # 5 years in months
    #change_invest_arr = pd.date_range(start=series_data.index[length_series//4],end=series_data.index[-1] ,freq="M") # 5 years in months
    change_invest_arr = pd.date_range(start=start,end=end ,freq="M") # 5 years in months

    print("barak")
    capital = 100
    expected_diff_arr = []
    revenue_loss_diff_arr = []
    current_date_arr = []
    capital_arr = []
    
    for current_date,next_date in zip(change_invest_arr,change_invest_arr[1:]):
        total_months += 1
        df , relative_diff = get_revenue_arima(create_auto_arima_prediction_future_2 , series_data.loc[:current_date],future=30)
        real_relative_diff = show_all_difference(series_data.loc[current_date:].iloc[0],series_data.loc[next_date:].iloc[0])
        prev_capital = capital
        if relative_diff > 0:
            count_invested_months += 1
            capital *= (1+real_relative_diff)
        print("----------------------------------------------------------")
        print("expected relative diff : ", relative_diff)
        print("Da facto Revenue/loss " , capital - prev_capital)
        print("current date : " , current_date)
        print("current capital: " , capital)
        expected_diff_arr.append(relative_diff)
        revenue_loss_diff_arr.append(capital - prev_capital)
        current_date_arr.append(current_date)
        capital_arr.append(capital)
    return count_invested_months , total_months , expected_diff_arr , revenue_loss_diff_arr , current_date_arr , capital_arr
    
