# -*- coding: utf-8 -*-
# @File  : 通用代码.py
# @Time  : 2023/6/9 13:12
# @Author: 唐旭东

import sys,re,xlsxwriter,numpy
from loguru import logger

#老高考批次
batch_dict1 = {'本科一批A': '本科一批', '专科': '专科', '本科一批A1': '本科一批', '本科一批B': '本科一批',
                 '本科二批A': '本科二批', '本科二批B': '本科二批', '本科二批C': '本科二批', '高本贯通批': '专科',
                 '本科提前A': '本科一批', '本科提前批A': '本科一批', '本科提前批B': '本科一批', '本科提前B': '本科一批',
                 '本科一批': '本科一批', '蒙授本科一批': '本科一批', '本科二批': '本科二批', '蒙授本科二批': '本科二批',
                 '专科提前': '专科', '专科提前批': '专科', '蒙授本科提前A': '本科一批', '蒙授本科提前批A': '本科一批',
                 '蒙授专科': '专科', '蒙授本科提前B': '本科一批', '蒙授本科提前批B': '本科一批', '蒙授专科提前': '专科',
                 '蒙授专科提前批': '专科', '国家专项': '本科一批', '本科提前批': '本科一批', '提前批': '本科一批',
                 '地方专项': '本科一批', '提前批公安专科': '专科', '公安专科院校': '专科', '提前本科二批': '本科二批',
                 '提前本科一批': '本科一批', '专项计划批': '本科一批', '本科提前批其他类': '本科一批',
                 '本科一批预科': '本科一批', '本科二批预科B类': '本科二批', '本科二批预科A类': '本科二批',
                 '专科提前批定向类': '专科', '专科提前批其他类': '专科', '本科提前批空军招飞批': '本科一批',
                 '本科二批预科B': '本科二批', '专项计划': '本科一批', '本科二批预科A': '本科二批',
                 '本科一批高校专项': '本科一批', '本科二批预科': '本科二批', '本科提前批预科': '本科一批',
                 '本科提前批高校专项': '本科一批', '一类模式本科二批预科': '本科二批', '一类模式专科预科': '专科',
                 '专科预科': '专科', '一类模式本科一批预科': '本科一批', '帮扶专项': '本科一批',
                 '提前本科批': '本科一批', '一本预科': '本科一批', '二本及预科': '本科二批', '提前专项批': '本科二批',
                 '提前专科批': '专科', '专项提前批': '本科二批', '高职专项': '专科',
                 '本科提前批B段(国家专项)': '本科一批', '本科提前批少数民族紧缺人才专项（G段）': '本科一批',
                 '本科提前批地方专项（D段）': '本科一批', '本科提前批省属院校贫困地区国家专项（C段）': '本科一批',
                 '本科提前批精准扶贫专项（E段）': '本科一批', '本科提前批革命老区专项（F段）': '本科一批',
                 '提前批一本': '本科二批', '提前批二本': '本科二批', '提前二批专科': '本科二批',
                 '本科一批(普通类)': '本科一批', '本科二批(普通类)': '本科二批', '专科批(普通类)': '专科批(普通类)',
                 '本科一批(单列类-选考外语)': '本科一批', '本科二批(单列类-选考外语)': '本科二批',
                 '本科一批(单列类-选考民族语文)': '本科一批', '本科二批(单列类-选考民族语文)': '本科二批',
                 '专科批(单列类-选考外语)': '专科', '专科批(单列类-选考民族语文)': '专科',
                 '【内高】18级单列本科二批（四年）': '本科二批', '【内高】19级单列本科二批': '本科二批',
                 '本科二批单列': '本科二批', '【内高】18级单列本科一批': '本科一批',
                 '【内高】18级单列本科一批（四年）': '本科一批', '【内高】18级普通本科一批': '本科一批',
                 '【内高】19级单列本科一批': '本科一批', '【内高】19级普通本科一批': '本科一批', '本科一批单列': '本科一批',
                 '【内高】18级单列专科': '专科', '【内高】18级单列专科（四年）': '专科', '【内高】18级普通专科': '专科',
                 '【内高】19级单列专科': '专科', '【内高】19级普通专科': '专科', '专科单列': '专科',
                 '【内高】18级单列本科二批': '本科二批', '【内高】18级普通本科二批': '本科二批',
                 '【内高】19级普通本科二批': '本科二批', '【内高】18级单列本科提前批': '本科一批',
                 '【内高】18级普通本科提前批': '本科一批', '【内高】19级单列本科提前批': '本科一批',
                 '【内高】19级普通本科提前批': '本科一批', '【内高】18级单列本科提前批（四年）': '本科一批'}

#新高考批次
batch_dict2 = {'bk': '本科', 'zk': '专科', '本科': '本科', '专科': '专科', '本科提前批A': '特殊类型招生控制线', '本科提前批B': '特殊类型招生控制线', '本科提前B': '特殊类型招生控制线',
                 '专科提前': '专科', '专科提前批': '专科', '蒙授本科提前A': '特殊类型招生控制线', '蒙授本科提前批A': '特殊类型招生控制线',
                 '蒙授专科': '专科', '蒙授本科提前B': '特殊类型招生控制线', '蒙授本科提前批B': '特殊类型招生控制线', '蒙授专科提前': '专科',
                 '蒙授专科提前批': '专科', '国家专项': '特殊类型招生控制线', '本科提前批': '特殊类型招生控制线', '提前批': '特殊类型招生控制线',
                 '地方专项': '特殊类型招生控制线', '提前批公安专科': '专科', '公安专科院校': '专科','专项计划批': '特殊类型招生控制线', '本科提前批其他类': '特殊类型招生控制线',
                 '专科提前批定向类': '专科', '专科提前批其他类': '专科', '本科提前批空军招飞批': '特殊类型招生控制线', '专项计划': '特殊类型招生控制线','本科提前批预科': '特殊类型招生控制线',
                 '本科提前批高校专项': '特殊类型招生控制线', '一类模式专科预科': '专科','专科预科': '专科', '帮扶专项': '特殊类型招生控制线',
                 '提前本科批': '特殊类型招生控制线', '提前专科批': '专科', '高职专项': '专科','本科提前批B段(国家专项)': '特殊类型招生控制线', '本科提前批少数民族紧缺人才专项（G段）': '特殊类型招生控制线',
                 '本科提前批地方专项（D段）': '特殊类型招生控制线', '本科提前批省属院校贫困地区国家专项（C段）': '特殊类型招生控制线',
                 '本科提前批精准扶贫专项（E段）': '特殊类型招生控制线', '本科提前批革命老区专项（F段）': '特殊类型招生控制线'}

#返回省市区名称和地区编号
def prurar_code(gkle='all',ssq=None):
    prurar_code={"北京": 11, "天津": 12, "河北": 13, "山西": 14, "内蒙古": 15, "辽宁": 21, "吉林": 22, "黑龙江": 23,
           "上海": 31, "江苏": 32, "浙江": 33, "安徽": 34, "福建": 35, "江西": 36, "山东": 37, "河南": 41, "湖北": 42,
           "湖南": 43, "广东": 44, "广西": 45, "海南": 46, "重庆": 50, "四川": 51, "贵州": 52, "云南": 53,
           "陕西": 61, "甘肃": 62, "宁夏": 64, "新疆": 65}
    if ssq:
        return prurar_code[ssq]
    if gkle=='专业类省份':
        return {"河北": 13, "辽宁": 21,"浙江": 33,"山东": 37,"重庆": 50}
    if gkle=='专业组省份':
        return {"广东": 44, "福建": 35,"湖南": 43,"海南": 46,"江苏": 32,"湖北": 42,"天津": 12,"北京": 11,"上海": 31}
    if gkle=='新高考省份':
        return {"河北": 13, "辽宁": 21,"浙江": 33,"山东": 37,"重庆": 50,"广东": 44, "福建": 35,"湖南": 43,"海南": 46,"江苏": 32,"湖北": 42,"天津": 12,"北京": 11,"上海": 31}
    if gkle=='老高考省份':
        return {"江西": 36, "山西": 14, "内蒙古": 15, "吉林": 22, "黑龙江": 23, "安徽": 34, "河南": 41, "广西": 45, "四川": 51, "贵州": 52, "云南": 53,"陕西": 61, "甘肃": 62, "宁夏": 64, "新疆": 65}
    return prurar_code

#转换批次名称
def convert_pc(pc,prurar=None):
    if prurar:
        new_pc = batch_dict1.get(pc) if prurar in prurar_code('老高考省份') else batch_dict2.get(pc)
        if new_pc:
            return new_pc
    if '本科' in pc and '提前' in pc:
        return '本科提前批'
    elif '专科' in pc and '提前' in pc:
        return '专科提前批'
    elif '本科' in pc or 'bk' in pc or '一段' in pc:
        return '本科'
    elif '专科' in pc or 'zk' in pc or '二段' in pc:
        return '专科'
    else:
        return '特殊类'

#转换科类名称
def convert_kl(kl):
    if 'li' in kl or '物理' in kl or '理' in kl:
        return '理工'
    elif 'wen' in kl or '历史' in kl or '文' in kl:
        return '文史'
    elif 'all' in kl or '综合' in kl:
        return '综合'
    else:
        return kl

#删除了数据中判断为Flase(判断0的返回值为Flase)的数据
def delete_flase_empty(ls):
    nls=[]
    for l in ls:
        type_l=type(l)
        if type_l!=int and type_l!=float and l:
            logger.error(f"数据集中存在非数字类型数据！\n{ls}")
            sys.exit()
        if l and not numpy.isnan(l):
            nls.append(l)
    return nls

#求平均数默认保留小数
def txdavg(ls,zero_in=False,dp=2,valid=True):
    """
    :param zero_in 0是否参与计算，默认不参与
    :param dp 默认保留2位小数
    :param valid 默认保留有效小数位
    """
    ls_0=[]
    if zero_in:
        ls_0 = [l for l in ls if l==0]
    ls = delete_flase_empty(ls)+ls_0
    if ls:
        if valid:
            return prvadepl(round(sum(ls)/len(ls), dp))
        return round(sum(ls) / len(ls), dp)
    else:
        return None

#求百分比平均数默认保留百分比中两位小数
def txdpercavg(ls,dp=2):
    nls=[]
    for l in ls:
        if l is None:
            continue
        if type(l)==str:
            if re.search('^([0-9.]+%)$',l):
                nls.append(float(l[:-1])/100)
            else:
                logger.error(f'计算平均百分比时，发现存在非百分比数据\n{ls}')
                sys.exit()
    ls = delete_flase_empty(nls)
    if ls:
        return txdperc(sum(ls)/len(ls), dp)
    else:
        return None

#求最小数
def txdmin(ls):
    ls = delete_flase_empty(ls)
    if ls:
        return min(ls)
    else:
        return None

#将数字转换为百分比，默认百分比中数字保留两位小数
def txdperc(num,dp=2):
    return f'{round(num * 100, dp)}%'

class QueryScoreRank:
    """
    查询分数位次，省份批次线
    """
    def __init__(self,year,mysql,simplify_pcname=True):
        """
        :param year:年份
        :param mysql:mysql连接对象
        :param simplify_pcname:将批次转换为只有本专科
        """
        self.year=year
        self.mysql=mysql
        self.mysql.custom_sql("""UPDATE `bk_batch_xian` set batch='本科' WHERE batch='本科批';""")
        self.mysql.custom_sql("""UPDATE `bk_batch_xian` set batch='本科一批' WHERE batch='本科一批(普通类)';""")
        self.mysql.custom_sql("""UPDATE `bk_batch_xian` set batch='本科二批' WHERE batch='本科二批(普通类)';""")
        self.mysql.custom_sql("""UPDATE `bk_batch_xian` set batch='专科' WHERE batch='专科批' or batch='专科批(普通类)' or batch='专科批(普通类)';""")
        self.simplify_pcname=simplify_pcname
        self.batch_xian_dict={}
        self.frac_rank_dict={'江苏':{},'other':{}}
        self.get_batch_xian()#获取当前年份所有省份所有科类批次线生成字典数据
        self.get_frac_rank()#获取当前年份所有省份所有科类所有批次分数排名生成字典数据

    def get_batch_xian(self):
        """
        获取当前年份所有省份所有科类批次线生成字典数据
        """
        batch_xians = self.mysql.select(
                f"""SELECT region_name,kelei_name,batch,batch_fen FROM `bk_batch_xian` WHERE `year` = '{self.year}'""")
        if self.simplify_pcname:
            # 将批次转换为只有本专科
            for batch_xian in batch_xians:
                pc = '专科' if '专科' in convert_pc(batch_xian[2]) else '本科'
                key = f'{batch_xian[0]}_{pc}_{convert_kl(batch_xian[1])}'
                if key in self.batch_xian_dict:
                    if self.batch_xian_dict[key] - batch_xian[-1] > 0:
                        self.batch_xian_dict[key] = batch_xian[-1]
                else:
                    self.batch_xian_dict[key] = batch_xian[-1]
        else:
            for batchds in batch_xians:
                self.batch_xian_dict[f"{batchds[0]}_{batchds[2]}_{batchds[1]}"]=int(batchds[-1])
                self.batch_xian_dict[f"{batchds[0]}_{batchds[2]}_{batchds[1]}"]=int(batchds[-1])

    def get_frac_rank(self):
        """
        获取当前年份所有省份所有科类所有批次分数排名生成字典数据
        """
        frac_ranks = self.mysql.select(
            f"""SELECT region_name,kelei_name,tag,gaokaofen,paim FROM `bk_fenpai_show` WHERE `year` = '{self.year}'""")
        for frac_rank in frac_ranks:
            if frac_rank[0] in '江苏':
                key = f'{frac_rank[0]}_{convert_kl(frac_rank[1])}_{"本科" if "第一阶段" in frac_rank[2] else "专科"}'
                if key in self.frac_rank_dict['江苏']:
                    self.frac_rank_dict['江苏'][key][0].append(frac_rank[-2])
                    self.frac_rank_dict['江苏'][key][1].append(frac_rank[-1])
                else:
                    self.frac_rank_dict['江苏'].update({key: [[frac_rank[-2]], [frac_rank[-1]]]})
            else:
                key=f'{frac_rank[0]}_{convert_kl(frac_rank[1])}'
                if key in self.frac_rank_dict['other']:
                    self.frac_rank_dict['other'][key][0].append(frac_rank[-2])
                    self.frac_rank_dict['other'][key][1].append(frac_rank[-1])
                else:
                    self.frac_rank_dict['other'].update({key:[[frac_rank[-2]],[frac_rank[-1]]]})

    #返回分数位次和位次百分比
    def rfrac_rank(self,prurar,pc,kl,frac,isrrp=False):
        """
        :param prurar:省市区名称
        :param pc:批次
        :param kl:科类
        :param frac:要查询位次的分数
        :param isrrp:是否返回位次百分比
        :return 分数位次，（批次线，批次线位次，分数位次百分比）
        """
        if not frac:
            if isrrp:
                return None,(None,None,None)
            return None

        frac_rank=self.rfrac_rank1(prurar, pc, kl, frac)
        if isrrp:
            batch_xian,batch_xian_rank=self.rbx_rank(prurar,pc,kl)
            return frac_rank,(batch_xian,batch_xian_rank,txdperc(frac_rank/batch_xian_rank))
        else:
            return frac_rank

    #返回批次线和批次线位次
    def rbx_rank(self,prurar,pc,kl,rbxr=True):
        """
        :param prurar:省市区
        :param pc:批次
        :param kl:科类
        :param rbxr:是否返回位次
        :return:返回批次线和批次线位次
        """
        pc=batch_dict1.get(pc) if prurar in prurar_code('老高考省份') else batch_dict2.get(pc)
        if f'{prurar}_{pc}_{kl}' in self.batch_xian_dict:
            key = f'{prurar}_{pc}_{kl}'
        elif f'{prurar}_{"专科" if "专科" in pc else "本科"}_{kl}' in self.batch_xian_dict:
            key = f'{prurar}_{"专科" if "专科" in pc else "本科"}_{kl}'
        else:
            key = None
        if key:
            batch_xian = self.batch_xian_dict[key]
            if rbxr:
                batch_xian_rank = self.rfrac_rank1(prurar, pc, kl, batch_xian)
                return batch_xian, batch_xian_rank
            return batch_xian

    #返回分数位次
    def rfrac_rank1(self,prurar,pc,kl,frac):

        """
        :param prurar:省市区
        :param pc:批次
        :param kl:科类
        :param frac:分数
        :return:返回分数对应位次
        """
        if prurar in '江苏':
            fens=self.frac_rank_dict['江苏'][f'{prurar}_{kl}_{"专科" if "专科" in pc else "本科"}'][0]
            paims=self.frac_rank_dict['江苏'][f'{prurar}_{kl}_{"专科" if "专科" in pc else "本科"}'][1]
        else:
            fens=self.frac_rank_dict['other'][f'{prurar}_{kl}'][0]
            paims=self.frac_rank_dict['other'][f'{prurar}_{kl}'][1]
        return paims[fens.index(min(fens, key=lambda x: abs(float(x) - float(frac))))]

    #返回位次对应分数
    def rfrac_rank2(self,prurar,pc,kl,ranking):
        """
        :param prurar:省市区
        :param pc:批次
        :param kl:科类
        :param ranking:分数
        :return:返回位次对应分数
        """
        if prurar in '江苏':
            fens=self.frac_rank_dict['江苏'][f'{prurar}_{kl}_{"专科" if "专科" in pc else "本科"}'][0]
            paims=self.frac_rank_dict['江苏'][f'{prurar}_{kl}_{"专科" if "专科" in pc else "本科"}'][1]
        else:
            fens=self.frac_rank_dict['other'][f'{prurar}_{kl}'][0]
            paims=self.frac_rank_dict['other'][f'{prurar}_{kl}'][1]
        return fens[paims.index(min(paims, key=lambda x: abs(float(x) - float(ranking))))]


def timer(func):
    import time
    def wrapper(*args, **kwargs):
        start_time = time.time()
        logger.info("开始时间：{}".format(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(start_time))))
        result = func(*args, **kwargs)
        end_time = time.time()
        logger.info('共耗时：%f秒' % (time.time() - start_time))
        logger.info("结束时间：{}".format(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(end_time))))
        return result
    return wrapper

#提取专业名称中招生标签
def exenla(major,maispb=False):
    """
    :param major:专业名称
    :param maispb:是否查找匹配标签
    :return: 专业名称中的标签
    """
    bqs={'招生标签':set([v for v in
              ['联合培养', '中外合作', '校企合作', '国家专项', '高职本科', '地方专项', '高校专项', '联合办学',
               '精准扶贫',
               '少数民族', '民族班', '少民', '闽台', '优师', '公费', '订单', '双语', '定向', '预科'] if
              v in major]),
    '匹配标签': set([v for v in
                       [] if
                       v in major])
     }
    return bqs if maispb else bqs['招生标签']

#获取表头中字段名称索引，表头以列表形式传入
def getexcelth(rowdatas0,ht):
    """
    :param rowdatas0:表头以列表形式传入
    :param ht:表头中字段名称
    :return: 字段索引
    """
    for i,v in enumerate(rowdatas0):
        if ht == v:
            return i
    if '科类' == ht:
        ht='文\理科'
    for i,v in enumerate(rowdatas0):
        if ht == v:
            return i
    if '招生标签' == ht:
        ht='招生类型'
    for i,v in enumerate(rowdatas0):
        if ht in v:
            return i
    ht='专业名称' if ht=='业名称' else ht
    ht='招生标签' if ht=='招生类型' else ht
    ht='科类' if ht=='文\理科' else ht
    raise ValueError(f'表头中未找到“{ht}”相关字段名称，可以将“{ht}”字段添加至表中或将相应字段修改为“{ht}”')

#保留有效的小数位
def prvadepl(num):
    if type(num)==float or type(num)==numpy.float64:
        num = str(num).rstrip('0').rstrip('.')
        if '.' in num:
            num = float(num)
        else:
            num = int(num)
    return num

#读取execl数据
def read_excel(file_path,sheet_index=0):
    """
    :param file_path:文件路径或路径下第一个文件
    :param sheet_index:工作表索引默认第一个
    return:表格数据
    """
    if not file_path.endswith('.xlsx'):
        file_paths=file_ls(file_path)
        for path in file_paths:
            if path.endswith('.xlsx'):
                file_path=path
                break
    datas = []
    import xlrd
    # 打开Excel文件并获取工作表
    workbook = xlrd.open_workbook(file_path)
    worksheet = workbook.sheet_by_index(sheet_index)
    # 遍历每一行数据
    for i in range(worksheet.nrows):
        datas.append([prvadepl(v) if type(v)==float else v for v in worksheet.row_values(i)])
    return datas


#查找文件夹下所有文件路径及文件名称
def file_ls(path,isrfp=False):
    """
    :param path:文件夹路径
    :param isrfp:是否返回文件名，默认为False,只返回文件路径，True返回文件名称
    """
    from natsort import ns, natsorted
    import os
    file_list = os.listdir(path)
    file_list = natsorted(file_list, alg=ns.PATH)
    if isrfp:
        return [(file, os.path.join(path, file)) for file in file_list]
    return [(os.path.join(path, file)) for file in file_list]


#提取专业名称中专业名称和括号部分内容，根据需要返回一级大类和二级大类
class ExtractEnrollmentLabels:
    def __init__(self):
        self.major_dict={'本科':[],'职业本科':[],'专科':[]}
        self.rmyr()

    def exmana(self,major,pici,school_name,is_fhye=False):
        """
        :param major:专业名称
        :param pici:批次
        :param school_name:学校名称，学校名称中有“职业”关键字优先在职业本科查找专业名称信息
        :param is_fhye:是否返回一级大类和二级大类，默认False
        :return:专业名称，一级大类、二级大类和括号部分内容（可选）
        """
        major_xinxi=[re.search('([\u4E00-\u9FA5、]+)',major).group(1),'','','']
        major=re.search('.*?([\u4E00-\u9FA5]+.*)',major).group(1)
        if '本科' in pici:
            if '职业' not in school_name:
                for l in self.major_dict['本科']+self.major_dict['职业本科']:
                    if major.startswith(l[0]):
                        major_xinxi=l+[major.lstrip(l[0])]
                        break
            else:
                for l in self.major_dict['职业本科']+self.major_dict['本科']:
                    if major.startswith(l[0]):
                        major_xinxi=l+[major.lstrip(l[0])]
                        break
        else:
            for l in self.major_dict['专科']:
                if major.startswith(l[0]):
                    major_xinxi = l+[major.lstrip(l[0])]
                    break
        if is_fhye:
            return major_xinxi
        return major_xinxi[0]

    #读取文件中的专业名称一级大类和小类（本科专业、职业本科专业、专科专业）
    def rmyr(self):
        for l in read_excel('../附件文件或文档/专业逻辑代码、一级大类和二级大类.xlsx')[1:]:
            self.major_dict['本科'].append([l[1],l[5],l[3]])
        for l in read_excel('../附件文件或文档/专业逻辑代码、一级大类和二级大类.xlsx', 1)[1:]:
            self.major_dict['职业本科'].append([l[1],l[6],l[3]])
        for l in read_excel('../附件文件或文档/专业逻辑代码、一级大类和二级大类.xlsx', 2)[1:]:
            self.major_dict['专科'].append([l[1],l[5],l[3]])
        self.major_dict['本科']=self.sortedstrlen(self.major_dict['本科'])
        self.major_dict['职业本科']=self.sortedstrlen(self.major_dict['职业本科'])
        self.major_dict['专科']=self.sortedstrlen(self.major_dict['专科'])

    # 将列表中字符串长度由大到小排序 [['apple', 'orange', 'banana'], ['pear', 'grape', 'pineapple', 'kiwi']]这种以每个列表中第一个字符串长度排序
    def sortedstrlen(self,items):
        def sort_by_first_item_length(sublist):
            return len(sublist[0])
        sorted_items = sorted(items, key=sort_by_first_item_length, reverse=True)
        return sorted_items

#对列表中的多个列表以第某个元素进行排序
def sortedlbys(lists,i,reverse=False):
    """
    :param lists:数据列表
    :param i:一维数据中基准索引
    :param reverse:排序方式，默认False，有小到大
    :return:排序后的数据列表
    """
    sorted_lists = sorted(lists, key=lambda x: x[i], reverse=True)
    return sorted_lists

xxgm_dict = {"北大方正软件技术学院":"北京北大方正软件职业技术学院","天津中德职业技术学院":"天津中德应用技术大学","天津体育学院运动与文化艺术学院":"天津传媒学院","天津大学仁爱学院":"天津仁爱学院","天津职业大学":"天津市职业大学","天津冶金职业技术学院":"天津工业职业学院","中国人民武装警察部队学院":"中国人民警察大学","中国地质大学长城学院":"保定理工学院","北京交通大学海滨学院":"沧州交通学院","河北外国语职业学院":"河北对外经贸职业学院","石家庄科技工程职业学院":"河北正定师范高等专科学校","泊头职业学院":"沧州幼儿师范高等专科学校","河北地质职工大学":"河北资源环境职业技术学院","太原理工大学现代科技学院":"山西工学院","山西农业大学信息学院":"晋中信息学院","中北大学信息商务学院":"山西晋中理工学院","太原科技大学华科学院":"山西科技学院","运城职业技术学院":"运城职业技术大学","山西财政税务专科学校":"山西省财政税务专科学校","山西轻工职业技术学院":"山西铁道职业技术学院","大同大学大同师范分校":"大同师范高等专科学校","山西职工医学院":"山西卫生健康职业学院","内蒙古科技大学包头钢铁学院":"内蒙古科技大学","内蒙古师范大学鸿德学院":"内蒙古鸿德文理学院","辽宁理工职业学院":"辽宁理工职业大学","吉林华桥外国语学院":"吉林外国语大学","长春理工大学光电信息学院":"长春电子科技学院","吉林建筑大学城建学院":"吉林建筑科技学院","东北师范大学人文学院":"长春人文学院","哈尔滨江南职业技术学院":"哈尔滨城市职业学院","黑龙江职业技术学院":"哈尔滨北方航空职业技术学院","上海电力学院":"上海电力大学","上海公安高等专科学校":"上海公安学院","上海立达职业技术学院":"上海立达学院","上海中侨职业技术学院":"上海中侨职业技术大学","上海市虹口区业余大学":"上海南湖职业技术学院","南京工业职业技术学院":"南京工业职业技术大学","淮海工学院":"江苏海洋大学","江南大学太湖学院":"无锡太湖学院","中国传媒大学南广学院":"南京传媒学院","南京信息工程大学滨江学院":"无锡学院","苏州大学文正学院":"苏州城市学院","苏州高等幼儿师范学校":"苏州幼儿师范高等专科学校","徐州建筑职业技术学院":"江苏建筑职业技术学院","南通纺织职业技术学院":"江苏工程职业技术学院","苏州市职业大学":"苏州职业大学","盐城卫生职业技术学院":"江苏医药职业学院","南通航运职业技术学院":"江苏航运职业技术学院","淮安信息职业技术学院":"江苏电子信息职业学院","江苏畜牧兽医职业技术学院":"江苏农牧科技职业学院","南京化工职业技术学院":"南京科技职业学院","常州轻工职业技术学院":"常州工业职业技术学院","江苏食品职业技术学院":"江苏食品药品职业技术学院","宁波大红鹰学院":"宁波财经学院","浙江大学城市学院":"浙大城市学院","浙江大学宁波理工学院":"浙大宁波理工学院","浙江广厦建设职业技术学院":"浙江广厦建设职业技术大学","湖州师范学院求真学院":"湖州学院","温州大学瓯江学院":"温州理工学院","嘉兴学院南湖学院":"嘉兴南湖学院","温州大学城市学院":"温州商学院","浙江医药高等专科学校":"浙江药科职业大学","湖州职业技术学院安吉分院":"浙江宇翔职业技术学院","宁波教育学院":"宁波幼儿师范高等专科学校","阜阳师范学院":"阜阳师范大学","安徽财经大学商学院":"蚌埠工商学院","安徽工业大学工商学院":"马鞍山学院","安徽建筑大学城市建设学院":"合肥城市学院","安徽农业大学经济技术学院":"合肥经济学院","阜阳师范学院信息工程学院":"阜阳师范大学信息工程学院","淮北师范大学信息学院":"淮北理工学院","河海大学文天学院":"皖江工学院","安徽大学艺术与传媒学院":"安徽艺术学院","万博科技职业学院":"民办万博科技职业学院","安徽人口职业学院":"安徽卫生健康职业学院","泉州理工职业学院":"泉州职业技术大学","福建师范大学闽南科技学院":"闽南科技学院","福建农林大学东方学院":"福州工商学院","福建师范大学福清分校":"福建技术师范学院","南昌职业学院":"南昌职业大学","华东交通大学理工学院":"南昌交通学院","东华理工大学长江学院":"赣东学院","江西理工大学应用科学学院":"赣南科技学院","景德镇陶瓷大学科技艺术学院":"景德镇艺术职业大学","江西中医药大学科技学院":"南昌医学院","江西科技师范大学理工学院":"南昌应用技术师范学院","江西先锋软件职业技术学院":"江西软件职业技术大学","东华理工大学行知分院":"抚州幼儿师范高等专科学校","泰山医学院":"山东第一医科大学","山东凯文科技职业学院":"山东工程职业技术大学","烟台大学文经学院":"烟台理工学院","青岛理工大学琴岛学院":"青岛城市学院","山东师范大学历山学院":"潍坊理工学院","中国石油大学胜利学院":"山东石油化工学院","山东外国语职业学院":"山东外国语职业技术大学","山东科技大学泰山科技学院":"泰山科技学院","山东外事翻译职业学院":"山东外事职业大学","济南大学泉城学院":"烟台科技学院","北京电影学院现代创意媒体学院":"青岛电影学院","济南铁道职业技术学院":"山东职业学院","日照航海技术学校":"日照航海工程职业学院","鲁东大学初等教育学院":"烟台幼儿师范高等专科学校","烟台工贸技师学院":"烟台文化旅游职业学院","郑州轻工业学院":"郑州轻工业大学","河南大学民生学院":"河南开封科技传媒学院","河南师范大学新联学院":"中原科技学院","河南科技学院新科学院":"新乡工程学院","中原工学院信息商务学院":"郑州经贸学院","郑州成功财经学院":"郑州商学院","周口科技职业学院":"河南科技职业大学","郑州大学西亚斯国际学院":"郑州西亚斯学院","平顶山教育学院":"平顶山职业技术学院","湖北民族学院":"湖北民族大学","武汉科技大学城市学院":"武汉城市学院","江汉大学文理学院":"武汉文理学院","长江大学工程技术学院":"荆州学院","湖北民族大学科技学院":"湖北恩施学院","十堰职业技术学院":"湖北工业职业技术学院","鄂东职业技术学院":"湖北黄冈应急管理职业技术学院","湖南商学院":"湖南工商大学","湖南工商大学北津学院":"湘潭理工学院","湖南软件职业学院":"湖南软件职业技术大学","广东技术师范学院":"广东技术师范大学","华南理工大学广州学院":"广州城市理工学院","广州大学华软软件学院":"广州软件学院","中山大学南方学院":"广州南方学院","广东财经大学华商学院":"广州华商学院","广东海洋大学寸金学院":"湛江科技学院","广东技术师范大学天河学院":"广州理工学院","广东工业大学华立学院":"广州华立学院","广州大学松田学院":"广州应用科技学院","吉林大学珠海学院":"珠海科技学院","广州科技职业技术学院":"广州科技职业技术大学","广东工商职业学院":"广东工商职业技术大学","东莞理工学院城市学院":"东莞城市学院","中山大学新华学院":"广州新华学院","广州医科大学卫生职业技术学院":"广州卫生职业技术学院","广西师范学院":"南宁师范大学","钦州学院":"北部湾大学","广西科技大学鹿山学院":"柳州工学院","广西师范大学漓江学院":"桂林学院","广西师范学院师园学院":"南宁师范大学师园学院","桂林电子科技大学信息科技学院":"桂林信息科技学院","桂林理工大学博文管理学院":"南宁理工学院","广西城市职业学院":"广西城市职业大学","广西经济管理干部学院":"广西职业师范学院","海南科技职业学院":"海南科技职业大学","重庆机电职业技术学院":"重庆机电职业技术大学","重庆大学城市科技学院":"重庆城市科技学院","四川外国语大学重庆南方翻译学院":"重庆外语外事学院","重庆师范大学涉外商贸学院":"重庆对外经贸学院","重庆工商大学融智学院":"重庆财经学院","重庆邮电大学移通学院":"重庆移通学院","重庆信息学院":"重庆移通学院","重庆房地产职业学院":"重庆建筑科技职业学院","重庆服装工程职业学院":"重庆科技职业学院","重庆科技工程专修学院":"重庆健康职业学院","重庆职工会计专科学校":"重庆工信职业学院","四川理工学院":"四川轻化工大学","成都学院":"成都大学","成都艺术职业学院":"成都艺术职业大学","成都信息工程大学银杏酒店管理学院":"成都银杏酒店管理学院","四川大学锦城学院":"成都锦城学院","西南科技大学城市学院":"绵阳城市学院","北京吉利学院":"吉利学院","四川管理职业学院":"四川铁道职业学院","西南交通大学科技学院":"江阳城建职业学院","四川民族职业学院":"阿坝职业学院","四川核工业职工大学":"广元中核职业技术学院","四川省运动技术学院":"四川体育职业学院","遵义医学院":"遵义医科大学","贵阳中医学院":"贵州中医药大学","贵州警官职业学院":"贵州警察学院","贵阳中医学院时珍学院":"贵州中医药大学时珍学院","贵州财经大学商务学院":"贵州黔南经济学院","贵州大学科技学院":"贵州黔南科技学院","贵州大学明德学院":"贵阳信息科技学院","贵州民族大学人文科技学院":"贵阳人文科技学院","遵义医学院医学与科技学院":"遵义医科大学医学与科技学院","贵州健康管理职业技术学院":"贵州健康职业学院","云南中医学院":"云南中医药大学","云南大学旅游文化学院":"丽江文化旅游学院","云南师范大学商学院":"昆明城市学院","云南师范大学文理学院":"昆明文理学院","西藏藏医学院":"西藏藏医药大学","西安财经学院":"西安财经大学","西安财经学院行知学院":"西安财经大学行知学院","西安工业大学北方信息工程学院":"西安工商学院","西安汽车科技职业学院":"西安汽车职业大学","西北工业大学明德学院":"西安明德理工学院","陕西电子科技职业学院":"西安信息职业大学","西安东方亚太职业技术学院":"西安健康工程职业学院","榆林北大职业培训学校":"榆林能源科技职业学院","陕西中北专修学院":"宝鸡中北职业学院","甘肃政法学院":"甘肃政法大学","兰州财经大学陇桥学院":"兰州工商学院","兰州交通大学博文学院":"兰州博文科技学院","兰州理工大学技术工程学院":"兰州信息科技学院","兰州航空工业职工大学":"兰州航空职业技术学院","青海畜牧兽医职业技术学院":"青海农牧科技职业学院","中国矿业大学银川学院":"银川科技学院","宁夏司法警官职业学院":"宁夏警官职业学院","伊犁师范学院":"伊犁师范大学","新疆大学科学技术学院":"新疆理工学院","新疆医科大学厚博学院":"新疆第二医学院","新疆财经大学商务学院":"新疆科技学院","新疆天山职业技术学院":"新疆天山职业技术大学","新疆科信学院":"新疆科信职业技术学院","复旦大学上海医学院":"复旦大学医学院","中国人民解放军军械工程学院":"陆军工程大学","第三军医大学":"陆军军医大学","第二军医大学":"海军航空大学","第四军医大学":"空军军医大学","公安海警学院":"武警海警学院","山东大学(威海)":"山东大学威海分校","北京交通大学(威海)":"北京交通大学(威海校区)","厦门大学马来西亚分校":"厦门大学(马来西亚分校)","河北中医学院":"河北中医药大学","上海体育学院":"上海体育大学","福建工程学院":"福建理工大学","信阳师范学院":"信阳师范大学","郑州轻工业大学(易斯顿美术学院)":"郑州美术学院","深圳职业技术学院":"深圳职业技术大学"}
zkzygm_dict = {"本科":{},"专科":{"作物生产技术":"作物生产与经营管理","茶树栽培与茶叶加工":"茶叶生产与加工技术","中草药栽培技术":"中草药栽培与加工技术","烟草栽培与加工":"烟草栽培与加工技术","食用菌生产与加工":"食用菌生产与加工技术","农业装备应用技术":"现代农业装备应用技术","绿色食品生产与检验":"绿色食品生产技术","休闲农业":"休闲农业经营与管理","农业经济管理":"现代农业经济管理","畜牧业经济管理":"现代农业经济管理","渔业经济管理":"现代农业经济管理","农村经营管理":"农村新型经济组织管理","森林资源保护":"森林和草原资源保护","野生植物资源保护与利用":"野生动植物资源保护与利用","野生动物资源保护与利用":"野生动植物资源保护与利用","自然保护区建设与管理":"自然保护地建设与管理","森林生态旅游":"森林生态旅游与康养","林业调查与信息处理":"林业信息技术应用","林业信息技术与管理":"林业信息技术应用","木工设备应用技术":"木业智能装备应用技术","木材加工技术":"木业产品设计与制造","动物医学":"动物医学","动物医学检验技术":"动物医学","宠物临床诊疗技术":"宠物医疗技术","畜牧工程技术":"畜禽智能化养殖","实验动物技术":"特种动物养殖技术","特种动物养殖":"特种动物养殖技术","养蜂与蜂产品加工":"特种动物养殖技术","饲料与动物营养":"动物营养与饲料","矿产地质与勘查":"矿产地质勘查","煤田地质与勘查技术":"煤田地质勘查","钻探技术":"钻探工程技术","测绘工程技术":"测绘工程技术","测绘与地质工程技术":"测绘工程技术","地籍测绘与土地管理":"地籍测绘与土地管理","权籍信息化管理":"地籍测绘与土地管理","国土测绘与规划":"国土空间规划与测绘","地图制图与数字传播技术":"空间数字建模与应用技术","油气开采技术":"油气智能开采技术","煤矿开采技术":"煤矿智能开采技术","综合机械化采煤":"煤矿智能开采技术","矿井建设":"矿井建设工程技术","矿井通风与安全":"通风技术与安全管理","矿山机电技术":"矿山机电与智能装备","矿井运输与提升":"矿山机电与智能装备","选煤技术":"煤炭清洁利用技术","煤炭深加工与利用":"煤炭清洁利用技术","煤化分析与检验":"煤炭清洁利用技术","金属与非金属矿开采技术":"矿山智能开采技术","矿业装备维护技术":"矿山智能开采技术","防雷技术":"雷电防护技术","环境监测与控制技术":"环境监测技术","室内环境检测与控制技术":"环境监测技术","农村环境保护":"生态保护技术","环境信息技术":"生态环境大数据技术","环境规划与管理":"环境管理与评价","环境评价与咨询服务":"环境管理与评价","污染修复与生态工程技术":"生态环境修复技术","清洁生产与减排技术":"绿色低碳技术","资源综合利用与管理技术":"资源综合利用技术","安全生产监测监控":"安全智能监测技术","救援技术":"应急救援技术","森林防火指挥与通讯":"森林草原防火技术","安全健康与环保":"职业健康安全技术","职业卫生技术与管理":"职业健康安全技术","水电站与电力网":"水电站与电力网技术","分布式发电与微电网技术":"分布式发电与智能微电网技术","电力系统继电保护与自动化技术":"电力系统继电保护技术","高压输配电线路施工运行与维护":"输配电工程技术","电厂热能动力装置":"热能动力工程技术","火电厂集控运行":"发电运行技术","电厂热工自动化技术":"热工自动化技术","光伏发电技术与应用":"光伏工程技术","光伏工程技术":"光伏工程技术","风力发电工程技术":"风力发电工程技术","风电系统运行与维护":"风力发电工程技术","生物质能应用技术":"生物质能应用技术","农村能源与环境技术":"生物质能应用技术","黑色冶金技术":"钢铁智能冶金技术","轧钢工程技术":"智能轧钢技术","钢铁冶金设备应用技术":"钢铁冶金设备维护","金属材料质量检测":"金属材料检测技术","铁矿资源综合利用":"金属材料检测技术","有色冶金技术":"有色金属智能冶金技术","有色冶金设备应用技术":"有色金属智能冶金技术","金属压力加工":"金属智能加工技术","高分子材料工程技术":"高分子材料智能制造技术","高分子材料加工技术":"高分子材料智能制造技术","复合材料工程技术":"复合材料智能制造技术","炭素加工技术":"炭材料工程技术","橡胶工程技术":"橡胶智能制造技术","建筑材料工程技术":"建筑材料工程技术","建筑材料生产与管理":"建筑材料工程技术","建筑动画与模型制作":"建筑动画技术","城市信息化管理":"智慧城市管理技术","消防工程技术":"建筑消防技术","建设工程管理":"建设工程管理","建设项目信息化管理":"建设工程管理","建筑经济管理":"建筑经济信息化管理","环境卫生工程技术":"城市环境工程技术","房地产检测与估价":"房地产智能检测与估价","物业管理":"现代物业管理","水文与水资源工程":"水文与水资源技术","水利水电工程管理":"水利水电工程智能管理","港口航道与治河工程":"治河与航道工程技术","水务管理":"智能水务管理","水电站动力设备":"水电站设备安装与管理","水电站运行与管理":"水电站运行与智能管理","水利机电设备运行与管理":"水利机电设备智能管理","水环境监测与治理":"水环境智能监测与治理","机械制造与自动化":"机械制造及自动化","精密机械技术":"机械制造及自动化","材料成型与控制技术":"材料成型及控制技术","金属材料与热处理技术":"材料成型及控制技术","铸造技术":"现代铸造技术","锻压技术":"现代锻压技术","焊接技术与自动化":"智能焊接技术","光电制造与应用技术":"智能光电制造技术","内燃机制造与维修":"内燃机制造与应用技术","机械产品检测检验技术":"工业产品质量检测技术","自动化生产设备应用":"智能制造装备技术","数控设备应用与维护":"智能制造装备技术","机电设备安装技术":"机电设备技术","机电设备维修与管理":"机电设备技术","工业自动化仪表":"工业自动化仪表技术","铁道通信信号设备制造与维护":"轨道交通通信信号设备制造与维护","铁道施工和养路机械制造与维护":"轨道交通工程机械制造与维护","船舶机械工程技术":"船舶动力工程技术","船舶动力工程技术":"船舶动力工程技术","船舶通信与导航":"船舶通信装备技术","海洋工程技术":"海洋工程装备技术","飞行器制造技术":"飞行器数字化制造技术","航空发动机装试技术":"航空发动机装配调试技术","飞机机载设备制造技术":"飞机机载设备装配调试技术","飞机机载设备维修技术":"飞机机载设备装配调试技术","航空电子电气技术":"飞机机载设备装配调试技术","导弹维修":"导弹维修技术","汽车制造与装配技术":"汽车制造与试验技术","汽车检测与维修技术":"汽车制造与试验技术","汽车试验技术":"汽车制造与试验技术","汽车造型技术":"汽车造型与改装技术","汽车改装技术":"汽车造型与改装技术","工业分析技术":"分析检验技术","商检技术":"分析检验技术","制浆造纸技术":"现代造纸技术","陶瓷制造工艺":"陶瓷制造技术与工艺","香料香精工艺":"香料香精技术与工艺","数字图文信息技术":"印刷数字图文技术","印刷媒体设计与制作":"印刷数字图文技术","染整技术":"数字化染整技术","家用纺织品设计":"现代家用纺织品设计","食品加工技术":"食品智能加工技术","食品营养与卫生":"食品营养与健康","食品检测技术":"食品检验检测技术","食品营养与检测":"食品检验检测技术","药品经营与管理":"药品经营与管理","药品服务与管理":"药品经营与管理","医疗设备应用技术":"智能医疗装备技术","精密医疗器械技术":"医用电子仪器技术","医疗器械经营与管理":"医疗器械经营与服务","保健品开发与管理":"保健食品质量与管理","粮食工程技术":"粮食工程技术与管理","粮油储藏与检测技术":"粮食储运与质量安全","高速铁道工程技术":"高速铁路施工与维护","铁路桥梁与隧道工程技术":"铁道桥梁隧道工程技术","铁道机械化维修技术":"铁道养路机械应用技术","铁道机车":"铁道机车运用与维护","铁道车辆":"铁道车辆技术","高铁综合维修技术":"高速铁路综合维修技术","高速铁路客运乘务":"高速铁路客运服务","道路桥梁工程技术":"道路与桥梁工程技术","公路机械化施工技术":"道路机械化施工技术","工程机械运用技术":"智能工程机械运用技术","智能交通技术运用":"智能交通技术","道路运输与路政管理":"道路运输管理","交通运营管理":"交通运营管理","交通枢纽运营管理":"交通运营管理","汽车营销与服务":"汽车技术服务与营销","汽车运用与维修技术":"汽车检测与维修技术","汽车车身维修技术":"汽车检测与维修技术","汽车运用安全管理":"汽车检测与维修技术","新能源汽车运用与维修":"新能源汽车检测与维修技术","水路运输与海事管理":"水路运输安全管理","港口机械与自动控制":"港口机械与智能控制","港口电气技术":"港口机械与智能控制","民航运输":"民航运输服务","机场运行":"机场运行服务与管理","城市轨道交通车辆技术":"城市轨道车辆应用技术","快递运营管理":"邮政快递运营管理","应用电子技术":"应用电子技术","声像工程技术":"应用电子技术","电子制造技术与设备":"电子产品制造技术","电子工艺与管理":"电子产品制造技术","电子产品质量检测":"电子产品检测技术","电子测量技术与仪器":"电子产品检测技术","智能产品开发":"智能产品开发与应用","智能终端技术与应用":"智能产品开发与应用","智能监控技术应用":"智能产品开发与应用","光电技术应用":"智能光电技术应用","软件技术":"软件技术","软件与信息服务":"软件技术","电子商务技术":"软件技术","数字展示技术":"数字媒体技术","数字媒体应用技术":"数字媒体技术","计算机信息管理":"大数据技术","大数据技术与应用":"大数据技术","云计算技术与应用":"云计算技术应用","信息安全与管理":"信息安全技术应用","虚拟现实应用技术":"虚拟现实技术应用","人工智能技术服务":"人工智能技术应用","嵌入式技术与应用":"嵌入式技术应用","工业网络技术":"工业互联网技术","通信技术":"现代通信技术","光通信技术":"现代通信技术","移动通信技术":"现代移动通信技术","物联网工程技术":"智能互联网络技术","集成电路技术应用":"集成电路技术","中药生产与加工":"中药材生产与加工","中药制药技术":"中药制药","康复辅助器具技术":"康复辅助器具技术","假肢与矫形器技术":"康复辅助器具技术","公共卫生管理":"公共卫生管理","卫生监督":"公共卫生管理","幼儿发展与健康管理":"婴幼儿托育服务与管理","生殖健康服务与管理":"生殖健康管理","财政":"财税大数据应用","税务":"财税大数据应用","金融管理":"金融服务与管理","物流金融管理":"金融服务与管理","互联网金融":"金融科技应用","保险":"保险实务","投资与理财":"财富管理","证券与期货":"证券实务","财务管理":"大数据与财务管理","会计":"大数据与会计","审计":"大数据与审计","信息统计与分析":"统计与大数据分析","国际贸易实务":"国际经济与贸易","国际经济与贸易":"国际经济与贸易","报关与国际货运":"关务与外贸服务","连锁经营管理":"连锁经营与管理","网络营销":"网络营销与直播电商","物流管理":"现代物流管理","航空物流":"航空物流管理","物流信息技术":"智能物流技术","旅行社经营管理":"旅行社经营与管理","酒店管理":"酒店管理与数字化运营","葡萄酒营销与服务":"葡萄酒文化与营销","茶艺与茶叶营销":"茶艺与茶文化","景区开发与管理":"智慧景区开发与管理","餐饮管理":"餐饮智能管理","烹调工艺与营养":"烹饪工艺与营养","西餐工艺":"西式烹饪工艺","视觉传播设计与制作":"视觉传达设计","美术":"书画艺术","游戏设计":"游戏艺术设计","广告设计与制作":"广告艺术设计","服装表演":"时尚表演与传播","模特与礼仪":"时尚表演与传播","舞台艺术设计与制作":"舞台艺术设计与制作","影视美术":"舞台艺术设计与制作","民族服装与服饰":"民族服装与饰品","文化市场经营管理":"文化产业经营与管理","少数民族古籍修复":"文物修复与保护","文物修复与保护":"文物修复与保护","考古探掘技术":"文物考古技术","文物博物馆服务与管理":"文物展示利用技术","图文信息处理":"数字图文信息处理技术","版面编辑与校对":"出版策划与编辑","出版与电脑编辑技术":"出版策划与编辑","数字媒体设备管理":"数字媒体设备应用与管理","广播电视技术":"数字广播电视技术","广告策划与营销":"全媒体广告策划与营销","媒体营销":"全媒体广告策划与营销","语文教育":"小学语文教育","数学教育":"小学数学教育","英语教育":"小学英语教育","物理教育":"小学科学教育","化学教育":"小学科学教育","生物教育":"小学科学教育","地理教育":"小学科学教育","科学教育":"小学科学教育","思想政治教育":"小学道德与法治教育","汉语":"中文","交通管理":"道路交通管理","警察指挥与战术":"警务指挥与战术","信息网络安全监察":"网络安全与执法","国内安全保卫":"政治安全保卫","司法助理":"法律事务","法律事务":"法律事务","民政管理":"民政服务与管理","家政服务与管理":"现代家政服务与管理","老年服务与管理":"智慧健康养老服务与管理","文秘":"现代文秘","文秘速录":"现代文秘"}}['专科']  # 只处理专科

#更换院校名称
def replsona(school_name):
    if school_name in xxgm_dict:
        return optstr(xxgm_dict[school_name])
    return optstr(school_name)

#更换专业名称
def replmjna(major,batch):
    major_name=re.search('([\u4E00-\u9FA5]+)',major).group(1)
    if '专科' in batch:
        if major_name in zkzygm_dict:
            return optstr(major.replace(major_name,zkzygm_dict[major_name],1))
    return optstr(major)

#删除字符串首尾看不见的字符，将中文括号改为英文括号，以及其他符号的替换
def optstr(values):
    def format_str(s):
        s=s.strip().strip('.').strip('。')
        return s.replace('（', '(').replace('）', ')').replace('\t', '').replace('\n', '').replace(r'\n', '').replace('\r','').replace(' ', '').\
            replace('，', ',').replace('：', ':').replace('；', ';').replace('\xa0', ' ').replace('★', ' ').replace('☆',' ').replace('▲', ' ').\
            replace('」', ']').replace('「', '[')
    if type(values)==str:
        return format_str(values)
    else:
        return eval(format_str(str(values)))

def get_ms_name(s):
    """
    获取专业或院校名称
    """
    name=re.search('([\u4e00-\u9fa5]+)',optstr(s))
    if name:
        return name.group(1)

def get_code_name(s):
    """
    提取院校代码和名称或专业代码和名称
    """
    code = re.search('(^[0-9A-Za-z]+)', optstr(s)).group(1)
    name = optstr(s.lstrip(code))
    return [code,name]

def is_school(string):
    """
    判断是否为学校名称
    """
    re_string=re.search('([\u4e00-\u9fa5]+)',optstr(string))
    if re_string:
        re_string=re_string.group(1)
        if re_string.endswith('大学') or re_string.endswith('学院') or re_string.endswith('学校') or re_string.endswith('分校'):
            return True
    return False

def gen_excel(data:list,save_path,header=None):
    """
    :param data:列表数据
    :param save_path:保存excel路径
    :param header:表头
    """
    if header:
        data.insert(0,header)
    workbook = xlsxwriter.Workbook(save_path)
    sheet = workbook.add_worksheet()
    for row_num, row_data in enumerate(data):
        for col_num, col_value in enumerate(row_data):
            sheet.write(row_num, col_num, optstr(str(col_value) if col_value else col_value))
    workbook.close()