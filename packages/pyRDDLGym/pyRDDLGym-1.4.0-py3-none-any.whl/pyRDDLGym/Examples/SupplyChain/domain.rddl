////////////////////////////////////////////////////////////////////
// A supply chain control problem in which the goal is to manage
// the inventory levels at multiple warehouses. Items can be produced
// at a factory location and then shipped to a network of warehouses
// to meet demand. Demand is a nonstationary function that depends
// on time and contains stochastic shocks, i.e. for warehouse i at time t:
//
// 		demand(i,t) = floor[D/2 * sin[2 pi (t + 2i) / 12] + D/2 + e(i,t)]
//
// where D is an upper level of demand, and e(i, t) is a Bernoulli(0.5)
// random variable.
//
// References:
//
//		Kemmer, L., von Kleist, H., de RochebouÃ«t, D., Tziortziotis, 
//		N., & Read, J. (2018, October). Reinforcement learning for supply 
//		chain optimization. In European Workshop on Reinforcement Learning 
//		(Vol. 14, No. 10).
//  	
// Author(s):
// 		Mike Gimelfarb (mgimelfarb@yahoo.ca)
//
////////////////////////////////////////////////////////////////////
domain supply_chain {

	types {
		warehouse : object;
	};
	
	pvariables { 
    	
		// Constants
		PI                                  : { non-fluent, real, default = 3.14159265 };
		
		PRICE 								: { non-fluent, real, default = 1.0 };
		PRODUCTION-COST 					: { non-fluent, real, default = 0.2 };
		PENALTY-COST 						: { non-fluent, real, default = 0.1 };
		TRUCK-COST(warehouse) 				: { non-fluent, real, default = 0.06 };
		STORAGE-COST-FACTORY 				: { non-fluent, real, default = 0.05 };
		STORAGE-COST-WAREHOUSE(warehouse) 	: { non-fluent, real, default = 0.05 };
		
		CAPACITY-FACTORY					: { non-fluent, int, default = 20 };
		CAPACITY-WAREHOUSE(warehouse)		: { non-fluent, int, default = 20 };
		TRUCK-CAPACITY(warehouse) 			: { non-fluent, int, default = 5 };
		PRODUCE-MAX							: { non-fluent, int, default = 15 };
		
		MAX-DEMAND 							: { non-fluent, int, default = 20 };
		INDEX(warehouse)					: { non-fluent, int, default = 0 };
		
    	// Action
		produce 							: { action-fluent, int, default = 0 };
		ship(warehouse) 					: { action-fluent, int, default = 0 };

		// State
		epoch								: { state-fluent, int, default = 0 };
		demand-old(warehouse) 				: { state-fluent, int, default = 0 };
		demand-new(warehouse) 				: { state-fluent, int, default = 0 };
		stock-factory 						: { state-fluent, int, default = 0 };
		stock-warehouse(warehouse) 			: { state-fluent, int, default = 0 };
	};
	
	cpfs {
		
		// Update new demand -- periodic with stochastic shocks
		demand-old'(?w) = demand-new(?w);
		demand-new'(?w) = min[floor[ (MAX-DEMAND / 2) * sin[ 2 * PI * (epoch + 2 * INDEX(?w)) / 12 ] 
									+ (MAX-DEMAND / 2) + Bernoulli( 0.5 ) ], MAX-DEMAND];
		
		// Update factory stock
		stock-factory' = max[min[stock-factory + produce - (sum_{?w : warehouse} ship(?w)), 
								 CAPACITY-FACTORY], 0];
		
		// Update warehouse stock
		stock-warehouse'(?w) = min[stock-warehouse(?w) + ship(?w) - demand-new'(?w), CAPACITY-WAREHOUSE(?w)];
		
		// Time advances
		epoch' = epoch + 1;
	};
  
	// revenue from sales, minus production cost, storage cost, penalty cost, and shipping cost
	reward = (sum_{?w : warehouse} [ PRICE * demand-new'(?w) ])
				- (PRODUCTION-COST * produce)
				- (STORAGE-COST-FACTORY * max[stock-factory, 0])
				- (sum_{?w : warehouse} [ STORAGE-COST-WAREHOUSE(?w) * max[stock-warehouse(?w), 0] ])
				+ (sum_{?w : warehouse} [ PENALTY-COST * min[stock-warehouse(?w), 0] ])
				- (sum_{?w : warehouse} [ TRUCK-COST(?w) * ceil[ ship(?w) / TRUCK-CAPACITY(?w) ] ]);
	
	state-invariants {
		
		// Old demand within bounds
		forall_{?w : warehouse} [ demand-old(?w) >= 0 ];
		forall_{?w : warehouse} [ demand-old(?w) <= MAX-DEMAND ];
		
		// New demand within bounds
		forall_{?w : warehouse} [ demand-new(?w) >= 0 ];
		forall_{?w : warehouse} [ demand-new(?w) <= MAX-DEMAND ];
		
		// Time is positive
		epoch >= 0;
		
		// Factory stock within capacity
		stock-factory >= 0;
		stock-factory <= CAPACITY-FACTORY;	

		// Warehouse stocks within capacity
		forall_{?w : warehouse} [ stock-warehouse(?w) <= CAPACITY-WAREHOUSE(?w) ];
	};
	
	action-preconditions {

		// Production amounts within bounds 
		produce >= 0;
		produce <= PRODUCE-MAX;		
		
		// Shipping amounts within bounds
		forall_{?w : warehouse} [ ship(?w) >= 0 ];
		( sum_{?w : warehouse} ship(?w) ) <= stock-factory;
	};
	
}