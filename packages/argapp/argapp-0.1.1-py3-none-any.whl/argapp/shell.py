'''
Wrapper for the module subprocess, aimed for simple scripts.
Provides sh() to execute commands in the default shell.
'''

__all__ = [
    'ShellResult',
    'ShellError',
    'sh_mode_log',
    'sh_mode_cap',
    'sh_mode_tee',
    'sh_mode_sub',
    'sh',
]


from subprocess import Popen, PIPE, STDOUT
from typing import Callable

from .log import logi, logt


class ShellResult:
    '''
    Execution result. Generated by calling sh().
    '''

    cmd: 'str' = ...
    '''
    Command that was executed.
    '''

    out: 'str' = ...
    '''
    Command's output (stdout + stderr).
    '''

    code: 'int' = ...
    '''
    Command's return code.
    '''

    def __init__(self, cmd) -> 'None':
        self.cmd = cmd
        self.out = ''
        self.code = 0


class ShellError(Exception):
    '''
    Raised by sh().
    '''

    result: 'ShellResult' = ...
    '''
    ShellResult that would have been normally returned by sh().
    '''

    def __init__(self, result: 'ShellResult') -> 'None':
        super().__init__()
        self.result = result

    def __str__(self) -> str:
        r = f'Command failed with code {self.result.code}:\n{self.result.cmd}'
        if self.result.out:
            r += f'\n\nOutput:\n{self.result.out}'
        return r


def sh_mode_log(proc: 'Popen', result: 'ShellResult') -> 'None':
    '''
    Value of parameter mode for sh().
    Output of cmd will be printed using log.logi().
    '''
    for x in iter(proc.stdout.readline, ''):
        logi(str(x).strip('\n'))


def sh_mode_cap(proc: 'Popen', result: 'ShellResult') -> 'None':
    '''
    Value of parameter mode for sh().
    Output of cmd will be appended to ShellResult.out.
    '''
    for x in iter(proc.stdout.readline, ''):
        result.out += str(x)


def sh_mode_tee(proc: 'Popen', result: 'ShellResult') -> 'None':
    '''
    Value of parameter mode for sh().
    Combination of sh_mode_log and sh_mode_cap.
    '''
    for x in iter(proc.stdout.readline, ''):
        result.out += str(x)
        logi(str(x).strip('\n'))


def sh_mode_sub(proc: 'Popen', result: 'ShellResult') -> 'None':
    '''
    Value of parameter mode for sh().
    Special mode for sub-shells or when cmd is interactive (e.g. ssh).
    Output of cmd is not intercepted and printed "as is".
    '''
    return


@logt
def sh(
    cmd: 'str',
    check: 'bool' = True,
    mode: 'Callable[[Popen, ShellResult], None]' = sh_mode_sub,
) -> 'ShellResult':
    '''
    Execute a command using /bin/bash.

    Parameters:
     * cmd   - command to execute.
     * check - whether to raise ShellError if cmd fails.
     * mode  - determines how to handle the output of cmd.
               Must be set to one of sh_mode_* values.

    Raises:
     * ShellError, if check is True and cmd failed.

    Return:
     * ShellResult.
    '''
    args = [f'shopt -s expand_aliases; {cmd}']
    kwargs = {
        'shell': True,
        'universal_newlines': True,
        'executable': '/bin/bash',
    }
    if mode != sh_mode_sub:
        kwargs['stdout'] = PIPE
        kwargs['stderr'] = STDOUT
    result = ShellResult(cmd)
    proc = Popen(*args, **kwargs)
    mode(proc, result)
    result.code = proc.wait()
    if check and result.code != 0:
        raise ShellError(result)
    return result
