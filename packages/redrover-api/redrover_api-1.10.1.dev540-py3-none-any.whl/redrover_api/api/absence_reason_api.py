"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.  # Authentication The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.  This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.  Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.  # API Information ## Api Key Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.  You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.  ## Identifier Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from redrover_api.api_client import ApiClient, Endpoint as _Endpoint
from redrover_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from redrover_api.model.absence_reason_response import AbsenceReasonResponse


class AbsenceReasonApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_absence_reason_endpoint = _Endpoint(
            settings={
                'response_type': (AbsenceReasonResponse,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/AbsenceReason/{identifier}',
                'operation_id': 'get_absence_reason',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'identifier',
                ],
                'required': [
                    'org_id',
                    'identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (int,),
                    'identifier':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'orgId',
                    'identifier': 'identifier',
                },
                'location_map': {
                    'org_id': 'path',
                    'identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_absence_reasons_endpoint = _Endpoint(
            settings={
                'response_type': ([AbsenceReasonResponse],),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/AbsenceReason',
                'operation_id': 'get_absence_reasons',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'identifiers',
                ],
                'required': [
                    'org_id',
                    'identifiers',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (int,),
                    'identifiers':
                        ([str],),
                },
                'attribute_map': {
                    'org_id': 'orgId',
                    'identifiers': 'identifiers',
                },
                'location_map': {
                    'org_id': 'path',
                    'identifiers': 'query',
                },
                'collection_format_map': {
                    'identifiers': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_absence_reason(
        self,
        org_id,
        identifier,
        **kwargs
    ):
        """Get Absence Reason  # noqa: E501

        Get a specific Absence Reason by it's identifier  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_absence_reason(org_id, identifier, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (int): The Red Rover Id of the Organization
            identifier (str): The identifier of the AbsenceReason. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AbsenceReasonResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['identifier'] = \
            identifier
        return self.get_absence_reason_endpoint.call_with_http_info(**kwargs)

    def get_absence_reasons(
        self,
        org_id,
        identifiers,
        **kwargs
    ):
        """Get list of Absence Reasons  # noqa: E501

        Get a list of AbsenceReasons by their identifiers. Must use consistent Ids types (only Red Rover Ids, or ExternalIds).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_absence_reasons(org_id, identifiers, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (int): The Red Rover Id of the Organization
            identifiers ([str]): The identifier of the AbsenceReasons. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [AbsenceReasonResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['identifiers'] = \
            identifiers
        return self.get_absence_reasons_endpoint.call_with_http_info(**kwargs)

