"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.  # Authentication The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.  This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.  Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.  # API Information ## Api Key Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.  You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.  ## Identifier Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from redrover_api.api_client import ApiClient, Endpoint as _Endpoint
from redrover_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from redrover_api.model.file_format import FileFormat
from redrover_api.model.forbid_result import ForbidResult


class ConnectionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.download_report_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/Connection/{id}/download',
                'operation_id': 'download_report',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'org_id',
                    'file_format',
                    'include_headers',
                    'now_utc',
                    'request_body',
                ],
                'required': [
                    'id',
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'org_id':
                        (str,),
                    'file_format':
                        (FileFormat,),
                    'include_headers':
                        (bool,),
                    'now_utc':
                        (datetime,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'org_id': 'orgId',
                    'file_format': 'fileFormat',
                    'include_headers': 'includeHeaders',
                    'now_utc': 'nowUtc',
                },
                'location_map': {
                    'id': 'path',
                    'org_id': 'path',
                    'file_format': 'query',
                    'include_headers': 'query',
                    'now_utc': 'query',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.download_report_0_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/Connection/{id}/download',
                'operation_id': 'download_report_0',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'org_id',
                    'file_format',
                    'include_headers',
                    'now_utc',
                    'request_body',
                ],
                'required': [
                    'id',
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'org_id':
                        (str,),
                    'file_format':
                        (FileFormat,),
                    'include_headers':
                        (bool,),
                    'now_utc':
                        (datetime,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'org_id': 'orgId',
                    'file_format': 'fileFormat',
                    'include_headers': 'includeHeaders',
                    'now_utc': 'nowUtc',
                },
                'location_map': {
                    'id': 'path',
                    'org_id': 'path',
                    'file_format': 'query',
                    'include_headers': 'query',
                    'now_utc': 'query',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_report_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/Connection/{id}/data',
                'operation_id': 'post_report_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'pascal_case',
                    'org_id',
                    'accept',
                    'now_utc',
                    'request_body',
                ],
                'required': [
                    'id',
                    'pascal_case',
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'pascal_case':
                        (bool,),
                    'org_id':
                        (str,),
                    'accept':
                        (str,),
                    'now_utc':
                        (datetime,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'pascal_case': 'pascalCase',
                    'org_id': 'orgId',
                    'accept': 'accept',
                    'now_utc': 'nowUtc',
                },
                'location_map': {
                    'id': 'path',
                    'pascal_case': 'query',
                    'org_id': 'path',
                    'accept': 'header',
                    'now_utc': 'query',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.run_report_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'basic'
                ],
                'endpoint_path': '/api/v1/{orgId}/Connection/{id}/run',
                'operation_id': 'run_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'org_id',
                    'now_utc',
                    'request_body',
                ],
                'required': [
                    'id',
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'org_id':
                        (str,),
                    'now_utc':
                        (datetime,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'id': 'id',
                    'org_id': 'orgId',
                    'now_utc': 'nowUtc',
                },
                'location_map': {
                    'id': 'path',
                    'org_id': 'path',
                    'now_utc': 'query',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def download_report(
        self,
        id,
        org_id,
        **kwargs
    ):
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report(id, org_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            org_id (str):

        Keyword Args:
            file_format (FileFormat): File format type. (Delimited, Flat). [optional]
            include_headers (bool): Whether to include headers on the report. [optional]
            now_utc (datetime): [optional]
            request_body ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['org_id'] = \
            org_id
        return self.download_report_endpoint.call_with_http_info(**kwargs)

    def download_report_0(
        self,
        id,
        org_id,
        **kwargs
    ):
        """Download Report  # noqa: E501

        Download an existing report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_report_0(id, org_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            org_id (str):

        Keyword Args:
            file_format (FileFormat): File format type. (Delimited, Flat). [optional]
            include_headers (bool): Whether to include headers on the report. [optional]
            now_utc (datetime): [optional]
            request_body ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['org_id'] = \
            org_id
        return self.download_report_0_endpoint.call_with_http_info(**kwargs)

    def post_report_data(
        self,
        id,
        org_id,
        pascal_case=False,
        **kwargs
    ):
        """Posts Report  # noqa: E501

        Supply the date filter as the request body in the following JSON string array format.  (The content type for the body should be “application/json”.) For e.g. (`[\"Date BETWEEN '2020-07-01' AND '2020-07-30'\"]`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_report_data(id, org_id, pascal_case=False, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            org_id (str):
            pascal_case (bool): Pascal Case results. defaults to False, must be one of [False]

        Keyword Args:
            accept (str): [optional] if omitted the server will use the default value of "application/json"
            now_utc (datetime): The 'now' date. [optional]
            request_body ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['pascal_case'] = \
            pascal_case
        kwargs['org_id'] = \
            org_id
        return self.post_report_data_endpoint.call_with_http_info(**kwargs)

    def run_report(
        self,
        id,
        org_id,
        **kwargs
    ):
        """Run Report  # noqa: E501

        Run a report and receive a file download  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_report(id, org_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The Id of the Report that will be run
            org_id (str):

        Keyword Args:
            now_utc (datetime): [optional]
            request_body ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['org_id'] = \
            org_id
        return self.run_report_endpoint.call_with_http_info(**kwargs)

