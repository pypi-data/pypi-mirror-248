from typing import List
import db
import ghidra.program.model.address
import ghidra.util.database
import java.lang
import java.nio


class DBCachedObjectStoreFactory(object):





    class StringDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: unicode, __a1: db.StringField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EnumDBByteFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: java.lang.Enum, __a1: db.ByteField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class AbstractDBFieldCodec(object, ghidra.util.database.DBCachedObjectStoreFactory.DBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.Class, __a2: java.lang.Class, __a3: java.lang.reflect.Field, __a4: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def fieldType(self) -> java.lang.Class: ...

        @property
        def objectType(self) -> java.lang.Class: ...

        @property
        def valueType(self) -> java.lang.Class: ...




    class ByteDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: int, __a1: db.ByteField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RecAddress(java.lang.Record):




        def __init__(self, __a0: int, __a1: long): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromAddress(__a0: ghidra.program.model.address.Address) -> ghidra.util.database.DBCachedObjectStoreFactory.RecAddress: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def offset(self) -> long: ...

        def spaceId(self) -> int: ...

        def toAddress(self, __a0: ghidra.program.model.address.AddressFactory) -> ghidra.program.model.address.Address: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ShortDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: int, __a1: db.ShortField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ByteArrayDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: List[int], __a1: db.BinaryField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DBFieldCodec(object):








        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def fieldType(self) -> java.lang.Class: ...

        @property
        def objectType(self) -> java.lang.Class: ...

        @property
        def valueType(self) -> java.lang.Class: ...




    class IntDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: int, __a1: db.IntField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class VariantDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.BinaryField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class PrimitiveCodec(object):
        ADDRESS: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$3@6cb7c409
        BOOL: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@619fa32d
        BOOL_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@798d640b
        BYTE: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@7d2fe85c
        BYTE_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$2@295bce47
        CHAR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@2bcc3c88
        CHAR_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@744da0ad
        CODECS_BY_CLASS: java.util.Map = {<type '[C'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@744da0ad, <type 'java.lang.Integer'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@79092274, <type '[J'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@670d6834, <type 'java.lang.Long'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@5d61383f, <type 'java.lang.Boolean'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@619fa32d, <type 'ghidra.util.database.DBCachedObjectStoreFactory$RecRange'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$4@4036cb8e, <type '[Z'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@798d640b, <type 'ghidra.util.database.DBCachedObjectStoreFactory$RecAddress'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$3@6cb7c409, <type 'java.lang.String'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$1@71d1eb2a, <type '[S'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@37e65adf, <type 'java.lang.Short'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@17036e2b, <type '[I'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@197b588a, <type 'java.lang.Byte'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@7d2fe85c, <type '[Ljava.lang.String;'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayObjectCodec@61cbe97e, <type '[B'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$2@295bce47, <type 'java.lang.Character'>: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@2bcc3c88}
        CODECS_BY_SELECTOR: java.util.Map = {0: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@619fa32d, 1: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@7d2fe85c, 2: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@2bcc3c88, 3: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@17036e2b, 4: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@79092274, 5: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@5d61383f, 6: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$1@71d1eb2a, 7: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@798d640b, 8: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$2@295bce47, 9: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@744da0ad, 10: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@37e65adf, 11: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@197b588a, 12: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@670d6834, 14: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayObjectCodec@61cbe97e, 15: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$3@6cb7c409, 16: ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$4@4036cb8e}
        INT: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@79092274
        INT_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@197b588a
        LONG: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@5d61383f
        LONG_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@670d6834
        RANGE: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$4@4036cb8e
        SHORT: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$SimplePrimitiveCodec@17036e2b
        SHORT_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayPrimitiveCodec@37e65adf
        STRING: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$1@71d1eb2a
        STRING_ARR: ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec = ghidra.util.database.DBCachedObjectStoreFactory$PrimitiveCodec$ArrayObjectCodec@61cbe97e







        def decode(self, __a0: java.nio.ByteBuffer) -> object: ...

        def encode(self, __a0: java.nio.ByteBuffer, __a1: object) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @overload
        @staticmethod
        def getCodec(__a0: int) -> ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec: ...

        @overload
        @staticmethod
        def getCodec(__a0: java.lang.Class) -> ghidra.util.database.DBCachedObjectStoreFactory.PrimitiveCodec: ...

        def getSelector(self) -> int: ...

        def getValueClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def selector(self) -> int: ...

        @property
        def valueClass(self) -> java.lang.Class: ...




    class BooleanDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: bool, __a1: db.BooleanField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class LongDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def doLoad(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def doStore(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: long, __a1: db.LongField) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class LongArrayDBFieldCodec(ghidra.util.database.DBCachedObjectStoreFactory.AbstractDBFieldCodec):




        def __init__(self, __a0: java.lang.Class, __a1: java.lang.reflect.Field, __a2: int): ...



        def encodeField(self, __a0: object) -> db.Field: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getFieldType(self) -> java.lang.Class: ...

        def getObjectType(self) -> java.lang.Class: ...

        def getValue(self, __a0: ghidra.util.database.DBAnnotatedObject) -> object: ...

        def getValueType(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def load(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def store(self, __a0: List[long], __a1: db.BinaryField) -> None: ...

        @overload
        def store(self, __a0: ghidra.util.database.DBAnnotatedObject, __a1: db.DBRecord) -> None: ...

        @overload
        def store(self, __a0: object, __a1: db.Field) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RecRange(java.lang.Record):




        def __init__(self, __a0: int, __a1: long, __a2: long): ...



        def equals(self, __a0: object) -> bool: ...

        @staticmethod
        def fromRange(__a0: ghidra.program.model.address.AddressRange) -> ghidra.util.database.DBCachedObjectStoreFactory.RecRange: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def max(self) -> long: ...

        def min(self) -> long: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def spaceId(self) -> int: ...

        def toRange(self, __a0: ghidra.program.model.address.AddressFactory) -> ghidra.program.model.address.AddressRange: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, __a0: ghidra.util.database.DBCachedDomainObjectAdapter): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getOrCreateCachedStore(self, __a0: unicode, __a1: java.lang.Class, __a2: ghidra.util.database.DBAnnotatedObjectFactory, __a3: bool) -> ghidra.util.database.DBCachedObjectStore: ...

    def getOrCreateTable(self, __a0: unicode, __a1: java.lang.Class, __a2: bool) -> db.Table: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

