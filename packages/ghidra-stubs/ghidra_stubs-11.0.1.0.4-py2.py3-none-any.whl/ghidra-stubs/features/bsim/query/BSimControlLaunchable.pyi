from typing import List
import ghidra
import ghidra.util.task
import java.io
import java.lang
import java.util


class BSimControlLaunchable(object, ghidra.GhidraLaunchable):
    AUTH_OPTION: unicode = u'auth='
    CAFILE_OPTION: unicode = u'cafile='
    CERT_OPTION: unicode = u'cert='
    DN_OPTION: unicode = u'dn='
    FORCE_OPTION: unicode = u'--force'
    NO_LOCAL_AUTH_OPTION: unicode = u'--noLocalAuth'
    PORT_OPTION: unicode = u'port='
    USER_OPTION: unicode = u'user='




    class ArgumentException(java.lang.Exception):




        def __init__(self, __a0: unicode): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getUserRolesCommand(self, __a0: unicode) -> java.util.Map: ...

    def hashCode(self) -> int: ...

    def launch(self, __a0: ghidra.GhidraApplicationLayout, __a1: List[unicode]) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def run(self, __a0: List[unicode]) -> None: ...

    @overload
    def run(self, __a0: List[unicode], __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

