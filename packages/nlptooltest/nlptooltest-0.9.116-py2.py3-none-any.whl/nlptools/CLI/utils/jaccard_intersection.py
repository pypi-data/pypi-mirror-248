"""
sina_intersection

About:
------
The sina_intersection tool computes the intersection of two lists of strings after normalization and ignoring specific Arabic diacritics. It allows for ignoring all diacritics except shadda, or for ignoring shadda alone, or removing all diacritics. The tool is useful for comparing lists of Arabic words where diacritic variations need to be considered.

Usage:
------
Below is the usage information that can be generated by running sina_intersection --help.

Usage:
    sina_intersection --list1=WORD1 WORD2 ... --list2=WORD1 WORD2 ... [OPTIONS]

Options:
  --list1 WORD1 WORD2 ...
        First list of strings (space-separated).
  --list2 WORD1 WORD2 ...
        Second list of strings (space-separated).
  --ignore_all_diacritics_but_not_shadda
        Ignore all Arabic diacritics but not shadda.
  --ignore_shadda_diacritic
        Ignore the shadda diacritic.

Examples:
  sina_intersection --list1 word1 word2 word3 --list2 word1 word4 word5

Note:
-----
- The lists are case-sensitive.
- Diacritics refer to the Arabic Diacritics (like fatha, damma, kasra, etc.) and shadda.

"""

import argparse
import unicodedata
from nlptools.utils.jaccard import get_intersection
from nlptools.utils.readfile import read_file

def main():
    parser = argparse.ArgumentParser(description='Get intersection of two lists after normalization and ignoring diacritics')
    
    # Adding optional arguments for the two lists and the files
    parser.add_argument('--list1', type=str, nargs='*', help='First list of strings (space-separated)')
    parser.add_argument('--list2', type=str, nargs='*', help='Second list of strings (space-separated)')
    parser.add_argument('--file1', type=str, help='File containing the first list of words')
    parser.add_argument('--file2', type=str, help='File containing the second list of words')
    parser.add_argument('--ignore_all_diacritics_but_not_shadda', action='store_true', help='Ignore all diacritics but not shadda')
    parser.add_argument('--ignore_shadda_diacritic', action='store_true', help='Ignore shadda diacritic')

    args = parser.parse_args()

    if args.file1 and args.file2:
        list1 = read_file(args.file1)
        list2 = read_file(args.file2)
    elif args.list1 and args.list2:
        list1 = args.list1
        list2 = args.list2
    else:
        print("Either --file1 and --file2 arguments or both --list1 and --list2 arguments must be provided.")
        return

    # Get intersection
    result = get_intersection(list1, list2, args.ignore_all_diacritics_but_not_shadda, args.ignore_shadda_diacritic)
    
    print(f"Intersection: {', '.join(result)}")

if __name__ == '__main__':
    main()
#sina_intersection --list1 word1 word2 word3 --list2 word1 word4 word5
#sina_intersection --file1 "path/to/your/file1.txt" --file2 "path/to/your/file2.txt"
