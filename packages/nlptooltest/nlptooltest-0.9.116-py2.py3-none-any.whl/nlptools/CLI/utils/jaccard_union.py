"""
sina_union
About:
------
The sina_union tool generates the union of two lists after applying specific normalization rules, which may include ignoring diacritics.
It has the flexibility to ignore all diacritics except the shadda, or to solely ignore the shadda diacritic, based on user preference.

Usage:
------
Below is the usage information that can be generated by running sina_union --help.

Usage:
    sina_union --list1=WORD1 WORD2 ... --list2=WORD1 WORD2 ... [options]

Options:
  --list1 WORD1 WORD2 ...
        First list of strings (space-separated).
  --list2 WORD1 WORD2 ...
        Second list of strings (space-separated).
  --ignore_all_diacritics_but_not_shadda
        Apply normalization rules to ignore all diacritics but not the shadda.
  --ignore_shadda_diacritic
        Apply normalization rules to ignore the shadda diacritic.

Examples:
  sina_union --list1 word1 word2 word3 --list2 word4 word5 word6 --ignore_all_diacritics_but_not_shadda --ignore_shadda_diacritic

Note:
-----
The two normalization options can be used individually or together. However, the combination will result in both rules being applied, and thus, 
the shadda diacritic will be ignored as well. The union is generated by keeping distinct words after normalization. If two words, after normalization,
become identical, one of them is discarded based on a set of predefined criteria (defined in the `get_non_preferred_word` function).

"""

import argparse
from nlptools.utils.jaccard import normalize_word, get_non_preferred_word, get_union

def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file]

def main():
    parser = argparse.ArgumentParser(description='Get the union of two lists after normalization and ignoring diacritics.')

    parser.add_argument('--list1', type=str, nargs='*', help='First list of strings (space-separated)')
    parser.add_argument('--list2', type=str, nargs='*', help='Second list of strings (space-separated)')
    parser.add_argument('--file1', type=str, help='File containing the first list of words')
    parser.add_argument('--file2', type=str, help='File containing the second list of words')
    parser.add_argument('--ignore_all_diacritics_but_not_shadda', action='store_true', help='Ignore all diacritics but not shadda')
    parser.add_argument('--ignore_shadda_diacritic', action='store_true', help='Ignore shadda diacritic')

    args = parser.parse_args()

    if args.file1 and args.file2:
        list1 = read_file(args.file1)
        list2 = read_file(args.file2)
    elif args.list1 is not None and args.list2 is not None:
        list1 = args.list1
        list2 = args.list2
    else:
        print("Either --file1 and --file2 arguments or both --list1 and --list2 arguments must be provided.")
        return

    result = get_union(list1, list2, args.ignore_all_diacritics_but_not_shadda, args.ignore_shadda_diacritic)
    print(f"Result: {', '.join(result)}")

if __name__ == '__main__':
    main()

#sina_union --list1 word1 word2 word3 --list2 word4 word5 word6 --ignore_all_diacritics_but_not_shadda --ignore_shadda_diacritic
#sina_union --file1 "path/to/your/file1.txt" --file2 "path/to/your/file2.txt" --ignore_all_diacritics_but_not_shadda --ignore_shadda_diacritic
#