"""
sina_jaccard_similarity

About:
------
The sina_jaccard_similarity tool computes the Jaccard similarity between two sets of strings. The Jaccard similarity is the size of the intersection divided by the size of the union of the sample sets. It provides a measure of similarity between two sets.

Usage:
------
Below is the usage information that can be generated by running sina_jaccard_similarity --help.

Usage:
    sina_jaccard_similarity --set1=WORD1 WORD2 ... --set2=WORD1 WORD2 ...

Options:
  --set1 WORD1 WORD2 ...
        First set of strings (space-separated).
  --set2 WORD1 WORD2 ...
        Second set of strings (space-separated).

Examples:
  sina_jaccard_similarity --set1 word1 word2 word3 --set2 word1 word4 word5

Note:
-----
The Jaccard similarity ranges from 0 to 1. A value of 1 indicates that the sets are identical, while a value of 0 indicates no similarity between the sets.

"""
import argparse
from nlptools.utils.jaccard import jaccard
from nlptools.utils.readfile import read_file



def main():
    parser = argparse.ArgumentParser(description='Compute Jaccard similarity between two sets of strings')
    
    # Adding optional arguments for the two sets and the files
    parser.add_argument('--delimiter', type=str, help='denote the bounds between regions in a text')
    parser.add_argument('--list1', type=str, help='First string (delimiter-separated)')
    parser.add_argument('--list2', type=str, help='Second string (delimiter-separated)')
    parser.add_argument('--file1', type=str, help='File containing the first set of words')
    parser.add_argument('--file2', type=str, help='File containing the second set of words')
    parser.add_argument('--selection', type=str, help='selecting jaccard function type')
    parser.add_argument('--ignoreAllDiacriticsButNotShadda', action='store_true', help='Ignore all diacritics but not shadda')
    parser.add_argument('--ignoreShaddaDiacritic', action='store_true', help='Ignore shadda diacritic')
    
 
    args = parser.parse_args()

    if args.file1 and args.file2:
        set1 = read_file(args.file1)
        set2 = read_file(args.file2)
    elif args.list1 is not None and args.list2 is not None:
        set1 = args.list1
        set2 = args.list2
    else:
        print("Either --file1 and --file2 arguments or both --set1 and --set2 arguments must be provided.")
        return

    similarity = jaccard(args.delimiter, set1, set2, args.selection, args.ignoreAllDiacriticsButNotShadda, args.ignoreShaddaDiacritic)
    
    print("Jaccard Similarity:", similarity)

if __name__ == '__main__':
    main()

# sina_jaccard_similarity --list1 word1,word2  --list2 word1, word2 --delimiter ","  --selection "jaccardAll" --ignoreAllDiacriticsButNotShadda --ignoreShaddaDiacritic  
# sina_jaccard_similarity --file1 "path/to/your/file1.txt" --file2 "path/to/your/file2.txt" --delimiter ","  --selection "jaccardAll" --ignoreAllDiacriticsButNotShadda --ignoreShaddaDiacritic  