Metadata-Version: 2.1
Name: optibess_algorithm
Version: 0.1.1
Summary: Optibess Algorithm is a python 3.10+ library for simulating and optimizing a photovoltaic system with power storage.
Author: El-mor Renewable Energies Dev Team
License: MIT License
        
        Copyright (c) 2023 El-mor Renewable Energies Dev Team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: homepage, https://github.com/pvstorageoptimization/Optibess_algorithm
Project-URL: docs, https://optibess-algorithm.readthedocs.io
Keywords: solar,PV,optimization,power storage,BESS
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.10
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: numpy>=1.24.2
Requires-Dist: numpy-financial==1.0.0
Requires-Dist: pandas>=2.1.3
Requires-Dist: matplotlib>=3.7.1
Requires-Dist: nevergrad==0.6.0
Requires-Dist: timezonefinder==6.1.9
Requires-Dist: pvlib==0.10.2
Requires-Dist: solarfactors>=1.5.3
Provides-Extra: testing
Requires-Dist: flake8>=6.1.0; extra == "testing"
Requires-Dist: mypy>=1.7.0; extra == "testing"
Requires-Dist: tox>=4.11.3; extra == "testing"

Optibess Algorithm - optimizing PV system combined with storage
===============================================================

**Optibess Algorithm** is a python 3.10+ library for simulating and optimizing a photovoltaic system with power storage.
It uses data from *pvgis* and algorithms from the *pvlib* and *Nevergrad* python libraries, and is the backend part of
the *Optibess* site.

|tests status| |codecov status| |Documentation Status| |PyPI version shields.io|

.. |tests status| image:: https://github.com/pvstorageoptimization/Optibess_algorithm/workflows/Tests/badge.svg
   :target: https://github.com/pvstorageoptimization/Optibess_algorithm/actions?query=workflow%3ATests

.. |codecov status| image:: https://codecov.io/gh/pvstorageoptimization/Optibess_algorithm/graph/badge.svg?token=L3VLK1Y1SM
    :target: https://codecov.io/gh/pvstorageoptimization/Optibess_algorithm

.. |Documentation Status| image:: https://readthedocs.org/projects/optibess-algorithm/badge/?version=latest
   :target: http://optibess-algorithm.readthedocs.io/?badge=latest

.. |PyPI version shields.io| image:: https://img.shields.io/pypi/v/optibess-algorithm.svg
   :target: https://pypi.org/project/optibess-algorithm/

Quick start
------------
**Optibess Algorithm** can be installed with:

.. code-block:: bash

    pip install Optibess_algorithm

You can run an optimization on an example system with:

.. code-block:: python

    import logging
    import time
    from Optibess_algorithm.power_system_optimizer import NevergradOptimizer

    # make info logging show
    logging.getLogger().setLevel(logging.INFO)
    # start optimization
    start_time = time.time()
    optimizer = NevergradOptimizer(budget=100)
    opt_output, res = optimizer.run()
    # print results
    print(optimizer.get_candid(opt_output), res)
    print(f"Optimization took {time.time() - start_time} seconds")

documentation
=============

Check out our `documentation <http://optibess-algorithm.readthedocs.io>`_. There are example of how to use the different modules for simulation and
optimization

License
=======

Optibess Algorithm is licensed under the `MIT license <LICENSE>`_

