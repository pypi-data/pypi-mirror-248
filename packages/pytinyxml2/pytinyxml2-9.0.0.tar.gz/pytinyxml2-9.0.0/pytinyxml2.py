# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pytinyxml2
else:
    import _pytinyxml2

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


TINYXML2_MAJOR_VERSION = _pytinyxml2.TINYXML2_MAJOR_VERSION
TINYXML2_MINOR_VERSION = _pytinyxml2.TINYXML2_MINOR_VERSION
TINYXML2_PATCH_VERSION = _pytinyxml2.TINYXML2_PATCH_VERSION
class StrPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NEEDS_ENTITY_PROCESSING = _pytinyxml2.StrPair_NEEDS_ENTITY_PROCESSING
    NEEDS_NEWLINE_NORMALIZATION = _pytinyxml2.StrPair_NEEDS_NEWLINE_NORMALIZATION
    NEEDS_WHITESPACE_COLLAPSING = _pytinyxml2.StrPair_NEEDS_WHITESPACE_COLLAPSING
    TEXT_ELEMENT = _pytinyxml2.StrPair_TEXT_ELEMENT
    TEXT_ELEMENT_LEAVE_ENTITIES = _pytinyxml2.StrPair_TEXT_ELEMENT_LEAVE_ENTITIES
    ATTRIBUTE_NAME = _pytinyxml2.StrPair_ATTRIBUTE_NAME
    ATTRIBUTE_VALUE = _pytinyxml2.StrPair_ATTRIBUTE_VALUE
    ATTRIBUTE_VALUE_LEAVE_ENTITIES = _pytinyxml2.StrPair_ATTRIBUTE_VALUE_LEAVE_ENTITIES
    COMMENT = _pytinyxml2.StrPair_COMMENT

    def __init__(self):
        _pytinyxml2.StrPair_swiginit(self, _pytinyxml2.new_StrPair())
    __swig_destroy__ = _pytinyxml2.delete_StrPair

    def Set(self, start, end, flags):
        return _pytinyxml2.StrPair_Set(self, start, end, flags)

    def GetStr(self):
        return _pytinyxml2.StrPair_GetStr(self)

    def Empty(self):
        return _pytinyxml2.StrPair_Empty(self)

    def SetInternedStr(self, str):
        return _pytinyxml2.StrPair_SetInternedStr(self, str)

    def SetStr(self, str, flags=0):
        return _pytinyxml2.StrPair_SetStr(self, str, flags)

    def ParseText(self, _in, endTag, strFlags, curLineNumPtr):
        return _pytinyxml2.StrPair_ParseText(self, _in, endTag, strFlags, curLineNumPtr)

    def ParseName(self, _in):
        return _pytinyxml2.StrPair_ParseName(self, _in)

    def TransferTo(self, other):
        return _pytinyxml2.StrPair_TransferTo(self, other)

    def Reset(self):
        return _pytinyxml2.StrPair_Reset(self)

# Register StrPair in _pytinyxml2:
_pytinyxml2.StrPair_swigregister(StrPair)
cvar = _pytinyxml2.cvar
TIXML2_MAJOR_VERSION = cvar.TIXML2_MAJOR_VERSION
TIXML2_MINOR_VERSION = cvar.TIXML2_MINOR_VERSION
TIXML2_PATCH_VERSION = cvar.TIXML2_PATCH_VERSION
TINYXML2_MAX_ELEMENT_DEPTH = cvar.TINYXML2_MAX_ELEMENT_DEPTH

class MemPool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pytinyxml2.delete_MemPool

    def ItemSize(self):
        return _pytinyxml2.MemPool_ItemSize(self)

    def Alloc(self):
        return _pytinyxml2.MemPool_Alloc(self)

    def Free(self, arg2):
        return _pytinyxml2.MemPool_Free(self, arg2)

    def SetTracked(self):
        return _pytinyxml2.MemPool_SetTracked(self)

# Register MemPool in _pytinyxml2:
_pytinyxml2.MemPool_swigregister(MemPool)
class XMLVisitor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _pytinyxml2.delete_XMLVisitor

    def VisitEnter(self, *args):
        return _pytinyxml2.XMLVisitor_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _pytinyxml2.XMLVisitor_VisitExit(self, *args)

    def Visit(self, *args):
        return _pytinyxml2.XMLVisitor_Visit(self, *args)

    def __init__(self):
        _pytinyxml2.XMLVisitor_swiginit(self, _pytinyxml2.new_XMLVisitor())

# Register XMLVisitor in _pytinyxml2:
_pytinyxml2.XMLVisitor_swigregister(XMLVisitor)
XML_SUCCESS = _pytinyxml2.XML_SUCCESS
XML_NO_ATTRIBUTE = _pytinyxml2.XML_NO_ATTRIBUTE
XML_WRONG_ATTRIBUTE_TYPE = _pytinyxml2.XML_WRONG_ATTRIBUTE_TYPE
XML_ERROR_FILE_NOT_FOUND = _pytinyxml2.XML_ERROR_FILE_NOT_FOUND
XML_ERROR_FILE_COULD_NOT_BE_OPENED = _pytinyxml2.XML_ERROR_FILE_COULD_NOT_BE_OPENED
XML_ERROR_FILE_READ_ERROR = _pytinyxml2.XML_ERROR_FILE_READ_ERROR
XML_ERROR_PARSING_ELEMENT = _pytinyxml2.XML_ERROR_PARSING_ELEMENT
XML_ERROR_PARSING_ATTRIBUTE = _pytinyxml2.XML_ERROR_PARSING_ATTRIBUTE
XML_ERROR_PARSING_TEXT = _pytinyxml2.XML_ERROR_PARSING_TEXT
XML_ERROR_PARSING_CDATA = _pytinyxml2.XML_ERROR_PARSING_CDATA
XML_ERROR_PARSING_COMMENT = _pytinyxml2.XML_ERROR_PARSING_COMMENT
XML_ERROR_PARSING_DECLARATION = _pytinyxml2.XML_ERROR_PARSING_DECLARATION
XML_ERROR_PARSING_UNKNOWN = _pytinyxml2.XML_ERROR_PARSING_UNKNOWN
XML_ERROR_EMPTY_DOCUMENT = _pytinyxml2.XML_ERROR_EMPTY_DOCUMENT
XML_ERROR_MISMATCHED_ELEMENT = _pytinyxml2.XML_ERROR_MISMATCHED_ELEMENT
XML_ERROR_PARSING = _pytinyxml2.XML_ERROR_PARSING
XML_CAN_NOT_CONVERT_TEXT = _pytinyxml2.XML_CAN_NOT_CONVERT_TEXT
XML_NO_TEXT_NODE = _pytinyxml2.XML_NO_TEXT_NODE
XML_ELEMENT_DEPTH_EXCEEDED = _pytinyxml2.XML_ELEMENT_DEPTH_EXCEEDED
XML_ERROR_COUNT = _pytinyxml2.XML_ERROR_COUNT
class XMLUtil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def SkipWhiteSpace(*args):
        return _pytinyxml2.XMLUtil_SkipWhiteSpace(*args)

    @staticmethod
    def IsWhiteSpace(p):
        return _pytinyxml2.XMLUtil_IsWhiteSpace(p)

    @staticmethod
    def IsNameStartChar(ch):
        return _pytinyxml2.XMLUtil_IsNameStartChar(ch)

    @staticmethod
    def IsNameChar(ch):
        return _pytinyxml2.XMLUtil_IsNameChar(ch)

    @staticmethod
    def IsPrefixHex(p):
        return _pytinyxml2.XMLUtil_IsPrefixHex(p)

    @staticmethod
    def StringEqual(*args):
        return _pytinyxml2.XMLUtil_StringEqual(*args)

    @staticmethod
    def IsUTF8Continuation(p):
        return _pytinyxml2.XMLUtil_IsUTF8Continuation(p)

    @staticmethod
    def ReadBOM(p, hasBOM):
        return _pytinyxml2.XMLUtil_ReadBOM(p, hasBOM)

    @staticmethod
    def GetCharacterRef(p, value, length):
        return _pytinyxml2.XMLUtil_GetCharacterRef(p, value, length)

    @staticmethod
    def ConvertUTF32ToUTF8(input, output, length):
        return _pytinyxml2.XMLUtil_ConvertUTF32ToUTF8(input, output, length)

    @staticmethod
    def ToStr(*args):
        return _pytinyxml2.XMLUtil_ToStr(*args)

    @staticmethod
    def ToInt(str, value):
        return _pytinyxml2.XMLUtil_ToInt(str, value)

    @staticmethod
    def ToUnsigned(str, value):
        return _pytinyxml2.XMLUtil_ToUnsigned(str, value)

    @staticmethod
    def ToBool(str, value):
        return _pytinyxml2.XMLUtil_ToBool(str, value)

    @staticmethod
    def ToFloat(str, value):
        return _pytinyxml2.XMLUtil_ToFloat(str, value)

    @staticmethod
    def ToDouble(str, value):
        return _pytinyxml2.XMLUtil_ToDouble(str, value)

    @staticmethod
    def ToInt64(str, value):
        return _pytinyxml2.XMLUtil_ToInt64(str, value)

    @staticmethod
    def ToUnsigned64(str, value):
        return _pytinyxml2.XMLUtil_ToUnsigned64(str, value)

    @staticmethod
    def SetBoolSerialization(writeTrue, writeFalse):
        return _pytinyxml2.XMLUtil_SetBoolSerialization(writeTrue, writeFalse)

    def __init__(self):
        _pytinyxml2.XMLUtil_swiginit(self, _pytinyxml2.new_XMLUtil())
    __swig_destroy__ = _pytinyxml2.delete_XMLUtil

# Register XMLUtil in _pytinyxml2:
_pytinyxml2.XMLUtil_swigregister(XMLUtil)
class XMLNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDocument(self, *args):
        return _pytinyxml2.XMLNode_GetDocument(self, *args)

    def ToElement(self, *args):
        return _pytinyxml2.XMLNode_ToElement(self, *args)

    def ToText(self, *args):
        return _pytinyxml2.XMLNode_ToText(self, *args)

    def ToComment(self, *args):
        return _pytinyxml2.XMLNode_ToComment(self, *args)

    def ToDocument(self, *args):
        return _pytinyxml2.XMLNode_ToDocument(self, *args)

    def ToDeclaration(self, *args):
        return _pytinyxml2.XMLNode_ToDeclaration(self, *args)

    def ToUnknown(self, *args):
        return _pytinyxml2.XMLNode_ToUnknown(self, *args)

    def Value(self):
        return _pytinyxml2.XMLNode_Value(self)

    def SetValue(self, val, staticMem=False):
        return _pytinyxml2.XMLNode_SetValue(self, val, staticMem)

    def GetLineNum(self):
        return _pytinyxml2.XMLNode_GetLineNum(self)

    def Parent(self, *args):
        return _pytinyxml2.XMLNode_Parent(self, *args)

    def NoChildren(self):
        return _pytinyxml2.XMLNode_NoChildren(self)

    def FirstChild(self, *args):
        return _pytinyxml2.XMLNode_FirstChild(self, *args)

    def FirstChildElement(self, *args):
        return _pytinyxml2.XMLNode_FirstChildElement(self, *args)

    def LastChild(self, *args):
        return _pytinyxml2.XMLNode_LastChild(self, *args)

    def LastChildElement(self, *args):
        return _pytinyxml2.XMLNode_LastChildElement(self, *args)

    def PreviousSibling(self, *args):
        return _pytinyxml2.XMLNode_PreviousSibling(self, *args)

    def PreviousSiblingElement(self, *args):
        return _pytinyxml2.XMLNode_PreviousSiblingElement(self, *args)

    def NextSibling(self, *args):
        return _pytinyxml2.XMLNode_NextSibling(self, *args)

    def NextSiblingElement(self, *args):
        return _pytinyxml2.XMLNode_NextSiblingElement(self, *args)

    def InsertEndChild(self, addThis):
        return _pytinyxml2.XMLNode_InsertEndChild(self, addThis)

    def LinkEndChild(self, addThis):
        return _pytinyxml2.XMLNode_LinkEndChild(self, addThis)

    def InsertFirstChild(self, addThis):
        return _pytinyxml2.XMLNode_InsertFirstChild(self, addThis)

    def InsertAfterChild(self, afterThis, addThis):
        return _pytinyxml2.XMLNode_InsertAfterChild(self, afterThis, addThis)

    def DeleteChildren(self):
        return _pytinyxml2.XMLNode_DeleteChildren(self)

    def DeleteChild(self, node):
        return _pytinyxml2.XMLNode_DeleteChild(self, node)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLNode_ShallowClone(self, document)

    def DeepClone(self, target):
        return _pytinyxml2.XMLNode_DeepClone(self, target)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLNode_ShallowEqual(self, compare)

    def Accept(self, visitor):
        return _pytinyxml2.XMLNode_Accept(self, visitor)

    def SetUserData(self, userData):
        return _pytinyxml2.XMLNode_SetUserData(self, userData)

    def GetUserData(self):
        return _pytinyxml2.XMLNode_GetUserData(self)

# Register XMLNode in _pytinyxml2:
_pytinyxml2.XMLNode_swigregister(XMLNode)
class XMLText(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, visitor):
        return _pytinyxml2.XMLText_Accept(self, visitor)

    def ToText(self, *args):
        return _pytinyxml2.XMLText_ToText(self, *args)

    def SetCData(self, isCData):
        return _pytinyxml2.XMLText_SetCData(self, isCData)

    def CData(self):
        return _pytinyxml2.XMLText_CData(self)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLText_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLText_ShallowEqual(self, compare)

# Register XMLText in _pytinyxml2:
_pytinyxml2.XMLText_swigregister(XMLText)
class XMLComment(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToComment(self, *args):
        return _pytinyxml2.XMLComment_ToComment(self, *args)

    def Accept(self, visitor):
        return _pytinyxml2.XMLComment_Accept(self, visitor)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLComment_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLComment_ShallowEqual(self, compare)

# Register XMLComment in _pytinyxml2:
_pytinyxml2.XMLComment_swigregister(XMLComment)
class XMLDeclaration(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToDeclaration(self, *args):
        return _pytinyxml2.XMLDeclaration_ToDeclaration(self, *args)

    def Accept(self, visitor):
        return _pytinyxml2.XMLDeclaration_Accept(self, visitor)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLDeclaration_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLDeclaration_ShallowEqual(self, compare)

# Register XMLDeclaration in _pytinyxml2:
_pytinyxml2.XMLDeclaration_swigregister(XMLDeclaration)
class XMLUnknown(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToUnknown(self, *args):
        return _pytinyxml2.XMLUnknown_ToUnknown(self, *args)

    def Accept(self, visitor):
        return _pytinyxml2.XMLUnknown_Accept(self, visitor)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLUnknown_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLUnknown_ShallowEqual(self, compare)

# Register XMLUnknown in _pytinyxml2:
_pytinyxml2.XMLUnknown_swigregister(XMLUnknown)
class XMLAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        return _pytinyxml2.XMLAttribute_Name(self)

    def Value(self):
        return _pytinyxml2.XMLAttribute_Value(self)

    def GetLineNum(self):
        return _pytinyxml2.XMLAttribute_GetLineNum(self)

    def Next(self):
        return _pytinyxml2.XMLAttribute_Next(self)

    def IntValue(self):
        return _pytinyxml2.XMLAttribute_IntValue(self)

    def Int64Value(self):
        return _pytinyxml2.XMLAttribute_Int64Value(self)

    def Unsigned64Value(self):
        return _pytinyxml2.XMLAttribute_Unsigned64Value(self)

    def UnsignedValue(self):
        return _pytinyxml2.XMLAttribute_UnsignedValue(self)

    def BoolValue(self):
        return _pytinyxml2.XMLAttribute_BoolValue(self)

    def DoubleValue(self):
        return _pytinyxml2.XMLAttribute_DoubleValue(self)

    def FloatValue(self):
        return _pytinyxml2.XMLAttribute_FloatValue(self)

    def QueryIntValue(self, value):
        return _pytinyxml2.XMLAttribute_QueryIntValue(self, value)

    def QueryUnsignedValue(self, value):
        return _pytinyxml2.XMLAttribute_QueryUnsignedValue(self, value)

    def QueryInt64Value(self, value):
        return _pytinyxml2.XMLAttribute_QueryInt64Value(self, value)

    def QueryUnsigned64Value(self, value):
        return _pytinyxml2.XMLAttribute_QueryUnsigned64Value(self, value)

    def QueryBoolValue(self, value):
        return _pytinyxml2.XMLAttribute_QueryBoolValue(self, value)

    def QueryDoubleValue(self, value):
        return _pytinyxml2.XMLAttribute_QueryDoubleValue(self, value)

    def QueryFloatValue(self, value):
        return _pytinyxml2.XMLAttribute_QueryFloatValue(self, value)

    def SetAttribute(self, *args):
        return _pytinyxml2.XMLAttribute_SetAttribute(self, *args)

# Register XMLAttribute in _pytinyxml2:
_pytinyxml2.XMLAttribute_swigregister(XMLAttribute)
class XMLElement(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        return _pytinyxml2.XMLElement_Name(self)

    def SetName(self, str, staticMem=False):
        return _pytinyxml2.XMLElement_SetName(self, str, staticMem)

    def ToElement(self, *args):
        return _pytinyxml2.XMLElement_ToElement(self, *args)

    def Accept(self, visitor):
        return _pytinyxml2.XMLElement_Accept(self, visitor)

    def Attribute(self, name, value=None):
        return _pytinyxml2.XMLElement_Attribute(self, name, value)

    def IntAttribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_IntAttribute(self, name, defaultValue)

    def UnsignedAttribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_UnsignedAttribute(self, name, defaultValue)

    def Int64Attribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_Int64Attribute(self, name, defaultValue)

    def Unsigned64Attribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_Unsigned64Attribute(self, name, defaultValue)

    def BoolAttribute(self, name, defaultValue=False):
        return _pytinyxml2.XMLElement_BoolAttribute(self, name, defaultValue)

    def DoubleAttribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_DoubleAttribute(self, name, defaultValue)

    def FloatAttribute(self, name, defaultValue=0):
        return _pytinyxml2.XMLElement_FloatAttribute(self, name, defaultValue)

    def QueryIntAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryIntAttribute(self, name, value)

    def QueryUnsignedAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryUnsignedAttribute(self, name, value)

    def QueryInt64Attribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryInt64Attribute(self, name, value)

    def QueryUnsigned64Attribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryUnsigned64Attribute(self, name, value)

    def QueryBoolAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryBoolAttribute(self, name, value)

    def QueryDoubleAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryDoubleAttribute(self, name, value)

    def QueryFloatAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryFloatAttribute(self, name, value)

    def QueryStringAttribute(self, name, value):
        return _pytinyxml2.XMLElement_QueryStringAttribute(self, name, value)

    def QueryAttribute(self, *args):
        return _pytinyxml2.XMLElement_QueryAttribute(self, *args)

    def SetAttribute(self, *args):
        return _pytinyxml2.XMLElement_SetAttribute(self, *args)

    def DeleteAttribute(self, name):
        return _pytinyxml2.XMLElement_DeleteAttribute(self, name)

    def FirstAttribute(self):
        return _pytinyxml2.XMLElement_FirstAttribute(self)

    def FindAttribute(self, name):
        return _pytinyxml2.XMLElement_FindAttribute(self, name)

    def GetText(self):
        return _pytinyxml2.XMLElement_GetText(self)

    def SetText(self, *args):
        return _pytinyxml2.XMLElement_SetText(self, *args)

    def QueryIntText(self, ival):
        return _pytinyxml2.XMLElement_QueryIntText(self, ival)

    def QueryUnsignedText(self, uval):
        return _pytinyxml2.XMLElement_QueryUnsignedText(self, uval)

    def QueryInt64Text(self, uval):
        return _pytinyxml2.XMLElement_QueryInt64Text(self, uval)

    def QueryUnsigned64Text(self, uval):
        return _pytinyxml2.XMLElement_QueryUnsigned64Text(self, uval)

    def QueryBoolText(self, bval):
        return _pytinyxml2.XMLElement_QueryBoolText(self, bval)

    def QueryDoubleText(self, dval):
        return _pytinyxml2.XMLElement_QueryDoubleText(self, dval)

    def QueryFloatText(self, fval):
        return _pytinyxml2.XMLElement_QueryFloatText(self, fval)

    def IntText(self, defaultValue=0):
        return _pytinyxml2.XMLElement_IntText(self, defaultValue)

    def UnsignedText(self, defaultValue=0):
        return _pytinyxml2.XMLElement_UnsignedText(self, defaultValue)

    def Int64Text(self, defaultValue=0):
        return _pytinyxml2.XMLElement_Int64Text(self, defaultValue)

    def Unsigned64Text(self, defaultValue=0):
        return _pytinyxml2.XMLElement_Unsigned64Text(self, defaultValue)

    def BoolText(self, defaultValue=False):
        return _pytinyxml2.XMLElement_BoolText(self, defaultValue)

    def DoubleText(self, defaultValue=0):
        return _pytinyxml2.XMLElement_DoubleText(self, defaultValue)

    def FloatText(self, defaultValue=0):
        return _pytinyxml2.XMLElement_FloatText(self, defaultValue)

    def InsertNewChildElement(self, name):
        return _pytinyxml2.XMLElement_InsertNewChildElement(self, name)

    def InsertNewComment(self, comment):
        return _pytinyxml2.XMLElement_InsertNewComment(self, comment)

    def InsertNewText(self, text):
        return _pytinyxml2.XMLElement_InsertNewText(self, text)

    def InsertNewDeclaration(self, text):
        return _pytinyxml2.XMLElement_InsertNewDeclaration(self, text)

    def InsertNewUnknown(self, text):
        return _pytinyxml2.XMLElement_InsertNewUnknown(self, text)
    OPEN = _pytinyxml2.XMLElement_OPEN
    CLOSED = _pytinyxml2.XMLElement_CLOSED
    CLOSING = _pytinyxml2.XMLElement_CLOSING

    def ClosingType(self):
        return _pytinyxml2.XMLElement_ClosingType(self)

    def ShallowClone(self, document):
        return _pytinyxml2.XMLElement_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _pytinyxml2.XMLElement_ShallowEqual(self, compare)

# Register XMLElement in _pytinyxml2:
_pytinyxml2.XMLElement_swigregister(XMLElement)
PRESERVE_WHITESPACE = _pytinyxml2.PRESERVE_WHITESPACE
COLLAPSE_WHITESPACE = _pytinyxml2.COLLAPSE_WHITESPACE
class XMLDocument(XMLNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pytinyxml2.XMLDocument_swiginit(self, _pytinyxml2.new_XMLDocument(*args))
    __swig_destroy__ = _pytinyxml2.delete_XMLDocument

    def ToDocument(self, *args):
        return _pytinyxml2.XMLDocument_ToDocument(self, *args)

    def Parse(self, *args):
        return _pytinyxml2.XMLDocument_Parse(self, *args)

    def LoadFile(self, *args):
        return _pytinyxml2.XMLDocument_LoadFile(self, *args)

    def SaveFile(self, *args):
        return _pytinyxml2.XMLDocument_SaveFile(self, *args)

    def ProcessEntities(self):
        return _pytinyxml2.XMLDocument_ProcessEntities(self)

    def WhitespaceMode(self):
        return _pytinyxml2.XMLDocument_WhitespaceMode(self)

    def HasBOM(self):
        return _pytinyxml2.XMLDocument_HasBOM(self)

    def SetBOM(self, useBOM):
        return _pytinyxml2.XMLDocument_SetBOM(self, useBOM)

    def RootElement(self, *args):
        return _pytinyxml2.XMLDocument_RootElement(self, *args)

    def Print(self, streamer=None):
        return _pytinyxml2.XMLDocument_Print(self, streamer)

    def Accept(self, visitor):
        return _pytinyxml2.XMLDocument_Accept(self, visitor)

    def NewElement(self, name):
        return _pytinyxml2.XMLDocument_NewElement(self, name)

    def NewComment(self, comment):
        return _pytinyxml2.XMLDocument_NewComment(self, comment)

    def NewText(self, text):
        return _pytinyxml2.XMLDocument_NewText(self, text)

    def NewDeclaration(self, text=None):
        return _pytinyxml2.XMLDocument_NewDeclaration(self, text)

    def NewUnknown(self, text):
        return _pytinyxml2.XMLDocument_NewUnknown(self, text)

    def DeleteNode(self, node):
        return _pytinyxml2.XMLDocument_DeleteNode(self, node)

    def ClearError(self):
        return _pytinyxml2.XMLDocument_ClearError(self)

    def Error(self):
        return _pytinyxml2.XMLDocument_Error(self)

    def ErrorID(self):
        return _pytinyxml2.XMLDocument_ErrorID(self)

    def ErrorName(self):
        return _pytinyxml2.XMLDocument_ErrorName(self)

    @staticmethod
    def ErrorIDToName(errorID):
        return _pytinyxml2.XMLDocument_ErrorIDToName(errorID)

    def ErrorStr(self):
        return _pytinyxml2.XMLDocument_ErrorStr(self)

    def PrintError(self):
        return _pytinyxml2.XMLDocument_PrintError(self)

    def ErrorLineNum(self):
        return _pytinyxml2.XMLDocument_ErrorLineNum(self)

    def Clear(self):
        return _pytinyxml2.XMLDocument_Clear(self)

    def DeepCopy(self, target):
        return _pytinyxml2.XMLDocument_DeepCopy(self, target)

    def Identify(self, p, node):
        return _pytinyxml2.XMLDocument_Identify(self, p, node)

    def MarkInUse(self, arg2):
        return _pytinyxml2.XMLDocument_MarkInUse(self, arg2)

    def ShallowClone(self, arg2):
        return _pytinyxml2.XMLDocument_ShallowClone(self, arg2)

    def ShallowEqual(self, arg2):
        return _pytinyxml2.XMLDocument_ShallowEqual(self, arg2)

# Register XMLDocument in _pytinyxml2:
_pytinyxml2.XMLDocument_swigregister(XMLDocument)
class XMLHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pytinyxml2.XMLHandle_swiginit(self, _pytinyxml2.new_XMLHandle(*args))

    def FirstChild(self):
        return _pytinyxml2.XMLHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        return _pytinyxml2.XMLHandle_FirstChildElement(self, name)

    def LastChild(self):
        return _pytinyxml2.XMLHandle_LastChild(self)

    def LastChildElement(self, name=None):
        return _pytinyxml2.XMLHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        return _pytinyxml2.XMLHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        return _pytinyxml2.XMLHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        return _pytinyxml2.XMLHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        return _pytinyxml2.XMLHandle_NextSiblingElement(self, name)

    def ToNode(self):
        return _pytinyxml2.XMLHandle_ToNode(self)

    def ToElement(self):
        return _pytinyxml2.XMLHandle_ToElement(self)

    def ToText(self):
        return _pytinyxml2.XMLHandle_ToText(self)

    def ToUnknown(self):
        return _pytinyxml2.XMLHandle_ToUnknown(self)

    def ToDeclaration(self):
        return _pytinyxml2.XMLHandle_ToDeclaration(self)
    __swig_destroy__ = _pytinyxml2.delete_XMLHandle

# Register XMLHandle in _pytinyxml2:
_pytinyxml2.XMLHandle_swigregister(XMLHandle)
class XMLConstHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pytinyxml2.XMLConstHandle_swiginit(self, _pytinyxml2.new_XMLConstHandle(*args))

    def FirstChild(self):
        return _pytinyxml2.XMLConstHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        return _pytinyxml2.XMLConstHandle_FirstChildElement(self, name)

    def LastChild(self):
        return _pytinyxml2.XMLConstHandle_LastChild(self)

    def LastChildElement(self, name=None):
        return _pytinyxml2.XMLConstHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        return _pytinyxml2.XMLConstHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        return _pytinyxml2.XMLConstHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        return _pytinyxml2.XMLConstHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        return _pytinyxml2.XMLConstHandle_NextSiblingElement(self, name)

    def ToNode(self):
        return _pytinyxml2.XMLConstHandle_ToNode(self)

    def ToElement(self):
        return _pytinyxml2.XMLConstHandle_ToElement(self)

    def ToText(self):
        return _pytinyxml2.XMLConstHandle_ToText(self)

    def ToUnknown(self):
        return _pytinyxml2.XMLConstHandle_ToUnknown(self)

    def ToDeclaration(self):
        return _pytinyxml2.XMLConstHandle_ToDeclaration(self)
    __swig_destroy__ = _pytinyxml2.delete_XMLConstHandle

# Register XMLConstHandle in _pytinyxml2:
_pytinyxml2.XMLConstHandle_swigregister(XMLConstHandle)
class XMLPrinter(XMLVisitor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file=None, compact=False, depth=0):
        _pytinyxml2.XMLPrinter_swiginit(self, _pytinyxml2.new_XMLPrinter(file, compact, depth))
    __swig_destroy__ = _pytinyxml2.delete_XMLPrinter

    def PushHeader(self, writeBOM, writeDeclaration):
        return _pytinyxml2.XMLPrinter_PushHeader(self, writeBOM, writeDeclaration)

    def OpenElement(self, name, compactMode=False):
        return _pytinyxml2.XMLPrinter_OpenElement(self, name, compactMode)

    def PushAttribute(self, *args):
        return _pytinyxml2.XMLPrinter_PushAttribute(self, *args)

    def CloseElement(self, compactMode=False):
        return _pytinyxml2.XMLPrinter_CloseElement(self, compactMode)

    def PushText(self, *args):
        return _pytinyxml2.XMLPrinter_PushText(self, *args)

    def PushComment(self, comment):
        return _pytinyxml2.XMLPrinter_PushComment(self, comment)

    def PushDeclaration(self, value):
        return _pytinyxml2.XMLPrinter_PushDeclaration(self, value)

    def PushUnknown(self, value):
        return _pytinyxml2.XMLPrinter_PushUnknown(self, value)

    def VisitEnter(self, *args):
        return _pytinyxml2.XMLPrinter_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _pytinyxml2.XMLPrinter_VisitExit(self, *args)

    def Visit(self, *args):
        return _pytinyxml2.XMLPrinter_Visit(self, *args)

    def CStr(self):
        return _pytinyxml2.XMLPrinter_CStr(self)

    def CStrSize(self):
        return _pytinyxml2.XMLPrinter_CStrSize(self)

    def ClearBuffer(self, resetToFirstElement=True):
        return _pytinyxml2.XMLPrinter_ClearBuffer(self, resetToFirstElement)

# Register XMLPrinter in _pytinyxml2:
_pytinyxml2.XMLPrinter_swigregister(XMLPrinter)

