{"version":3,"sources":["map.tsx","l7.tsx","index.tsx"],"names":["renderLayers","layers","map","layer","index","type","_jsx","PointLayer","concat","LineLayer","PolygonLayer","RasterLayer","HeatmapLayer","TextLayer","BubbleLayer","ChoroplethLayer","IconFontLayer","IconImageLayer","FlowLayer","renderControls","controls","control","LogoControl","ZoomControl","ScaleControl","FullscreenControl","GeoLocateControl","ExportImageControl","MouseLocationControl","LayerSwitchControl","MapThemeControl","renderLegends","legends","legend","LegendCategories","LegendIcon","LegendProportion","LegendRamp","DefaultMapOptions","mapType","source","data","parser","tileSize","zoomOffset","L7","withStreamlitConnection","props","style","options","args","newOptions","SceneOptions","_jsxs","LarkMap","height","onSceneLoaded","e","Streamlit","setFrameHeight","onLoaded","children","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b758a801.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    PointLayer,\n    LineLayer,\n    PolygonLayer,\n    RasterLayer,\n    HeatmapLayer,\n    TextLayer,\n    BubbleLayer,\n    ChoroplethLayer,\n    IconFontLayer,\n    IconImageLayer,\n    FlowLayer,\n    LogoControl,\n    ZoomControl,\n    ScaleControl,\n    FullscreenControl,\n    GeoLocateControl,\n    ExportImageControl,\n    MouseLocationControl,\n    LayerSwitchControl,\n    MapThemeControl,\n    LegendCategories,\n    LegendIcon,\n    LegendProportion,\n    LegendRamp\n} from '@antv/larkmap';\n\nimport type {\n    LarkMapProps,\n    PointLayerProps,\n    LineLayerProps,\n    PolygonLayerProps,\n    RasterLayerProps,\n    HeatmapLayerProps,\n    TextLayerProps,\n    BubbleLayerProps,\n    ChoroplethLayerProps,\n    IconFontLayerProps,\n    IconImageLayerProps,\n    FlowLayerProps,\n    LogoControlProps,\n    ZoomControlProps,\n    ScaleControlProps,\n    FullscreenControlProps,\n    GeoLocateControlProps,\n    ExportImageControlProps,\n    MouseLocationControlProps,\n    LayerSwitchControlProps,\n    MapThemeControlProps,\n    LegendCategoriesProps,\n    LegendIconProps,\n    LegendProportionProp,\n    LegendRampProps\n\n\n} from '@antv/larkmap';\nexport type ILayerType =\n    PointLayerProps & { type: 'point' }\n    | LineLayerProps & { type: 'line' }\n    | PolygonLayerProps & { type: 'polygon' }\n    | RasterLayerProps & { type: 'raster' }\n    | HeatmapLayerProps & { type: 'heatmap' }\n    | TextLayerProps & { type: 'text' }\n    | BubbleLayerProps & { type: 'bubble' }\n    | ChoroplethLayerProps & { type: 'choropleth' }\n    | IconFontLayerProps & { type: 'iconfont' }\n    | IconImageLayerProps & { type: 'iconimage' }\n    | FlowLayerProps & { type: 'flow' };\nexport type IControlType = LogoControlProps & { type: 'logo' }\n    | ZoomControlProps & { type: 'zoom' }\n    | ScaleControlProps & { type: 'scale' }\n    | FullscreenControlProps & { type: 'fullscreen' }\n    | GeoLocateControlProps & { type: 'geolocate' }\n    | ExportImageControlProps & { type: 'exportimage' }\n    | MouseLocationControlProps & { type: 'mouselocation' }\n    | LayerSwitchControlProps & { type: 'layerswitch' }\n    | MapThemeControlProps & { type: 'maptheme' };\nexport type ILegendType = LegendCategoriesProps & { type: 'categories' }\n    | LegendIconProps & { type: 'icon' }\n    | LegendProportionProp & { type: 'proportion' }\n    | LegendRampProps & { type: 'ramp' };\nexport interface IMapOptions extends LarkMapProps {\n    /**\n     * 图层配置\n     */\n    layers?: ILayerType[];\n    controls?: IControlType[];\n    legends?: ILegendType[];\n}\n\nexport function renderLayers(layers: ILayerType[]) {\n    return layers.map((layer,index) => {\n        switch (layer.type) {\n            case 'point':\n                return <PointLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'line':\n                return <LineLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'polygon':\n                return <PolygonLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'raster':\n                return <RasterLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'heatmap':\n                return <HeatmapLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'text':\n                return <TextLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'bubble':\n                return <BubbleLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'choropleth':\n                return <ChoroplethLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'iconfont':\n                return <IconFontLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'iconimage':\n                return <IconImageLayer key={`${layer.type}_${index}`} {...layer} />;\n            case 'flow':\n                return <FlowLayer key={`${layer.type}_${index}`} {...layer} />;\n            default:\n                return null;\n        }\n        \n    });\n\n}\n\nexport function renderControls(controls: IControlType[]) {\n    return controls.map((control,index) => {\n        switch (control.type) {\n            case 'logo':\n                return <LogoControl key={`${control.type}_${index}`} {...control} />;\n            case 'zoom':\n                return <ZoomControl key={`${control.type}_${index}`} {...control} />;\n            case 'scale':\n                return <ScaleControl key={`${control.type}_${index}`} {...control} />;\n            case 'fullscreen':\n                return <FullscreenControl key={`${control.type}_${index}`} {...control} />;\n            case 'geolocate':\n                return <GeoLocateControl key={`${control.type}_${index}`} {...control} />;\n            case 'exportimage':\n                return <ExportImageControl key={`${control.type}_${index}`} {...control} />;\n            case 'mouselocation':\n                return <MouseLocationControl key={`${control.type}_${index}`} {...control} />;\n            case 'layerswitch':\n                return <LayerSwitchControl key={`${control.type}_${index}`} {...control} />;\n            case 'maptheme':\n                return <MapThemeControl key={`${control.type}_${index}`} {...control} />;\n            default:\n                return null;\n        }\n    });\n}\n\nexport function renderLegends(legends: ILegendType[]) {\n    return legends.map((legend,index) => {\n        switch (legend.type) {\n            case 'categories':\n                return <LegendCategories key={`${legend.type}_${index}`} {...legend} />;\n            case 'icon':\n                return <LegendIcon key={`${legend.type}_${index}`} {...legend} />;\n            case 'proportion':\n                return <LegendProportion key={`${legend.type}_${index}`} {...legend} />;\n            case 'ramp':\n                return <LegendRamp key={`${legend.type}_${index}`} {...legend} />;\n            default:\n                return null;\n        }\n    });\n}\n","import React from 'react';\nimport {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n} from 'streamlit-component-lib';\nimport { LarkMap } from '@antv/larkmap';\nimport type { IMapOptions } from './map'\nimport { renderLayers, renderLegends, renderControls } from './map'\n\n\nconst DefaultMapOptions: IMapOptions = {\n  mapType: 'Map',\n  layers: [{\n    type: 'raster',\n    source: {\n      data: 'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',\n      parser: { type: 'rasterTile', tileSize: 256, zoomOffset: 0 },\n    },\n  }],\n  controls: [],\n  legends: [],\n}\n\nconst L7Component: React.FC<ComponentProps> = (props) => {\n  const { style, options } = props.args as { style: any; options: IMapOptions };\n  const newOptions = { ...DefaultMapOptions, ...options };\n  const { layers = [], controls = [], legends = [], ...SceneOptions } = newOptions;\n  return (\n    <LarkMap style={{ height: 400, ...style }} mapType={options.mapType || 'Map'} onSceneLoaded={(e) => {\n      Streamlit.setFrameHeight((style.height || 400)+ 10)\n      if (SceneOptions.onLoaded)\n        SceneOptions.onLoaded(e)\n\n    }}>\n      {\n        renderLayers(layers)\n      }\n      {\n        renderLegends(legends)\n      }\n      {\n        renderControls(controls)\n      }\n\n    </LarkMap>\n\n  )\n};\n\nexport const L7 = withStreamlitConnection(L7Component)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { L7 } from './l7';\nReactDOM.render(<L7/>, document.getElementById('root'))\n"],"sourceRoot":""}