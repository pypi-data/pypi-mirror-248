# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------
"""Methods specific to Sequence to Sequence Chat completion task type."""

import logging
from typing import Any, Dict, List, Optional, Callable, Iterator

from azureml.metrics import constants
from azureml.metrics.common import _scoring
from azureml.metrics.common.azureml_metrics import AzureMLMetrics

logger = logging.getLogger(__name__)


class AzureMLCodeGenerationMetrics(AzureMLMetrics):
    def __init__(self,
                 metrics: Optional[List[str]] = None,
                 test_cases: Optional[List] = None,
                 allow_code_eval: Optional[bool] = None,
                 no_of_candidates: Optional[List[int]] = None,
                 num_workers: Optional[int] = None,
                 timeout: Optional[int] = None,
                 tokenizer: Optional[Any] = None,
                 smoothing: Optional[bool] = False,
                 aggregator: Optional[bool] = True,
                 stemmer: Optional[bool] = False,
                 custom_dimensions: Optional[Dict[str, Any]] = None,
                 log_activity: Optional[Callable[[logging.Logger, str, Optional[str], Optional[Dict[str, Any]]],
                                                 Iterator[Optional[Any]]]] = None,
                 log_traceback: Optional[Callable[[BaseException, logging.Logger, Optional[str],
                                                   Optional[bool], Optional[Any]], None]] = None) -> None:
        """
        Given the test_cases (assertions) and candidates (prediction),
        generate metrics for Code generation task.

        :param metrics: pass@k metric to be computed for code generation task
        :param test_cases: list of strings which contains the assertion or test case statements.
        :param allow_code_eval: Boolean to indicate whether to execute untrusted model generated code
        :param no_of_candidates: number of code candidates to consider in the evaluation.
        :param num_workers: number of workers used to evaluate the candidate programs
        :param timeout: The maximum time taken to produce a prediction before it is considered a “timeout”.
        :param tokenizer: function that can tokenize input data
        :params smoothing: Boolean to indicate whether to smooth out the bleu score
        :params aggregator: Boolean to indicate whether to aggregate scores
        :params stemmer: Boolean to indicate whether to use Porter stemmer for word suffixes

        :param custom_dimensions: custom_dimensions used for telemetry purposes.
        :param log_activity is a callback to log the activity with parameters
            :param logger: logger
            :param activity_name: activity name
            :param activity_type: activity type
            :param custom_dimensions: custom dimensions
        :param log_traceback is a callback to log exception traces. with parameters
            :param exception: The exception to log.
            :param logger: The logger to use.
            :param override_error_msg: The message to display that will override the current error_msg.
            :param is_critical: If is_critical, the logger will use log.critical, otherwise log.error.
            :param tb: The traceback to use for logging; if not provided,
                        the one attached to the exception is used.
        :return: None
        """
        self.metrics = metrics if metrics else constants.Metric.CODE_GENERATION_SET
        self.test_cases = test_cases
        self.allow_code_eval = allow_code_eval
        self.no_of_candidates = no_of_candidates
        self.num_workers = num_workers
        self.timeout = timeout
        self.tokenizer = tokenizer
        self.smoothing = smoothing
        self.aggregator = aggregator
        self.stemmer = stemmer
        self.__custom_dimensions = custom_dimensions
        super().__init__(log_activity, log_traceback)

    def compute(self, y_test: List[Any], y_pred: List[str]) -> Dict[str, Dict[str, Any]]:
        """
        Compute all metrics for code generation task based on the config.

        :param y_test: Actual list of test cases
        :param y_pred: list of list of predictions or code candidates
            generated by model.
        :return: Dict of computed metrics
        """
        scored_metrics = _scoring._score_code_generation(
            self._log_activity,
            self._log_traceback,
            y_test,
            y_pred,
            self.metrics,
            self.test_cases,
            self.allow_code_eval,
            self.no_of_candidates,
            self.num_workers,
            self.timeout,
            self.tokenizer,
            self.smoothing,
            self.aggregator,
            self.stemmer,
        )

        return scored_metrics

    @staticmethod
    def list_metrics():
        """Get the list of supported metrics.

            :return: List of supported metrics.
        """
        supported_metrics = constants.Metric.CODE_GENERATION_SET
        return supported_metrics
