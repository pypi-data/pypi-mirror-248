import memflow

from typing import Optional, Type, Any, List

def quick_process(virt_size: int, buffer: bytearray) -> memflow.Process: ...

class DummyOs:
    def __init__(self, memory: DummyMemory) -> self: ...
    def retrieve_os(self) -> memflow.Os: ...
    def alloc_process(self, size: int) -> int: ...
    def alloc_process_with_module(self, size: int) -> int: ...
    def add_modules_for_process(self, pid: int, count: int, min_size: int): ...

class DummyMemory:
    def __init__(self, size: int) -> self: ...
    def read(self, addr: int, type: Type[_CT]) -> Any: ...
    def read_ptr(self, ptr: Any) -> Any: ...
    def write(self, addr: int, type: Type[_CT], value: Any): ...
