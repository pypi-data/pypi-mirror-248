import memflow.dummy

from typing import Optional, Type, Any, List

def sizeof(type: Type[_CT]) -> int: ...

class Inventory:
    def __init__(self, path: Optional[str]) -> self: ...
    def add_dir(self, path: str, filter: Optional[str]): ...
    def available_os(self) -> List[str]: ...
    def available_connectors(self) -> List[str]: ...
    def connector_help(self, name: str) -> str: ...
    def os_help(self, name: str) -> str: ...
    def connector_target_list(self, name: str) -> List[TargetInfo]: ...
    def create_connector(
        self, name: str, input: Optional[Connector], args: Optional[str]
    ) -> Connector: ...
    def create_os(self, name: str, input: Optional[Os], args: Optional[str]) -> Os: ...

class TargetInfo:
    @property
    def name(self) -> str: ...

class Connector:
    @property
    def max_address(self) -> int: ...
    @property
    def real_size(self) -> int: ...
    @property
    def readonly(self) -> bool: ...
    @property
    def ideal_batch_size(self) -> int: ...
    def phys_read(self, addr: int, type: Type[_CT]) -> Any: ...
    def phys_read_ptr(self, ptr: Any) -> Any: ...
    def phys_write(self, addr: int, type: Type[_CT], value: Any): ...

class Os:
    @property
    def arch(self) -> str: ...
    @property
    def base(self) -> int: ...
    @property
    def size(self) -> int: ...
    def process_info_list(self) -> List[ProcessInfo]: ...
    def process_from_name(self, name: str) -> Process: ...
    def process_from_pid(self, pid: int) -> Process: ...
    def process_from_info(self, info: ProcessInfo) -> Process: ...
    def process_from_addr(self, addr: int) -> Process: ...
    def module_info_list(self) -> List[ModuleInfo]: ...
    def module_from_name(self, name: str) -> ModuleInfo: ...
    def read(self, addr: int, type: Type[_CT]) -> Any: ...
    def read_ptr(self, ptr: Any) -> Any: ...
    def write(self, addr: int, type: Type[_CT], value: Any): ...
    def phys_read(self, addr: int, type: Type[_CT]) -> Any: ...
    def phys_read_ptr(self, ptr: Any) -> Any: ...
    def phys_write(self, addr: int, type: Type[_CT], value: Any): ...

class Process:
    def read(self, addr: int, type: Type[_CT]) -> Any: ...
    def read_ptr(self, ptr: Any) -> Any: ...
    def read_char_string(self, addr: int, max_bytes: Optional[int]) -> str: ...
    def read_wchar_string(self, addr: int, max_bytes: Optional[int]) -> bytes: ...
    def write(self, addr: int, type: Type[_CT], value: Any): ...
    def module_info_list(self) -> List[ModuleInfo]: ...
    def module_by_name(self, name: str) -> ModuleInfo: ...
    def info(self) -> ProcessInfo: ...

class ProcessInfo:
    def __init__(
        self,
        address: int,
        pid: int,
        state: ProcessState,
        name: str,
        path: str,
        command_line: str,
        sys_arch: ArchitectureIdent,
        proc_arch: ArchitectureIdent,
    ) -> self: ...
    @property
    def address(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def pid(self) -> int: ...
    @property
    def state(self) -> ProcessState: ...
    @property
    def path(self) -> str: ...
    @property
    def command_line(self) -> str: ...
    @property
    def sys_arch(self) -> ArchitectureIdent: ...
    @property
    def proc_arch(self) -> ArchitectureIdent: ...

class ModuleInfo:
    def __init__(
        self,
        name: str,
        address: int,
        base: int,
        size: int,
        path: str,
        process_addr: int,
        arch: ArchitectureIdent,
    ) -> self: ...
    @property
    def address(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def base(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def path(self) -> str: ...
    @property
    def parent_process(self) -> int: ...
    @property
    def arch(self) -> ArchitectureIdent: ...

class ProcessState:
    def __init__(self, alive: bool, exit_code: Optional[int]) -> self: ...
    def is_alive(self) -> bool: ...
    def is_dead(self) -> bool: ...
    def is_unknown(self) -> bool: ...

class ArchitectureIdent:
    def __init__(
        self, arch: str, page_size: Optional[int], address_extensions: Optional[bool]
    ) -> self: ...
    def is_alive(self) -> bool: ...
    def is_dead(self) -> bool: ...
    def is_unknown(self) -> bool: ...

class Pointer:
    def __init__(self, addr: int) -> self: ...
    def is_null(self) -> bool: ...
