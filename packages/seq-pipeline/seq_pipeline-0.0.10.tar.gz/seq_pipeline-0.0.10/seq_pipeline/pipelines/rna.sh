# --- VARIABLES ---
# > input_type = paired_fastq
BASE_PATH="{ path base_exists }"
CPU_CORES="{ integer > 0 }"
HISAT2_INDEX_PATH="{ path base_exists }"
BIGWIG_BIN_SIZE="{ integer > 0 }"
GENES_PATH="{ path exists }"
GENES_READ_SENS="{ choice any|forward|reverse }"


# --- MODULES ---
printf "\n\n%s\n" "# INITIALIZING ENVIRONMENT AND LOADING MODULES $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
module reset
module load python/3.9 java/13.0
module load fastqc/0.11 hisat2/2.2 samtools/1.12
virtualenv --no-download "$SLURM_TMPDIR/env.python.3"
source "$SLURM_TMPDIR/env.python.3/bin/activate" &&
pip install --no-index --quiet --upgrade pip &&
pip install --no-index --quiet numpy scipy matplotlib pandas deepTools==3.5.0
chmod +x "$SLURM_TMPDIR/env.python.3/bin/"* 2> /dev/null


# --- FUNCTIONS ---
function reads-count {
    case "$1" in
        fastq) echo "$(zcat "$2" | wc -l) / 4" | bc ;;
        fastqx2) echo "$(zcat "$2" | wc -l) / 4 * 2" | bc ;;
        bam) samtools idxstats "$2" | awk -F '\t' '{s+=$3}END{print s}' ;;
        *) echo "error: invalid format: $1" >&2 ; return 1 ;;
    esac
}
function reads-diff {
    local INITIAL="$(reads-count "$1" "$2")"
    local FINAL="$(reads-count "$3" "$4")"
    local PERCENT="$(echo "scale=2 ; $FINAL / $INITIAL * 100" | bc)"
    echo "reads: initial=$INITIAL final=$FINAL ($PERCENT% of initial)"
}


# --- 1 QC AND TRIMMING ---
printf "\n\n%s\n" "# QC AND TRIMMING: START $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
TRIM_READS_SCRIPT_PATH="$BASE_PATH.tmp.trim_reads.py"
cat << EOM | tr -d "[:space:]" | base64 -d | gzip -dc > "$TRIM_READS_SCRIPT_PATH"
H4sIANKKdWMCA6RX53LrthL+z6fY4W1kxtI1lV6U3nu5vXkgcUlhDAIMALqlPPvdBSAaoTVxzjk8xcRiy/dtAWg5jMZ6ELYfhXVYpHV/J8fj+0G4g5K741KZvpe6Py6HSXk5WrNH5zKxccc3Ozt1t7PQHyyKNtP3
csD53Yo97sT+sihSsPVOOLl/z+hO9lVn7CD8tvxDNVBM0WPtyjNQeIVqe9T/5MsPv6rZGragxLBrBSTl1+CoI3VnZhdFUfztg2+/++SrL8mi3JxvNqumWTUvlcXHH3z+Ncm6siwLb+UAjNxBZ80AzFghGAujkBZb
6ITz30MnFboCb0bcU2qVAoffT6gpRVBFa6FbEK0YPVpXgzewQ3jxT7B6E57/E7mTqD22RXS6QlJOZpaCaXULDGSgeLI7uoHRoiMzEJRoMSCMirIIUsPO+EO0L6KXBJdfWjIcxC1o4wlC9GGvouPVilqC0KOCN6Ep
CuqRaaAI7rUCYCVpX+px8g7iExYpAaPwB+J6nx7bBMp2cxbC7TB02IhtXcCJx1K+mDoHMhTITP4+Ei+Wkagh9geKBhHSaa/XUqksNHNkc6D8Otqkt3V/d9LSjF4aLdQZZbuFdco+161a2+bPm3od0FRkXycIsLuF
FjtB48EsBLFIlYo00iJrDfLGjh8BoI3GhW8k33jjLQ7S3wbffW95HK8wtQrxtF4KdYya2je2A3XcbH0yODeZB4XC8eBS/sixBj0NO8JvOqDhxNRR3KDHWpz05WgmZHcLZTcpVTLnuZ+BRQ/z8kg+mkUyXqRk7CdP
P9OToaNotEWQu5z/i4/wz4KdL4I9n4I9/3iwE8mGKmxILUNtnLzD+gkBKAIwSL1SqHt/CJMzmCuExaCH5hZBCu5gLCdYdPx/aGUq1iNxNy8uArcUuMV2GpXcC48Al4hjrKXRyF0x77VLNFXLKo/HD0fG3mg3DQg/
Nxv46F12PBBFewsjWTfn5/DFwn396AB5aBdDVHjcHzShVfDLU27MT0F6sq4/imcKkG7BOMpuFNf6CXvXUjQms+JWyM5Uvk5i8faHSV9C2JaarP3j83H+wisvvvzSOVQN5erdehFyoJBhYFPM02WbZ7tFyhTvTY4Z
o9gfIrCONPxJKL92Wrj5sJjn/Ukb8Y4I3K3C7Z9fDylpfNRTCw1jOA+NhqgY5u6cy/QqVHy8jYH0TmH9hCU7UPgDqnFWHa3UHoIofVuENsYbGfSvSP8KLWPJ9ZNoVoXqag0/pC+Sn+qiIA6D0fP5zc3p7URJy2G+
89E7f3nvo4/eoZ8fkYLGG9IVmcJ7f/noL+/Rn7+885d3Cv6gKQriQlm6MCPqim/DMxhMi9vSzt9UL52BdBf93baUukOWh58XUU9M3pDouefYw8UljY+rGR0EP7CNPyjH5a4kw7g0Fkp/v0TlELryB178+7Xmvz/5
+Nq89t+fyuBLdjEowQgocww17UaEsN1CAhl9BimhSY9FP1kdmmK9IJzILogUmdXS4IRmyOYSaJamlBjZBWFAyyXSXPryAUw2Xytzjbaq1/yNwqd4VdI3Rlk/8DOIXu4zH6ybQy7trqxBuDAXUW0RjjfWPMvVpmaX
u/I/N033n5tXduUyWmSzBLwknjCxoXHrwEY6jhL261ChPAEp20KS+G9CTfiBtcZWHVX0SijZRv8BxGsQGuQnqBjJGYRI3FWzt5rcpXJ4AkVny4QXk/ZSVeH9DBzSSlN/f2k0LfeGdrdNKtH1gXBG2T1NQjFxRwcH
6x59FSGn7KTt7ez5l2kOzmC1hWYhZuUJZ+GtRNVGZw8YuJyCo541+8snZ5K6g42TKCfoiOG/M4rQGRsp87zGyP/NeQt9Wz3gHqyiVOrkOCHKTLUJvx89lfl9s3zLSRlSu5QRIaBuYZAu3C9l/ayVcKkUo8VRWLwI
n/sX3MeuCpd0fD/j2ydbDeL2Ik5FlG//Yie8PwUU6ty65nww36qhi26me3Im8GaMF3HDbb9JXwopbE9uflg6/yllgTN7L+dwmRbHzKuzmNzM4Qwvh/gh6Xxp/IeU4DYgzQ0S6wdJCZceo81zF46g8/sY+R43aN6B
yzwG22aBD3u8IUOLa/4cYC62rNb/L+bKuhtFdv97PgXDfzEkmLad7hef4e77vr3RHI47sXt8J7Fz7PTqm+9+pZJw/QoETc+aWWyD9pJUJVXBZZqUeSXF20+X9JUKuJ+m/xtnDPh77zacq8YTrKtDOV9UoyiPHA7+
c74cFcI6P65Xh5uvOgYGswj89hhxXkBSvV61WZEeXNdqrtUBYuqyZjp5do0/YemT+QQcFcI/f33Yv3k4aqo0htP1Vk6M/dQU1qczFZ3+LS/IadFGQS5eE7qY4U1fFG0vGRdfRhyhVTDY5DJGG06Ndo5o55VmfZc0
XzJfLqrAeoejoIHKj2S4hyTN35BJDpqy9R6x9p2mNoFSv/chQH9JAo5lvV99va5JpnVC5s+ooXJ8BFvyDaJ8ekIPJ9s/Kun45//67S//EtuerWBXnL0FIJxmBM4L2KsokkcKYDHqiLgVlRBNR5OSvzcPt1wj1ax9
JL4ldAAaU8cIGvwBcN6cpZiligpve+GWBTSQN/MllR3pnxDedldrD6h2mMthTiiNrYeNNYO0HM7ss3BKZ7xcptYkTa0FqdDCC4yjEe6jgmlrM4no85SFNZL8NVfqxjlF4GU0s52TfVcNuKU6l3yFCtPkzJKLj8eU
2VHc+cspTZK31N26X90loFHH9FHB+IBnyxmMdhxn0YwBcRyGl8veRL5DIXUsrZ7P91p5yqedQBbNUkzHpyjXHsj6UNQC7EY198EKNwvxNTvScLwI3mUn5pBvtpTkFUailC8zIn/CUlS4MG45w+UBX+L8P5UeNHsl
dcTXBxHLYTiy/iLRZjJcf3bWrF4jnVjZD/jnl+c7IUpoBQa9MCix4zK1dlElRiiXDWxlWCCLeFnZNvfsbGueW48MTnVvcknjxt2G9a0bQMOiGI6MGhVCAa2q2VRM5oC+EChHDi4TUf5EW9oKcgYVgabRsLK/WVEE
9MZM8Ltk3ig1xnMAKTH9PQjoh+SKCw6kG8cOvfa4Gmf8o5ZuIpYXmbT/au7UZbSbtrvRuna7w5+8rM4iQdNat+lVioJS/mnTJ6AfH6RJINewVSAN3prkrbmtpEtwvPV6zxmmUF+UP9HEdVuL0CxSlwJmaHrpcxYg
iLQmvAHaq11BCakAJfnMj9Tne0zil023IaQR6hjSMs1QTudVdKXEIT5MCUIDXsl1jgtjmh1FA6GwFHLAafR/0XNOb5L1hBmLy/NlvByUVICXBG2sZrpMvoBK7ZP1+Sb2Te2gnKD6+3B4QxF5S1u02532LDgx6h7z
ndtWeG6MHHoZuh//hXGSE7ukBJcHXTJPp0pDErQclagLXT2MOewIoUGzcNS8fc9kq0wvna8sq7Z7+1tt9THUWT9Vh8Egv6x2r9dJmAdMZJ6EtHUm+jV5aDjfBDmrdkOnTOzk8Lh/pPXQWSmZrwbTghZPDE0fPEpH
Xnhvj4+JzGuBgDIYbf0NIekvWKpJo12F4iuJ45i2F7ZOALAjzIqMwEHRJsfC6NYNfyJ62JtixThH5f/eM3/er7tNzADbxPz/kwsgWtYlbbNeya5i9OxZ9HyZPck0E5ukWDoJiUZGNitaHUw1NsKPGNXMXBQ8d+Zo
dnx8t17vBHj5cncSA4TNBXQimEiMAI06VjdbOAbW6n3SHq9pmxZnO7r6/LwWtzz5qhDCyHyEH4aihdElWcvMQlWKa3MhCd0DDO/zL+ka39C3F/JxnTlNZRM5i2Bft6be8z0hfqzd9og0L4Ci/BSSrf5E1rs0YzBk
kkn9L7qF3HfCKLxKPK3LLENUdKW/COKqnGWR+1e+VVX0PzKEmTt/0JQ33NegvZca7VJ6wo6c077ebyrIaLqZrzjC0I8+jgZiUY0zGgdbhq/YbrxcM/YI+kYePA2JMNfABUu4W26XW8olzyvh7R15JhMogKZZ9Dyt
kFJbXsZGzgLsB6mc8ZqqTZcvp2E7WO+w5GUFBjNp8+31jqIESiGEBLMg+AcGVjyEQM1u1++ziF1NYOn4wIF8JHHodvtISJcOldsmjJwftIuHCNiKF4JkBmxexT+LU17gKcVFePNKbrItFXtecXccLlxXaTp68aa9
BT3nJjwpafO5tZj8I5avMm+p/qE6RniEsll2R28KbC5UQqu3OBi6mYEqY6GOx1cQTaZNFrYRtOm0NoMW/yUelh3ohIkmKj6vrdJecCCtvuVEKVXK3NRJyls3GyxDo0RTmR18lZu1BlAjqZG5bftQ+U6S8xX1QFcH
1lVIIPoSpizGD8gznYBd2muaBZrG3g00fU98NlOzCJs0dEW2jLpBpkPfkqrXOxFs2DchnXBx5/j03L/m+81XHXG115UsB8DsRqJVOXTjRQyA62KceqW3a5SGfJq49hvNHYZ62jh/dUfNz8WrxK+DGyXLpV8uVGbQ
8XGJGzofkKRpfrt9vT5iXTY0IaC26L3aM+ksN7rDF65eoK4CvVEWWN4667JV7MVOWF6iC19XMGUin2jqLiH1PgJzk0CP84PdwN0D4y3HeBI7gJIqvZAypv43c0EVqgs7HJmOX6oasYgS+CVt2ini+ud7vYHlWdtB
0094JIXaK0axmz42N8KI2zKq+Ly5MxtAlcNOzQk4b6XmiiNSNDa7+PSAKYXwKAlUAd1lFFYMWTvk7HJi2IcgqhrzXgyH6HBoSstjQBlDEZY/kH1p2M7kId1fDb3MXo1k1jSghR6q0dR7cG18AWV1ho9ci3MB26Qa
IsCShhsKkCIIoHvCypbA0SlaDJGHnYHsFFmaWcBjhtGPFNvRjkh6/oatEII1tsnp/D9QG87kzUTpfnrQcCTQSRB5eGL1jd3GeJwIXsz4L5TcQI1m6krvDltwIvTZ4JBC20vgcGEAFb+zzhjCRGt7i9AY9hL9Y8K5
k9pHPp2NvVsdj9Ev93RlT0i0DD6fVahdZNV1clzfbSgIVmvq5fApLOZECNSPdafmgA9D5gIYFYoR3lTEqGg//MRTdK13E/1MQ9zH1fHr0H/lujwQBbuk/tZBKjC953WjY0DbIxlTddut7kkpKv5IiCyij6OeB3QH
VNtayswq8eYFA2HfvKIenR7kkewfEudtz7JS6vzj9FQZqjYxICRUSqCeOaXk/1rfu//9jMrYx+3N/frxq72sZ8VhmdwhUV8xxFKBQFMuUVuFz5GGLSoUL7kUvMtLwURYeRStPSrr9zfrh8foF6vj+tfuK+lhswC8
kKB/xi2Xx9lqIpqkebsF4HODGlBJZ0KgSsEd3shIsuqAzczQa/O/88UkPIDGQ0XWhHEL9VEXb5P6m1zutqbFsoUD1jHL2kDioqUO5SVzpWKs6sJp0EJcppZw0vhIwntKNZMvXACpvymSHYT+8cT8X+4baIjaSXDW
Ag2Ch8qFKmEOSi32gR44uspHw51JY0A7rFoTBX/k/D8wB1HYkUZ2zMOWrMIJZSOIDC/39QnzpHxezPKFpwsxY8bLeD+EKVEHNOenJXhlzWiljO2ssrHssh49ab+/qznxsA03fmHfR41gypMTZFY9VZF8nVe8E6Pi
wfnFcfqmJrw8ScJSvRyQRX3aqRHpUc54ECNxApg6kEPt3QOaL3dkh0EqJ283Q19jHgt6iqqbrbgslkc1Z8SYBdiyFAclxapuUnjOuUAB5p12k95YVNbZnPHjsok3tCLZv+O4W7O2PNj9NgdTW2Y+CwVW/uYWtq2r
0S+n423imF2iKSQePxfRqoS6c+QPMCONDHIM7mHjK1DumcFsyHGrzM0k6+6nPSeDUN8snOeVHJJEAb5XRb+9zNDXR/iLMKO79Wmp/plF6p1ZEzdVj3JV++iaUstCXrBdySMx+PyEcQp63MYlVLbSetXNRdxo1KaH
WqdXiqj4vKc+ZICUuDOlfg8eYgOMDB+C0seipnM2MtIl1IBN1T7LPeoIOSPxCxCSTTydTiN4n0H4wGFEd2OElofaaWKbRBNxxPDZEoQVMQNguWRCq5gBeHON/K9N23k0AcMBYEJ0j46LG0w6x4Pd3Yk+ZThpHmXH
Q7DRq4fJE2beTRz9hz0sejFh+tIrzxhOr1+fr1/L9Q72ve5lqFgM7n21wblqYaELM8ZmIg/anuC6k7bVFRDlJrv9pDHXzbkcjgqojTV/NMGhJx/mUOJfdA5NRQVQM+uI8LjCp+Fxb5ojpBf8LOdltEhxi7cVB8T1
m1M0Qwt2zG19/kR3khS5j4LFQTNh3VnuJP5FnEULc5Tn8txf4Y7BhESx4TY8ClYj6hugjVcZT2TwAH0/5z8q4xG3DN1N+86YvfA+9gdRq3OvJeaQjsPjbmF9VwJnAfvm53WlI2ILwgRiodMVpBzm1nkWqhp7XNAU
hacREoU/emzyoxxIGrIekIwDBoYtv313Hczb22W1d0QQ4pO+yZ1RVsd99oxEL/9Br3ujC0+/pvPlgIeDFao4A6wnfUXFVpBfrLKCQNElZ5TFqSSeOYrO2xDHN/fJgRYG5UxJMRXkhlOMIrX9XUE2QLnztFCX4XyQ
If+1z4x1aSwGaYjgwBxVn/aQP2OeXfDY5Xs9YC+DADsPv4tL+r8dws+Q8KBd8OiHChVoOO0Qvxg4KyRc51W57WNJooHJWqfVwCfSCoWzuCyGuQjWeDa6ftWg5OOwJxD0suOh59O6TPek0bbM8tmGWjPS1glbOYPk
WGKkobSfHdM4bUnIN06T46T3wWpda8o7XCZPSwm1qECFSHovIixv8RVPjBHEGquchJeC4WTJ/+8ptQhLaPCkActtM1yEi3FvPDtalRNH77fMy/9CLmZAKd1J78beQi08sW0oOZuZgg8KP7hgqvLp0zoLyYOhS+A7
gT7XO0AFVKPXNIv/I0XWR/LUFV/p+uf9eqWHxHSovQP6AnIzOclN8fYJhygcF2wfVBs29Hi6bH+kik9sohbxbn8+7+YPyycajQoTFujyziq6Fj6wiWlJWyv3KxL0sHpX60ZYM9fF069iZii3ZNMulrcXBdehYfaB
d1VuqXOpm67k+/w6xGab6gmfo1KJPLe3Fjd90dF4hk1PopdXU88eOaOcX2SZ/1zf4/U3dydJAYw38euV3ic7b+OMRZMWR5w1r3cqeHtzxwIW8VU8RGAvBNhfviGFlVDQ3PeNSKyFxLmpATTi+SDmC8bUt+YB1iyL
Hj88rAuaroewrz329edj3zE2vsMOSCxejKNxKzTCJf3qhtNHEdM2xoEfon6zHrTBg9BolsAgxXycEAcmAK9vQwr6CrZxhO6ZEL6U7RtY5KPQkPeiDSrjQrOI3hKZRGm5DxeYPouk52f1LzD7QBf30sFRCtryqQve
5q9rt46va05IdS3PHEp24jgn+LfuqeCL/wLcGuHLhFYAAA==
EOM
python "$TRIM_READS_SCRIPT_PATH" -i "$BASE_PATH.r1.fastq.gz" "$BASE_PATH.r2.fastq.gz" -a "AGATCGGAAGAG" -p "$CPU_CORES"
rm "$TRIM_READS_SCRIPT_PATH"
fastqc --quiet -t "$CPU_CORES" "$BASE_PATH.r1.fastq.gz" "$BASE_PATH.r2.fastq.gz" "$BASE_PATH.trimmed.r1.fastq.gz" "$BASE_PATH.trimmed.r2.fastq.gz"
rm "$BASE_PATH.r1_fastqc.zip" "$BASE_PATH.r2_fastqc.zip" "$BASE_PATH.trimmed.r1_fastqc.zip" "$BASE_PATH.trimmed.r2_fastqc.zip"
[ -d "$BASE_PATH.qc" ] || mkdir "$BASE_PATH.qc"
mv "$BASE_PATH.r1_fastqc.html" "$BASE_PATH.qc/$(basename "$BASE_PATH").r1.qc.html"
mv "$BASE_PATH.r2_fastqc.html" "$BASE_PATH.qc/$(basename "$BASE_PATH").r2.qc.html"
mv "$BASE_PATH.trimmed.r1_fastqc.html" "$BASE_PATH.qc/$(basename "$BASE_PATH").trimmed.r1.qc.html"
mv "$BASE_PATH.trimmed.r2_fastqc.html" "$BASE_PATH.qc/$(basename "$BASE_PATH").trimmed.r2.qc.html"


# --- 2 ALIGNEMENT ---
printf "\n\n%s\n" "# ALIGNMENT: START $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
hisat2 -p "$CPU_CORES" --fr --no-unal --no-mixed --no-discordant -x "$HISAT2_INDEX_PATH" -1 "$BASE_PATH.trimmed.r1.fastq.gz" -2 "$BASE_PATH.trimmed.r2.fastq.gz" |
samtools fixmate -@ "$CPU_CORES" -m /dev/stdin "$BASE_PATH.bam"


# --- 3 SORTING ---
printf "\n\n%s\n" "# SORTING: START $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
mv "$BASE_PATH.bam" "$BASE_PATH.unsorted.bam"
samtools sort -@ "$CPU_CORES" -o "$BASE_PATH.bam" "$BASE_PATH.unsorted.bam"
samtools index -@ "$CPU_CORES" "$BASE_PATH.bam"
echo "aligned reads: $(reads-diff fastqx2 "$BASE_PATH.trimmed.r1.fastq.gz" bam "$BASE_PATH.bam")" >&2
rm "$BASE_PATH.unsorted.bam"


# --- 4 BIGWIG ---
printf "\n\n%s\n" "# BIGWIG: START $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
bamCoverage -b "$BASE_PATH.bam" -o "$BASE_PATH.cpm.bigwig" -bs "$BIGWIG_BIN_SIZE" --normalizeUsing BPM -p "$CPU_CORES"


# --- 5 GENE EXPRESSION ---
printf "\n\n%s\n" "# GENE EXPRESSION: START $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
GENE_EXPRESSION_SCRIPT_PATH="$BASE_PATH.tmp.gene_expression.py"
cat << EOM | tr -d "[:space:]" | base64 -d | gzip -dc > "$GENE_EXPRESSION_SCRIPT_PATH"
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
Z7GGVTsgVAAA
EOM
python "$GENE_EXPRESSION_SCRIPT_PATH" quantify -g "$GENES_PATH" -r "$BASE_PATH.bam" -o "$BASE_PATH.gene_expression.tsv" -s "$GENES_READ_SENS" -p "$CPU_CORES"
rm "$GENE_EXPRESSION_SCRIPT_PATH"


# --- DONE ---
printf "\n\n%s\n" "# DONE $(date '+%Y/%m/%d %H:%M:%S UTC%:::z')" >&2
