# coding: utf-8

"""
    Sidra API

    Sidra API  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraDataQualityApiPythonClient.api_client import ApiClient


class SidraDataQualityApiSReportReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_reports_absolute_name_get(self, absolute_name, **kwargs):  # noqa: E501
        """api_reports_absolute_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_absolute_name_get(absolute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str absolute_name: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAspNetCoreMvcContentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_reports_absolute_name_get_with_http_info(absolute_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_reports_absolute_name_get_with_http_info(absolute_name, **kwargs)  # noqa: E501
            return data

    def api_reports_absolute_name_get_with_http_info(self, absolute_name, **kwargs):  # noqa: E501
        """api_reports_absolute_name_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_absolute_name_get_with_http_info(absolute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str absolute_name: (required)
        :param str api_version: The requested API version
        :return: MicrosoftAspNetCoreMvcContentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['absolute_name', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reports_absolute_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'absolute_name' is set
        if ('absolute_name' not in params or
                params['absolute_name'] is None):
            raise ValueError("Missing the required parameter `absolute_name` when calling `api_reports_absolute_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'absolute_name' in params:
            path_params['absoluteName'] = params['absolute_name']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/reports/{absoluteName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MicrosoftAspNetCoreMvcContentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_reports_get(self, absolute_name, **kwargs):  # noqa: E501
        """api_reports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_get(absolute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str absolute_name: (required)
        :param bool include_sas:
        :param bool include_content:
        :param str api_version: The requested API version
        :return: DataQualityApiServicesExternalAzureModelsBlobFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_reports_get_with_http_info(absolute_name, **kwargs)  # noqa: E501
        else:
            (data) = self.api_reports_get_with_http_info(absolute_name, **kwargs)  # noqa: E501
            return data

    def api_reports_get_with_http_info(self, absolute_name, **kwargs):  # noqa: E501
        """api_reports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_get_with_http_info(absolute_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str absolute_name: (required)
        :param bool include_sas:
        :param bool include_content:
        :param str api_version: The requested API version
        :return: DataQualityApiServicesExternalAzureModelsBlobFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['absolute_name', 'include_sas', 'include_content', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'absolute_name' is set
        if ('absolute_name' not in params or
                params['absolute_name'] is None):
            raise ValueError("Missing the required parameter `absolute_name` when calling `api_reports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'absolute_name' in params:
            query_params.append(('absoluteName', params['absolute_name']))  # noqa: E501
        if 'include_sas' in params:
            query_params.append(('includeSas', params['include_sas']))  # noqa: E501
        if 'include_content' in params:
            query_params.append(('includeContent', params['include_content']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataQualityApiServicesExternalAzureModelsBlobFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_reports_list_entities_item_id_get(self, item_id, **kwargs):  # noqa: E501
        """api_reports_list_entities_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_list_entities_item_id_get(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: (required)
        :param int top:
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_reports_list_entities_item_id_get_with_http_info(item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_reports_list_entities_item_id_get_with_http_info(item_id, **kwargs)  # noqa: E501
            return data

    def api_reports_list_entities_item_id_get_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """api_reports_list_entities_item_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_list_entities_item_id_get_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str item_id: (required)
        :param int top:
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'top', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reports_list_entities_item_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `api_reports_list_entities_item_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'item_id' in params:
            path_params['itemId'] = params['item_id']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/reports/list/entities/{itemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_reports_list_get(self, provider_name, entity_name, top, **kwargs):  # noqa: E501
        """api_reports_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_list_get(provider_name, entity_name, top, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name: (required)
        :param str entity_name: (required)
        :param int top: (required)
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_reports_list_get_with_http_info(provider_name, entity_name, top, **kwargs)  # noqa: E501
        else:
            (data) = self.api_reports_list_get_with_http_info(provider_name, entity_name, top, **kwargs)  # noqa: E501
            return data

    def api_reports_list_get_with_http_info(self, provider_name, entity_name, top, **kwargs):  # noqa: E501
        """api_reports_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_reports_list_get_with_http_info(provider_name, entity_name, top, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name: (required)
        :param str entity_name: (required)
        :param int top: (required)
        :param str api_version: The requested API version
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'entity_name', 'top', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_reports_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `api_reports_list_get`")  # noqa: E501
        # verify the required parameter 'entity_name' is set
        if ('entity_name' not in params or
                params['entity_name'] is None):
            raise ValueError("Missing the required parameter `entity_name` when calling `api_reports_list_get`")  # noqa: E501
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `api_reports_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'entity_name' in params:
            query_params.append(('entityName', params['entity_name']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/reports/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
