from unittest import TestCase

from aio_dtls import math


class TestMath(TestCase):
    def test_sha1(self):
        data = math.p_hash('sha256', b'test', b'test', 48)
        data2 = math.p_hash('sha256', b'test', b'test', 48)
        self.assertEqual(data, data2)
        pass

    def test_tls(self):
        secret = bytes(bytearray([
            0xf4, 0x5e, 0x53, 0xb8, 0x44, 0x66, 0xd1, 0x62, 0x7c, 0x56, 0xf3, 0x96, 0x1c, 0x49, 0x4b, 0x06,
            0xe2, 0xe9, 0xf4, 0x7f, 0x98, 0xca, 0x13, 0x00, 0xa2, 0x28, 0x1c, 0x26, 0x58, 0x5e, 0x11, 0x18,
            0xf7, 0xe9, 0xbf, 0xa2, 0xdc, 0x29, 0xf8, 0x0a, 0x12, 0xd3, 0xee, 0xa7, 0x54, 0x22, 0x79, 0x24]))
        label = "key expansion".encode()
        random = bytes(bytearray([
            0x61, 0xf2, 0xf8, 0x60, 0xcb, 0x58, 0x23, 0xa4, 0x83, 0x7f, 0x42, 0xcb, 0xce, 0xbd, 0x8a, 0x45,
            0xce, 0x73, 0x84, 0x0c, 0xa6, 0xd6, 0x73, 0x0b, 0xde, 0xf0, 0x99, 0x84, 0xa4, 0x8d, 0x57, 0x27,
            0x61, 0xf2, 0xf8, 0x60, 0xa6, 0x0f, 0x64, 0xc6, 0xdd, 0xd9, 0xaf, 0x21, 0x5f, 0xa1, 0xb5, 0xbe,
            0x9b, 0x2e, 0x5b, 0x7a, 0xfb, 0xb5, 0x64, 0x39, 0x08, 0xf1, 0x0c, 0x42, 0xb1, 0x25, 0x30, 0xc9]))
        data = math.p_hash('sha256', secret, label + random, 96)
        print(data.hex(" "))

    def test_tls2(self):
        secret = b'J*wAd4\xb3\xb1\xbd\xcf\x01\xf5j\x88\x18.\xaav\xb6\xb5h\xa5\x03m/u\xb6\xf6\xc56\xecO\x18\xbe\xb6\x16\xbd\xd1I\xa7\xbe\xf3\xfdA\xab\xd0\xbd\xa0'
        label = "key expansion".encode()
        seed1 = b'a\xf5\x1cq\x95\xf3Y3\xe8D\xe5E[\xce\x0c\xefil\xf9\xad\xb9\x188Py\x15\x1a\x01m"J\x94'
        seed2 = b'a\xf5\x1cq\x9a|\x19\tsS\xed\x83\xe1\x87\x1cQ\xf1\x9a\x83z\xe6\xa1@\xa8\x8b\x05\x94\xb8\x12<\x99V'
        secret0 = "4A 2A 77 41 64 34 B3 B1 BD CF 01 F5 6A 88 18 2E AA 76 B6 B5 68 A5 03 6D 2F 75 B6 F6 C5 36 EC 4F 18 BE B6 16 BD D1 49 A7 BE F3 FD 41 AB D0 BD A0"
        label0 = "6B 65 79 20 65 78 70 61 6E 73 69 6F 6E"
        seed0 = "61 F5 1C 71 95 F3 59 33 E8 44 E5 45 5B CE 0C EF 69 6C F9 AD B9 18 38 50 79 15 1A 01 6D 22 4A 94 61 F5 1C 71 9A 7C 19 09 73 53 ED 83 E1 87 1C 51 F1 9A 83 7A E6 A1 40 A8 8B 05 94 B8 12 3C 99 56"
        data0 = "9E B3 D3 E8 0F 58 81 73 5B 34 85 59 4A E7 B0 B5 6E 52 10 BE D9 2C 36 E1 CD 7C E6 F7 9B 88 BD C8 2A 44 00 51 19 91 CA C7 21 67 C2 3F A5 DD 79 CC 80 CD A2 82 E2 F1 9A 1E B5 D4 89 BE 35 9C D2 4D 97 CC 73 F2 69 A1 B6 24 0D D9 45 F7 A3 DC 00 02 F8 B4 C3 AD 73 12 D8 E2 AC B4 9D 00 E8 B5 CA A9"
        self.assertEqual(secret0, secret.hex(" ").upper())
        self.assertEqual(label0, label.hex(" ").upper())
        self.assertEqual(seed0, (seed1+ seed2).hex(" ").upper())
        data = math.p_hash('sha256', secret, label + seed2 + seed1, 96)
        self.assertEqual(data0, data.hex(" ").upper())
        # print("secret 0x", ", 0x".join(secret.hex(" ").split(" ")))
        # print("label 0x", ", 0x".join(label.hex(" ").split(" ")))
        # print("seed 0x", ", 0x".join(seed.hex(" ").split(" ")))
        print(data.hex(" "))
        pass

    def test_tls3(self):
        secret = bytes(bytearray([
            0xf4, 0x5e, 0x53, 0xb8, 0x44, 0x66, 0xd1, 0x62, 0x7c, 0x56, 0xf3, 0x96, 0x1c, 0x49, 0x4b, 0x06,
            0xe2, 0xe9, 0xf4, 0x7f, 0x98, 0xca, 0x13, 0x00, 0xa2, 0x28, 0x1c, 0x26, 0x58, 0x5e, 0x11, 0x18,
            0xf7, 0xe9, 0xbf, 0xa2, 0xdc, 0x29, 0xf8, 0x0a, 0x12, 0xd3, 0xee, 0xa7, 0x54, 0x22, 0x79, 0x24]))
        label = "key expansion".encode()
        random = bytes(bytearray([
            0x61, 0xf2, 0xf8, 0x60, 0xcb, 0x58, 0x23, 0xa4, 0x83, 0x7f, 0x42, 0xcb, 0xce, 0xbd, 0x8a, 0x45,
            0xce, 0x73, 0x84, 0x0c, 0xa6, 0xd6, 0x73, 0x0b, 0xde, 0xf0, 0x99, 0x84, 0xa4, 0x8d, 0x57, 0x27,
            0x61, 0xf2, 0xf8, 0x60, 0xa6, 0x0f, 0x64, 0xc6, 0xdd, 0xd9, 0xaf, 0x21, 0x5f, 0xa1, 0xb5, 0xbe,
            0x9b, 0x2e, 0x5b, 0x7a, 0xfb, 0xb5, 0x64, 0x39, 0x08, 0xf1, 0x0c, 0x42, 0xb1, 0x25, 0x30, 0xc9]))
        data = math.p_hash2('sha256', secret, [label, random], 128)
        print(data.hex(" "))
        pass
