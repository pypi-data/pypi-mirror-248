# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_core.ipynb.

# %% auto 0
__all__ = ['tnew', 'imod', 'itry']

# %% ../nbs/01_core.ipynb 5
from importlib import import_module

# %% ../nbs/01_core.ipynb 7
from types import ModuleType, MethodWrapperType, BuiltinFunctionType, NoneType
from typing import (Type, Union, Tuple, Callable, ForwardRef, Optional, TypeVar, ParamSpec, TypeGuard, TypeAlias)

# %% ../nbs/01_core.ipynb 8
from .atyp import G, T, P, TypeLike, GuardFunc

# %% ../nbs/01_core.ipynb 10
def tnew(
    n: str = '', 
    b: Union[Tuple[type, ...], type] = tuple(), 
    d: dict = dict(), 
    *, 
    c: Optional[type] = None, 
    **kwargs
) -> type:
    '''
    Create a new type using type.__new__.

    Parameters
    ----------
    n : str
        The name of the type.

    b : Union[Tuple[type, ...], type]

        A tuple containing base classes of the new type, or a single base class.
    d : dict
        A dictionary containing attributes and methods of the new type.

    c : Optional[type]
        A metaclass for the new type, defaults to None.

    **kwargs
        Additional keyword arguments to be included in the type's dictionary.

    Returns
    -------
    type
        The newly created type.

    Notes
    -----
    Calls `tnew` is equvialent to either

    type(name, bases, dict) : 
        if no class `c` is provided, or

    type.__new__(c, name, bases, dict) : 
        if a class `c` is provided.
    '''
    d.update(kwargs)
    if not isinstance(b, tuple): b = tuple((b, ))
    return type(n, tuple(b), d) if c is None else type.__new__(c, n, tuple(b), d)


# %% ../nbs/01_core.ipynb 11
def imod(
    name: str, 
    attr: Optional[str] = None,
    bases: Union[Tuple[type, ...], type] = tuple(), 
    namespace: dict = dict(),
    default: T = None,
    **kwargs
) -> Union[type, T]:
    '''
    Import a specific attribute from a module or return a default value if import fails.

    Parameters
    ----------
    name : str
        The name of the module to import from.
    attr : Optional[str]
        The name of the attribute to import from the module, defaults to None.
    bases : Union[Tuple[type, ...], type]
        Base classes for creating a new type if import fails and default is None.
    namespace : dict
        A namespace dictionary for creating a new type.
    default : Optional[type]
        A default value to return if import fails.
    **kwargs
        Additional keyword arguments passed to tnew.

    Returns
    -------
    Optional[type]
        The imported attribute, or the default value, or a new type created using tnew.
    '''
    cls = kwargs.pop('cls', None)
    if not isinstance(bases, tuple): bases = (bases, )
    
    try: 
        mod = import_module(name)
        return getattr(mod, attr) if attr is not None else mod
    except (ImportError, AttributeError):
        if default is not None: return default
        try: return namespace.get(attr, tnew(attr, bases, namespace, c=cls, **kwargs))
        except TypeError: return default

# %% ../nbs/01_core.ipynb 12
def itry(
    name: str, 
    *attrs: str, 
    bases: Union[Tuple[type, ...], type] = tuple(), 
    namespace: dict = dict(), 
    **kwargs
) -> Tuple[Union[type, T], ...]:
    '''
    Try to import multiple attributes from a module, returning a tuple of results.

    Parameters
    ----------
    name : str
        The name of the module to import from.

    attrs : str
        Variable number of attribute names to import from the module.

    bases : Union[Tuple[type, ...], type]
        Base classes for creating new types if import fails.

    namespace : dict
        A namespace dictionary for creating new types.

    **kwargs
        Additional keyword arguments passed to imod.

    Returns
    -------
    Tuple[Optional[type], ...]
        A tuple of the imported attributes or default values.
    '''
    return tuple(imod(name, attr, bases, namespace, **kwargs) for attr in attrs)  
