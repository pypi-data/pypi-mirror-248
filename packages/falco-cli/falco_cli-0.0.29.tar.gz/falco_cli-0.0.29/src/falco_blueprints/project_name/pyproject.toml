[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ project_name }}"
version = "0.1.0"
description = ''
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Tobi DEGNON", email = "tobidegnon@proton.me" }]
dependencies = [
  "Pillow>=10.1.0",
  "hiredis>=2.2.3",
  "redis>=5.0.1",
  "boto3>=1.26.160",
  "granian>=0.6",
  "sentry-sdk>=1.26.0",
  "whitenoise[brotli]>=6.5.0",
  "psycopg[c]",
  "django[argon2]>=4.2.0,<5.0",
  "django-environ>=0.10.0",
  "django-model-utils>=4.3.1",
  "django-allauth>=0.54.0",
  "django-template-partials>=23.4",
  "django-tailwind-cli>=2.7.2",
  "django-extensions>=3.2.3",
  "django-htmx>=1.15.0",
  "django-anymail>=10.0",
  "django-browser-reload>=1.10.0",
  "django-debug-toolbar>=4.1.0",
  "django-fastdev>=1.7.3",
]

[tool.hatch.envs.default]
dependencies = ["dj-notebook>=0.6.1", "Werkzeug[watchdog]>=3.0.1"]

[tool.hatch.envs.default.scripts]
server = "python manage.py tailwind runserver {args}"
migrate = "python manage.py migrate {args}"
makemigrations = "python manage.py makemigrations {args}"
makesuperuser = "python manage.py makesuperuser"
reset-db = "python manage.py reset_db --noinput"
shell = "python manage.py shell_plus {args}"
reset-migrations = ["falco rm-migrations", "makemigrations"]

[[tool.hatch.envs.all.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest>=7.4.0",
  "pytest-django>=4.5.2",
  "pytest-sugar>=0.9.7",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.lint]
dependencies = [
  "pyright>=1.1.340",
  "curlylint>=0.13.1",
  "reorder-python-imports>=3.12.0",
  "djhtml>=3.0.6",
  "ruff>=0.1.8",
  "pyupgrade>=3.15.0",
  "django-upgrade>=1.15.0",
  "autoflake>=2.2.1",
]

[tool.hatch.envs.lint.scripts]
run-pyright = "pyright {args:.}"
run-format = "hatch fmt --formatter"
run-autoflake = "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --expand-star-imports --exclude=.*/__init__.py {args:.}"
run-reorder-python-imports = "reorder-python-imports config/*.py {args:./*/*/*.py}"
run-ruff = "ruff check --quiet --fix --exit-non-zero-on-fix {args:.}"
run-curlylint = "curlylint {args:.}"
run-djhtml = "djhtml --tabwidth 4 {args:.}"
run-pyupgrade = "pyupgrade --py311-plus {args}"
run-all-pyupgrade = "git ls-files -- '*.py' | xargs pyupgrade --py311-plus"
run-django-upgrade = "django-upgrade --target-version 4.2 {args}"
run-all-django-upgrade = "git ls-files -- '*.py' | xargs django-upgrade --target-version 4.2"
python = [
  "run-pyright",
  "run-format",
  "run-reorder-python-imports",
  "run-autoflake",
  "run-ruff",
  "run-all-pyupgrade",
  "run-all-django-upgrade",
]
templates = ["run-curlylint", "run-djhtml"]
all = ["python", "templates"]

[tool.pyright]
typeCheckingMode = "basic"

[tool.curlylint]
include = '\.(html|jinja)$'
exclude = '''
(
  /(
      \.eggs           # exclude a few common directories in the root of the project
    | \.git
    | \.venv
    | \.ruff_cache
  )/
  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project
)
'''

[tool.curlylint.rules]
indent = 4
aria_role = true
django_forms_rendering = true
image_alt = true
meta_viewport = true
no_autofocus = true
tabindex_no_positive = true

[tool.coverage.run]
source_pkgs = ["{{ project_name }}", "tests"]
branch = true
parallel = true
omit = ["src/{{ project_name }}/__about__.py"]

[tool.coverage.paths]
{{ project_name }} = ["src/{{ project_name }}", "*/{{ project_name }}/src/{{ project_name }}"]
tests = ["tests", "*/{{ project_name }}/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
