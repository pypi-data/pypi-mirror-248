[tool.poetry]
name = "flex-docker"
version = "0.2.2"
description = "Flex docker is a utility wrapper around docker and docker-compose commands providing defaults values for projects"

license = "MIT"

authors = [
    "George Babarus <george.babarus@gmail.com>"
]

readme = 'README.md'

repository = "https://github.com/a42ss/flex-docker"
homepage = "https://github.com/a42ss/flex-docker"

keywords = ['docker-compose', 'docker', 'flex-cli', 'flex-docker', 'flex-docker-compose']

packages = [
    { include = "flex_docker", from = "src"  },
    { include = "flex_docker_compose", from = "src"  },
]

[tool.poetry.dependencies]
python =  ">=3.8, <4.0"

flex-cli = { version = "^0.3" }

[tool.poetry.extras]

[tool.poetry.dev-dependencies]

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinxcontrib-httpdomain = "*"
sphinx_rtd_theme = "*"
recommonmark = "*"
m2r = "*"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
poetry = "^1.3"
poetry2setup = "^1.1.0"
toml = "*"

# Build tools
build = "*"
twine = "*"
invoke = "*"
pipreqs = "*"
flake8 = "*"
isort = "*"
black = "*"
mypy = "*"
bandit = "*"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
mock = "*"
coverage = {extras = ["toml"], version = ">=6.4.4,<8.0.0"}

[tool.poetry.group.poetry]
optional = true

[tool.poetry.group.poetry.dependencies]
poetry = "^1.3"
poetry2setup = "^1.1.0"

[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/legacy/"
priority = "primary"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.coverage.run]
relative_files = true

[tool.poetry.scripts]
flex-docker = 'lcli.__main__:main'
flex-docker-compose = 'flex_docker_compose.__main__:main'

[tool.poetry.plugins]

[tool.bandit]
exclude = "src/test"
skips = ["B602", "B605", "B603", "B301", "B403", "B404"]

[virtualenvs]
create = true
in-project = true

[tool.pytest.ini_options]
pythonpath = [
  "src"
]

[tool.mypy]
explicit_package_bases = true
exclude = [
]