[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "audio-separator"
version = "0.10.2"
requires-python = ">=3.9"
description = "Easy to use vocal separation on CLI or as a python package, using the amazing MDX-Net models from UVR trained by @Anjok07"
authors = ["Andrew Beveridge <andrew@beveridge.uk>"]
license = "MIT"
readme = "README.md"
packages = [{include = "audio_separator"}]
homepage = "https://github.com/karaokenerds/python-audio-separator"
repository = "https://github.com/karaokenerds/python-audio-separator"
documentation = "https://github.com/karaokenerds/python-audio-separator/blob/main/README.md"

[tool.poetry.dependencies]
python = ">=3.9"
onnx = ">=1.14"
numpy = ">=1.23"
librosa = ">=0.9"
torch = ">=2"
wget = ">=3"
six = ">=1.16"
pydub = ">=0.25"
onnxruntime = { version = ">=1.15", optional = true }
onnxruntime-gpu = { version = ">=1.15", optional = true }
onnxruntime-silicon = { version = ">=1.15", optional = true }

[tool.poetry.extras]
cpu = ["onnxruntime"]
gpu = ["onnxruntime-gpu"]
silicon = ["onnxruntime-silicon"]

[tool.poetry.scripts]
audio-separator = 'audio_separator.utils.cli:main'

[tool.poetry.group.dev.dependencies]
black = ">=23"

[tool.black]
line-length = 140

[tool.poetry2conda]
name = "audio-separator"

[tool.whl2conda]
# Overrides name of conda package generated by whl2conda
# If empty, default is taken from project.name
conda-name = "audio-separator"
# The default directory for whl2conda to look for wheels.
# Specified relative to the project root.
wheel-dir = "dist"
# The default directory for writing conda packages
# If not specified, this will be the wheel directory.
out-dir = "dist"
# The default output conda package format.
# Valid values are:   "V1" / ".tar.bz2": original .tar.bz2 package format
#    "V2" / ".conda": new V2 .conda package format
#    "TREE":  output package as directory tree (debug)
conda-format = "V2"
# An optional list of pypi/conda rename patterns
# Each entry should be a two element list of the form
#    ["<pypi-name-pattern>", "<conda-name>"]
# Where <pypi-name-pattern> may either just be the pypi package name
# or is a Python regular expression that will match the full name,and where <conda-name> can contain subsitution expression,
# For example, to rename all `acme-<foo>` packages to `acme.<foo>`:
#    ["acme-(.*)", "acme.$1"]
dependency-rename = [["torch", "pytorch"]]
# An optional list of extra conda dependencies.
extra-dependencies = []
