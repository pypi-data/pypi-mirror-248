from ... import ontology, utils

def create_aiu_task_pattern(session):
    title = "Task"
    task_pattern = ontology.IdentityTaskPattern(session, title)
    cont = task_pattern.set_content("Content", field=None)
    cont.add_link_field("UBL")
    cont.add_link_field("Storage Template")
    cont.add_link_field("Field Map")
    cont.add_structure_representation("Format")
    cont.add_semantic_representation("Description")
    purpose_desc = task_pattern.add_description("Purpose", field={'title': 'Description', 'is_link': False})
    purpose_desc.add_structure_representation("Format")
    purpose_desc.add_semantic_representation("Meaning")
    utility_desc = task_pattern.add_description("General Utility", field={'title': 'Description', 'is_link': False})
    utility_desc.add_structure_representation("Format")
    utility_desc.add_semantic_representation("Meaning")
    packaging = task_pattern.add_packaging("Resource Identifier", field={'title': 'Value', 'is_link': False})
    packaging.add_structure_representation("Format")
    packaging.add_semantic_representation("Description")
    access_rights = task_pattern.add_access_rights("Access Rights", field={'title': 'Description'})
    access_rights.add_structure_representation("Format")
    access_rights.add_semantic_representation("Meaning")
    operating = task_pattern.add_context("Operating Mode", field={'title': 'Value', 'is_link': False})
    operating.add_structure_representation("Format")
    operating.add_semantic_representation("Description")
    persistence = task_pattern.add_context("Persistence Mode", field={'title': 'Value', 'is_link': False})
    persistence.add_structure_representation("Format")
    persistence.add_semantic_representation("Description")
    trigger = task_pattern.add_context("Downstream Trigger Mode", field={'title': 'Value', 'is_link': False})
    trigger.add_structure_representation("Format")
    trigger.add_semantic_representation("Description")
    
    # These fields below are to be set at runtime as part of the workflow-generated Task Record
    start = task_pattern.add_fixity("Start Time", field={'title': 'Timestamp', 'is_link': False})
    start.add_structure_representation("Format")
    start.add_semantic_representation("Description")
    end = task_pattern.add_fixity("End Time", field={'title': 'Timestamp', 'is_link': False})
    end.add_structure_representation("Format")
    end.add_semantic_representation("Description")
    success = task_pattern.add_fixity("Execution Success", field={'title': 'Value', 'is_link': False})
    success.add_structure_representation("Format")
    success.add_semantic_representation("Description")
    payload = task_pattern.add_fixity("Execution Payload", field={'title': 'Value', 'is_link': False})
    payload.add_structure_representation("Format")
    payload.add_semantic_representation("Description")
    input = task_pattern.add_provenance("Input Message", field={'title': 'Payload', 'is_link': False})
    input.add_structure_representation("Format")
    input.add_semantic_representation("Description")
    reference = task_pattern.add_reference("Execution ID")
    reference.add_structure_representation("Format")
    reference.add_semantic_representation("Description")
    
    return task_pattern

def create_aic_task_pattern(session):
    title = "Task"
    task_pattern = ontology.TransformationTaskPattern(session, title)
    cont = task_pattern.set_content("Content", field=None)
    cont.add_link_field("UBL")
    cont.add_link_field("Storage Template")
    cont.add_link_field("Field Map")
    cont.add_structure_representation("Format")
    cont.add_semantic_representation("Description")
    purpose_desc = task_pattern.add_description("Purpose", field={'title': 'Description', 'is_link': False})
    purpose_desc.add_structure_representation("Format")
    purpose_desc.add_semantic_representation("Meaning")
    utility_desc = task_pattern.add_description("General Utility", field={'title': 'Description', 'is_link': False})
    utility_desc.add_structure_representation("Format")
    utility_desc.add_semantic_representation("Meaning")
    packaging = task_pattern.add_packaging("Resource Identifier", field={'title': 'Value', 'is_link': False})
    packaging.add_structure_representation("Format")
    packaging.add_semantic_representation("Description")
    access_rights = task_pattern.add_access_rights("Access Rights", field={'title': 'Description'})
    access_rights.add_structure_representation("Format")
    access_rights.add_semantic_representation("Meaning")
    operating = task_pattern.add_context("Operating Mode", field={'title': 'Value', 'is_link': False})
    operating.add_structure_representation("Format")
    operating.add_semantic_representation("Description")
    persistence = task_pattern.add_context("Persistence Mode", field={'title': 'Value', 'is_link': False})
    persistence.add_structure_representation("Format")
    persistence.add_semantic_representation("Description")
    trigger = task_pattern.add_context("Downstream Trigger Mode", field={'title': 'Value', 'is_link': False})
    trigger.add_structure_representation("Format")
    trigger.add_semantic_representation("Description")
    
    # These fields below are to be set at runtime as part of the workflow-generated Task Record
    start = task_pattern.add_fixity("Start Time", field={'title': 'Timestamp', 'is_link': False})
    start.add_structure_representation("Format")
    start.add_semantic_representation("Description")
    end = task_pattern.add_fixity("End Time", field={'title': 'Timestamp', 'is_link': False})
    end.add_structure_representation("Format")
    end.add_semantic_representation("Description")
    success = task_pattern.add_fixity("Execution Success", field={'title': 'Value', 'is_link': False})
    success.add_structure_representation("Format")
    success.add_semantic_representation("Description")
    payload = task_pattern.add_fixity("Execution Payload", field={'title': 'Value', 'is_link': False})
    payload.add_structure_representation("Format")
    payload.add_semantic_representation("Description")
    input = task_pattern.add_provenance("Input Message", field={'title': 'Payload', 'is_link': False})
    input.add_structure_representation("Format")
    input.add_semantic_representation("Description")
    reference = task_pattern.add_reference("Execution ID")
    reference.add_structure_representation("Format")
    reference.add_semantic_representation("Description")
    
    return task_pattern

def create_dip_task_pattern(session):
    title = "Task"
    task_pattern = ontology.OutputTaskPattern(session, title)
    cont = task_pattern.set_content("Content", field=None)
    cont.add_link_field("Transform Data UBL")
    cont.add_link_field("Deliver Data UBL")
    cont.add_link_field("Storage Template")
    cont.add_link_field("Field Map")
    cont.add_structure_representation("Format")
    cont.add_semantic_representation("Description")
    purpose_desc = task_pattern.add_description("Purpose", field={'title': 'Description', 'is_link': False})
    purpose_desc.add_structure_representation("Format")
    purpose_desc.add_semantic_representation("Meaning")
    utility_desc = task_pattern.add_description("General Utility", field={'title': 'Description', 'is_link': False})
    utility_desc.add_structure_representation("Format")
    utility_desc.add_semantic_representation("Meaning")
    packaging = task_pattern.add_packaging("Resource Identifier", field={'title': 'Value', 'is_link': False})
    packaging.add_structure_representation("Format")
    packaging.add_semantic_representation("Description")
    access_rights = task_pattern.add_access_rights("Access Rights", field={'title': 'Description' })
    access_rights.add_structure_representation("Format")
    access_rights.add_semantic_representation("Meaning")
    operating = task_pattern.add_context("Operating Mode", field={'title': 'Value', 'is_link': False})
    operating.add_structure_representation("Format")
    operating.add_semantic_representation("Description")
    persistence = task_pattern.add_context("Persistence Mode", field={'title': 'Value', 'is_link': False})
    persistence.add_structure_representation("Format")
    persistence.add_semantic_representation("Description")
    trigger = task_pattern.add_context("Downstream Trigger Mode", field={'title': 'Value', 'is_link': False})
    trigger.add_structure_representation("Format")
    trigger.add_semantic_representation("Description")
    
    # These fields below are to be set at runtime as part of the workflow-generated Task Record
    start = task_pattern.add_fixity("Start Time", field={'title': 'Timestamp', 'is_link': False})
    start.add_structure_representation("Format")
    start.add_semantic_representation("Description")
    end = task_pattern.add_fixity("End Time", field={'title': 'Timestamp', 'is_link': False})
    end.add_structure_representation("Format")
    end.add_semantic_representation("Description")
    success = task_pattern.add_fixity("Execution Success", field={'title': 'Value', 'is_link': False})
    success.add_structure_representation("Format")
    success.add_semantic_representation("Description")
    payload = task_pattern.add_fixity("Execution Payload", field={'title': 'Value', 'is_link': False})
    payload.add_structure_representation("Format")
    payload.add_semantic_representation("Description")
    input = task_pattern.add_provenance("Input Message", field={'title': 'Payload', 'is_link': False})
    input.add_structure_representation("Format")
    input.add_semantic_representation("Description")
    reference = task_pattern.add_reference("Execution ID")
    reference.add_structure_representation("Format")
    reference.add_semantic_representation("Description")
    
    return task_pattern

def create_ubl_pattern(session):
    title = "UBL"
    ubl_pattern = ontology.UBLPattern(session, title)
    field_content = ubl_pattern.set_content("Runtime Fields", field=None)
    field_content.add_structure_representation("Content Format")
    field_content.add_semantic_representation("Content Description")
    field_content.add_value_field('{{placeholder1}}', labels=["output field"])
    field_content.add_value_field('{{placeholder2}}', labels=["input field"])
    packaging = ubl_pattern.add_packaging("Resource Identifier", field={'title': 'Value', 'is_link': False})
    packaging.add_structure_representation("Format")
    packaging.add_semantic_representation("Description")
    desc = ubl_pattern.add_description("Description")
    desc.add_structure_representation("Format")
    desc.add_semantic_representation("Meaning")
    access = ubl_pattern.add_access_rights("Access Rights")
    access.add_structure_representation("Format")
    access.add_semantic_representation("Meaning")
    ctx = ubl_pattern.add_context("Context")
    ctx.add_structure_representation("Format")
    ctx.add_semantic_representation("Description")
    fixity = ubl_pattern.add_fixity("Fixity")
    fixity.add_structure_representation("Format")
    fixity.add_semantic_representation("Description")
    prov = ubl_pattern.add_provenance("Provenance")
    prov.add_structure_representation("Format")
    prov.add_semantic_representation("Description")
    ref = ubl_pattern.add_reference("Reference")
    ref.add_structure_representation("Format")
    ref.add_semantic_representation("Description")
    return ubl_pattern

def create_field_map_pattern(session):
    title = "Field Map"
    pattern = ontology.FieldMapPattern(session, title)
    
    content = pattern.set_content("Field Map Entries")
    content.add_structure_representation("Format")
    content.add_semantic_representation("Description")

    ctx = pattern.add_context("Context")
    ctx.add_structure_representation("Format")
    ctx.add_semantic_representation("Description")

    desc = pattern.add_description("Description")
    desc.add_structure_representation("Format")
    desc.add_semantic_representation("Meaning")

    pkg = pattern.add_packaging("Packaging")
    pkg.add_structure_representation("Format")
    pkg.add_semantic_representation("Description")

    access = pattern.add_access_rights("Access Rights")
    access.add_structure_representation("Format")
    access.add_semantic_representation("Meaning")
    fixity = pattern.add_fixity("Fixity")
    fixity.add_structure_representation("Format")
    fixity.add_semantic_representation("Description")
    prov = pattern.add_provenance("Provenance")
    prov.add_structure_representation("Format")
    prov.add_semantic_representation("Description")
    ref = pattern.add_reference("Reference")
    ref.add_structure_representation("Format")
    ref.add_semantic_representation("Description")
    return pattern