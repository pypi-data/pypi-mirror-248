"use strict";(self.webpackChunknonebot=self.webpackChunknonebot||[]).push([[693],{35318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(27378);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(n),u=l,k=s["".concat(p,".").concat(u)]||s[u]||c[u]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},46745:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(25773),l=(n(27378),n(35318));const r={sidebar_position:3,description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528"},i="Alconna \u54cd\u5e94\u89c4\u5219",o={unversionedId:"best-practice/alconna/matcher",id:"version-2.1.1/best-practice/alconna/matcher",title:"Alconna \u54cd\u5e94\u89c4\u5219",description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528",source:"@site/versioned_docs/version-2.1.1/best-practice/alconna/matcher.md",sourceDirName:"best-practice/alconna",slug:"/best-practice/alconna/matcher",permalink:"/website/docs/2.1.1/best-practice/alconna/matcher",draft:!1,editUrl:"https://github.com/nonebot/nonebot2/edit/master/website/versioned_docs/version-2.1.1/best-practice/alconna/matcher.md",tags:[],version:"2.1.1",lastUpdatedBy:"noneflow[bot]",lastUpdatedAt:1703476663,formattedLastUpdatedAt:"2023\u5e7412\u670825\u65e5",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"\u54cd\u5e94\u89c4\u5219\u7684\u4f7f\u7528"},sidebar:"tutorial",previous:{title:"Alconna \u547d\u4ee4\u89e3\u6790",permalink:"/website/docs/2.1.1/best-practice/alconna/command"},next:{title:"\u914d\u7f6e\u9879",permalink:"/website/docs/2.1.1/best-practice/alconna/config"}},p={},m=[{value:"\u54cd\u5e94\u5668\u4f7f\u7528",id:"\u54cd\u5e94\u5668\u4f7f\u7528",level:2},{value:"\u4f9d\u8d56\u6ce8\u5165",id:"\u4f9d\u8d56\u6ce8\u5165",level:2},{value:"\u6d88\u606f\u6bb5\u6807\u6ce8",id:"\u6d88\u606f\u6bb5\u6807\u6ce8",level:2},{value:"\u6761\u4ef6\u63a7\u5236",id:"\u6761\u4ef6\u63a7\u5236",level:2}],d={toc:m},s="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"alconna-\u54cd\u5e94\u89c4\u5219"},"Alconna \u54cd\u5e94\u89c4\u5219"),(0,l.kt)("p",null,"\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u793a\u4f8b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from nonebot_plugin_alconna.adapters.onebot12 import Image\nfrom nonebot_plugin_alconna import At, AlconnaMatches, on_alconna\nfrom arclet.alconna import Args, Option, Alconna, Arparma, MultiVar, Subcommand\n\nalc = Alconna(\n    ["/", "!"],\n    "role-group",\n    Subcommand(\n        "add",\n        Args["name", str],\n        Option("member", Args["target", MultiVar(At)]),\n    ),\n    Option("list"),\n    Option("icon", Args["icon", Image])\n)\nrg = on_alconna(alc, auto_send_output=True)\n\n\n@rg.handle()\nasync def _(result: Arparma = AlconnaMatches()):\n    if result.find("list"):\n        img = await gen_role_group_list_image()\n        await rg.finish(Image(img))\n    if result.find("add"):\n        group = await create_role_group(result.query[str]("add.name"))\n        if result.find("add.member"):\n            ats = result.query[tuple[At, ...]]("add.member.target")\n            group.extend(member.target for member in ats)\n        await rg.finish("\u6dfb\u52a0\u6210\u529f")\n')),(0,l.kt)("h2",{id:"\u54cd\u5e94\u5668\u4f7f\u7528"},"\u54cd\u5e94\u5668\u4f7f\u7528"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"on_alconna")," \u7684\u6240\u6709\u53c2\u6570\u5982\u4e0b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"command: Alconna | str"),": Alconna \u547d\u4ee4"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"skip_for_unmatch: bool = True"),": \u662f\u5426\u5728\u547d\u4ee4\u4e0d\u5339\u914d\u65f6\u8df3\u8fc7\u8be5\u54cd\u5e94"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"auto_send_output: bool = False"),": \u662f\u5426\u81ea\u52a8\u53d1\u9001\u8f93\u51fa\u4fe1\u606f\u5e76\u8df3\u8fc7\u54cd\u5e94"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"output_converter: TConvert | None = None"),": \u8f93\u51fa\u4fe1\u606f\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d88\u606f\u5e8f\u5217\u65b9\u6cd5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"aliases: set[str | tuple[str, ...]] | None = None"),": \u547d\u4ee4\u522b\u540d\uff0c \u4f5c\u7528\u7c7b\u4f3c\u4e8e ",(0,l.kt)("inlineCode",{parentName:"li"},"on_command")," \u4e2d\u7684 aliases"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"comp_config: CompConfig | None = None"),": \u8865\u5168\u4f1a\u8bdd\u914d\u7f6e\uff0c \u4e0d\u4f20\u5165\u5219\u4e0d\u542f\u7528\u8865\u5168\u4f1a\u8bdd"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"use_origin: bool = False"),": \u662f\u5426\u4f7f\u7528\u672a\u7ecf to_me \u7b49\u5904\u7406\u8fc7\u7684\u6d88\u606f"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"use_cmd_start"),": \u662f\u5426\u4f7f\u7528 COMMAND_START \u4f5c\u4e3a\u547d\u4ee4\u524d\u7f00")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"on_alconna")," \u8fd4\u56de\u7684\u662f ",(0,l.kt)("inlineCode",{parentName:"p"},"Matcher")," \u7684\u5b50\u7c7b ",(0,l.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher"),"\uff0c\u5176\u62d3\u5c55\u4e86\u5982\u4e0b\u65b9\u6cd5\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".assign(path, value, or_not)"),": \u7528\u4e8e\u5bf9\u5305\u542b\u591a\u4e2a\u9009\u9879/\u5b50\u547d\u4ee4\u7684\u547d\u4ee4\u7684\u5206\u6d3e\u5904\u7406"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".got_path(path, prompt, middleware)"),": \u5728 ",(0,l.kt)("inlineCode",{parentName:"li"},"got")," \u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u4f1a\u4ee5 path \u5bf9\u5e94\u7684\u53c2\u6570\u4e3a\u51c6\uff0c\u8bfb\u53d6\u4f20\u5165 message \u7684\u6700\u540e\u4e00\u4e2a\u6d88\u606f\u6bb5\u5e76\u9a8c\u8bc1\u8f6c\u6362"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".set_path_arg(key, value)"),", ",(0,l.kt)("inlineCode",{parentName:"li"},".get_path_arg(key)"),": \u7c7b\u4f3c ",(0,l.kt)("inlineCode",{parentName:"li"},"set_arg")," \u548c ",(0,l.kt)("inlineCode",{parentName:"li"},"got_arg"),"\uff0c\u4e3a ",(0,l.kt)("inlineCode",{parentName:"li"},"got_path")," \u7684\u7279\u5316\u7248\u672c"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".reject_path(path[, prompt, fallback])"),": \u7c7b\u4f3c\u4e8e ",(0,l.kt)("inlineCode",{parentName:"li"},"reject_arg"),"\uff0c\u5bf9\u5e94 ",(0,l.kt)("inlineCode",{parentName:"li"},"got_path")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".dispatch"),": \u540c\u6837\u7684\u5206\u6d3e\u5904\u7406\uff0c\u4f46\u662f\u662f\u7c7b\u4f3c ",(0,l.kt)("inlineCode",{parentName:"li"},"CommandGroup")," \u4e00\u6837\u8fd4\u56de\u65b0\u7684 ",(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaMatcher")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".got"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"send"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"reject"),", ...: \u62d3\u5c55\u4e86 prompt \u7c7b\u578b\uff0c\u5373\u652f\u6301\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"UniMessage")," \u4f5c\u4e3a prompt")),(0,l.kt)("p",null,"\u7528\u4f8b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from arclet.alconna import Alconna, Option, Args\nfrom nonebot_plugin_alconna import on_alconna, AlconnaMatch, Match, AlconnaMatcher, AlconnaArg\n\nlogin = on_alconna(Alconna(["/"], "login", Args["password?", str], Option("-r|--recall")))\n\n@login.assign("recall")\nasync def login_exit():\n    await login.finish("\u5df2\u9000\u51fa")\n\n@login.assign("password")\nasync def login_handle(matcher: AlconnaMatcher, pw: Match[str] = AlconnaMatch("password")):\n    matcher.set_path_arg("password", pw.result)\n\n@login.got_path("password", prompt="\u8bf7\u8f93\u5165\u5bc6\u7801")\nasync def login_got(password: str = AlconnaArg("password")):\n    assert password\n    await login.send("\u767b\u5f55\u6210\u529f")\n')),(0,l.kt)("h2",{id:"\u4f9d\u8d56\u6ce8\u5165"},"\u4f9d\u8d56\u6ce8\u5165"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Alconna")," \u7684\u89e3\u6790\u7ed3\u679c\u4f1a\u653e\u5165 ",(0,l.kt)("inlineCode",{parentName:"p"},"Arparma")," \u7c7b\u4e2d\uff0c\u6216\u7528\u6237\u6307\u5b9a\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"Duplication")," \u7c7b\u3002"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"nonebot_plugin_alconna")," \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u4ed6\u4eec\u5305\u62ec\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaResult"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"CommandResult")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaMatches"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Arparma")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaDuplication"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Duplication")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaMatch"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Match")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u5176\u80fd\u591f\u989d\u5916\u4f20\u5165\u4e00\u4e2a middleware \u51fd\u6570\u6765\u5904\u7406\u5f97\u5230\u7684\u53c2\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaQuery"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"Query")," \u7c7b\u578b\u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff0c\u5176\u80fd\u591f\u989d\u5916\u4f20\u5165\u4e00\u4e2a middleware \u51fd\u6570\u6765\u5904\u7406\u5f97\u5230\u7684\u53c2\u6570"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaExecResult"),": \u63d0\u4f9b\u6302\u8f7d\u5728\u547d\u4ee4\u4e0a\u7684 callback \u7684\u8fd4\u56de\u7ed3\u679c (",(0,l.kt)("inlineCode",{parentName:"li"},"Dict[str, Any]"),") \u7684\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570")),(0,l.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u672c\u63d2\u4ef6\u63d0\u4f9b\u4e86\u51e0\u7c7b\u989d\u5916\u7684\u6a21\u578b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CommandResult"),": \u89e3\u6790\u7ed3\u679c\uff0c\u5305\u62ec\u4e86\u6e90\u547d\u4ee4 ",(0,l.kt)("inlineCode",{parentName:"li"},"source: Alconna")," \uff0c\u89e3\u6790\u7ed3\u679c ",(0,l.kt)("inlineCode",{parentName:"li"},"result: Arparma"),"\uff0c\u4ee5\u53ca\u53ef\u80fd\u7684\u8f93\u51fa\u4fe1\u606f ",(0,l.kt)("inlineCode",{parentName:"li"},"output: str | None")," \u5b57\u6bb5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Match"),": \u5339\u914d\u9879\uff0c\u8868\u793a\u53c2\u6570\u662f\u5426\u5b58\u5728\u4e8e ",(0,l.kt)("inlineCode",{parentName:"li"},"all_matched_args")," \u5185\uff0c\u53ef\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"Match.available")," \u5224\u65ad\u662f\u5426\u5339\u914d\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"Match.result")," \u83b7\u53d6\u5339\u914d\u7684\u503c"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Query"),": \u67e5\u8be2\u9879\uff0c\u8868\u793a\u53c2\u6570\u662f\u5426\u53ef\u7531 ",(0,l.kt)("inlineCode",{parentName:"li"},"Arparma.query")," \u67e5\u8be2\u5e76\u83b7\u5f97\u7ed3\u679c\uff0c\u53ef\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"Query.available")," \u5224\u65ad\u662f\u5426\u67e5\u8be2\u6210\u529f\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"Query.result")," \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c")),(0,l.kt)("p",null,"\u540c\u65f6\uff0c\u57fa\u4e8e ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nonebot/nonebot2/pull/1832"},(0,l.kt)("inlineCode",{parentName:"a"},"Annotated")," \u652f\u6301"),", \u6dfb\u52a0\u4e86\u4e09\u7c7b\u6ce8\u89e3:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlcMatches"),"\uff1a\u540c ",(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaMatches")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlcResult"),"\uff1a\u540c ",(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaResult")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AlcExecResult"),": \u540c ",(0,l.kt)("inlineCode",{parentName:"li"},"AlconnaExecResult"))),(0,l.kt)("p",null,"\u800c\u82e5\u8bbe\u7f6e\u914d\u7f6e\u9879 ",(0,l.kt)("strong",{parentName:"p"},"ALCONNA_USE_PARAM")," (\u9ed8\u8ba4\u4e3a True) \u4e3a True\uff0c\u5219\u4e0a\u8ff0\u4f9d\u8d56\u6ce8\u5165\u7684\u76ee\u6807\u53c2\u6570\u7686\u4e0d\u9700\u8981\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u51fd\u6570\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'async def handle(\n    result: CommandResult,\n    arp: Arparma,\n    dup: Duplication,\n    source: Alconna,\n    abc: str,  # \u7c7b\u4f3c Match, \u4f46\u662f\u82e5\u5339\u914d\u7ed3\u679c\u4e0d\u5b58\u5728\u5bf9\u5e94\u5b57\u6bb5\u5219\u8df3\u8fc7\u8be5 handler\n    foo: Match[str],\n    bar: Query[int] = Query("ttt.bar", 0)  # Query \u4ecd\u7136\u9700\u8981\u4e00\u4e2a\u9ed8\u8ba4\u503c\u6765\u4f20\u9012 path \u53c2\u6570\n):\n    ...\n')),(0,l.kt)("p",null,"\u8be5\u6548\u679c\u5bf9\u4e8e ",(0,l.kt)("inlineCode",{parentName:"p"},"got_path")," \u4e0b\u7684 Arg \u540c\u6837\u6709\u6548"),(0,l.kt)("p",null,"\u5b9e\u4f8b:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'...\nfrom nonebot import require\nrequire("nonebot_plugin_alconna")\n...\n\nfrom nonebot_plugin_alconna import (\n    on_alconna,\n    Match,\n    Query,\n    AlconnaQuery,\n    AlcResult\n)\nfrom arclet.alconna import Alconna, Args, Option, Arparma\n\ntest = on_alconna(\n    Alconna(\n        "test",\n        Option("foo", Args["bar", int]),\n        Option("baz", Args["qux", bool, False])\n    ),\n    auto_send_output=True\n)\n\n\n@test.handle()\nasync def handle_test1(result: AlcResult):\n    await test.send(f"matched: {result.matched}")\n    await test.send(f"maybe output: {result.output}")\n\n@test.handle()\nasync def handle_test2(result: Arparma):\n    await test.send(f"head result: {result.header_result}")\n    await test.send(f"args: {result.all_matched_args}")\n\n@test.handle()\nasync def handle_test3(bar: Match[int]):\n    if bar.available:\n        await test.send(f"foo={bar.result}")\n\n@test.handle()\nasync def handle_test4(qux: Query[bool] = AlconnaQuery("baz.qux", False)):\n    if qux.available:\n        await test.send(f"baz.qux={qux.result}")\n')),(0,l.kt)("h2",{id:"\u6d88\u606f\u6bb5\u6807\u6ce8"},"\u6d88\u606f\u6bb5\u6807\u6ce8"),(0,l.kt)("p",null,"\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u6d88\u606f\u6bb5\u6807\u6ce8\uff0c\u5176\u4e2d ",(0,l.kt)("inlineCode",{parentName:"p"},"At")," \u5c5e\u4e8e\u901a\u7528\u6807\u6ce8\uff0c\u800c ",(0,l.kt)("inlineCode",{parentName:"p"},"Image")," \u5c5e\u4e8e ",(0,l.kt)("inlineCode",{parentName:"p"},"onebot12")," \u9002\u914d\u5668\u4e0b\u7684\u6807\u6ce8\u3002"),(0,l.kt)("p",null,"\u9002\u914d\u5668\u4e0b\u7684\u6d88\u606f\u6bb5\u6807\u6ce8\u4f1a\u5339\u914d\u7279\u5b9a\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"MessageSegment"),"\uff1a"),(0,l.kt)("p",null,"\u800c\u901a\u7528\u6807\u6ce8\u4e0e\u9002\u914d\u5668\u6807\u6ce8\u7684\u533a\u522b\u5728\u4e8e\uff0c\u901a\u7528\u6807\u6ce8\u4f1a\u5339\u914d\u591a\u4e2a\u9002\u914d\u5668\u4e2d\u76f8\u4f3c\u7c7b\u578b\u7684\u6d88\u606f\u6bb5\uff0c\u5e76\u8fd4\u56de\n",(0,l.kt)("inlineCode",{parentName:"p"},"nonebot_plugin_alconna.uniseg")," \u4e2d\u5b9a\u4e49\u7684 ",(0,l.kt)("a",{parentName:"p",href:"/website/docs/2.1.1/best-practice/alconna/utils#%E9%80%9A%E7%94%A8%E6%B6%88%E6%81%AF%E6%AE%B5"},(0,l.kt)("inlineCode",{parentName:"a"},"Segment")," \u6a21\u578b")),(0,l.kt)("p",null,"\u4f8b\u5982\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'...\nats = result.query[tuple[At, ...]]("add.member.target")\ngroup.extend(member.target for member in ats)\n')),(0,l.kt)("p",null,"\u8fd9\u6837\u63d2\u4ef6\u4f7f\u7528\u8005\u5c31\u4e0d\u7528\u8003\u8651\u5e73\u53f0\u4e4b\u95f4\u5b57\u6bb5\u7684\u5dee\u5f02"),(0,l.kt)("p",null,"\u672c\u63d2\u4ef6\u4e3a\u4ee5\u4e0b\u9002\u914d\u5668\u63d0\u4f9b\u4e86\u4e13\u95e8\u7684\u9002\u914d\u5668\u6807\u6ce8\uff1a"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u534f\u8bae\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u8def\u5f84"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-onebot"},"OneBot \u534f\u8bae")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.onebot11, adapters.onebot12")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-telegram"},"Telegram")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.telegram")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-feishu"},"\u98de\u4e66")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.feishu")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-github"},"GitHub")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.github")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-qqguild"},"QQ \u9891\u9053")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.qqguild")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-ding"},"\u9489\u9489")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.ding")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-console"},"Console")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.console")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/Tian-que/nonebot-adapter-kaiheila"},"\u5f00\u9ed1\u5566")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.kook")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ieew/nonebot_adapter_mirai2"},"Mirai")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.mirai")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/JustUndertaker/adapter-ntchat"},"Ntchat")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.ntchat")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/17TheWord/nonebot-adapter-minecraft"},"MineCraft")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.minecraft")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/wwweww/adapter-bilibili"},"BiliBili Live")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.bilibili")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/onebot-walle/nonebot_adapter_walleq"},"Walle-Q")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.onebot12")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/CMHopeSunshine/nonebot-adapter-villa"},"Villa")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.villa")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-discord"},"Discord")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.discord")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/nonebot/adapter-red"},"Red \u534f\u8bae")),(0,l.kt)("td",{parentName:"tr",align:null},"adapters.red")))),(0,l.kt)("h2",{id:"\u6761\u4ef6\u63a7\u5236"},"\u6761\u4ef6\u63a7\u5236"),(0,l.kt)("p",null,"\u672c\u63d2\u4ef6\u53ef\u4ee5\u901a\u8fc7 ",(0,l.kt)("inlineCode",{parentName:"p"},"handle(parameterless)")," \u6765\u63a7\u5236\u4e00\u4e2a\u5177\u4f53\u7684\u54cd\u5e94\u51fd\u6570\u662f\u5426\u5728\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u8df3\u8fc7\u54cd\u5e94\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'...\nfrom nonebot import require\nrequire("nonebot_plugin_alconna")\n...\n\nfrom arclet.alconna import Alconna, Subcommand, Option, Args\nfrom nonebot_plugin_alconna import assign, on_alconna, CommandResult, Check\n\npip = Alconna(\n    "pip",\n    Subcommand(\n        "install", Args["pak", str],\n        Option("--upgrade"),\n        Option("--force-reinstall")\n    ),\n    Subcommand("list", Option("--out-dated"))\n)\n\npip_cmd = on_alconna(pip)\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip install` \u5e76\u4e14 pak \u4e3a `pip` \u65f6\u54cd\u5e94\n@pip_cmd.handle([Check(assign("install.pak", "pip"))])\nasync def update(arp: CommandResult):\n    ...\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip list` \u65f6\u54cd\u5e94\n@pip_cmd.handle([Check(assign("list"))])\nasync def list_(arp: CommandResult):\n    ...\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip install` \u65f6\u54cd\u5e94\n@pip_cmd.handle([Check(assign("install"))])\nasync def install(arp: CommandResult):\n    ...\n')),(0,l.kt)("p",null,"\u6216\u8005\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher.assign"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'@pip_cmd.assign("install.pak", "pip")\nasync def update(arp: CommandResult):\n    ...\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip list` \u65f6\u54cd\u5e94\n@pip_cmd.assign("list")\nasync def list_(arp: CommandResult):\n    ...\n\n# \u4ec5\u5728\u547d\u4ee4\u4e3a `pip install` \u65f6\u54cd\u5e94\n@pip_cmd.assign("install")\nasync def install(arp: CommandResult):\n    ...\n')),(0,l.kt)("p",null,"\u6216\u8005\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"AlconnaMatcher.dispatch"),"\uff1a"),(0,l.kt)("p",null,"\u6b64\u5916\uff0c\u8fd8\u80fd\u50cf ",(0,l.kt)("inlineCode",{parentName:"p"},"CommandGroup")," \u4e00\u6837\u4e3a\u6bcf\u4e2a\u5206\u53d1\u8bbe\u7f6e\u72ec\u7acb\u7684 matcher\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'update_cmd = pip_cmd.dispatch("install.pak", "pip")\n\n@update_cmd.handle()\nasync def update(arp: CommandResult = AlconnaResult()):\n    ...\n')))}c.isMDXComponent=!0}}]);